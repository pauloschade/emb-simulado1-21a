
OLED1.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         00004538  00400000  00400000  00010000  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .ARM.exidx    00000008  00404538  00404538  00014538  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  2 .relocate     0000044c  20400000  00404540  00020000  2**3
                  CONTENTS, ALLOC, LOAD, CODE
  3 .bss          000002c0  2040044c  0040498c  0002044c  2**2
                  ALLOC
  4 .stack        00002004  2040070c  00404c4c  0002044c  2**0
                  ALLOC
  5 .heap         00000200  20402710  00406c50  0002044c  2**0
                  ALLOC
  6 .ARM.attributes 0000002e  00000000  00000000  0002044c  2**0
                  CONTENTS, READONLY
  7 .comment      00000059  00000000  00000000  0002047a  2**0
                  CONTENTS, READONLY
  8 .debug_info   00018702  00000000  00000000  000204d3  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_abbrev 000032b6  00000000  00000000  00038bd5  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_loc    0000630a  00000000  00000000  0003be8b  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_aranges 00000b80  00000000  00000000  00042195  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00000b10  00000000  00000000  00042d15  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_macro  0000a6b4  00000000  00000000  00043825  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_line   0000fde7  00000000  00000000  0004ded9  2**0
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_str    0008fdfa  00000000  00000000  0005dcc0  2**0
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_frame  0000308c  00000000  00000000  000edabc  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00400000 <exception_table>:
  400000:	10 27 40 20 55 2b 40 00 05 2c 40 00 05 2c 40 00     .'@ U+@..,@..,@.
  400010:	05 2c 40 00 05 2c 40 00 05 2c 40 00 00 00 00 00     .,@..,@..,@.....
	...
  40002c:	05 2c 40 00 05 2c 40 00 00 00 00 00 05 2c 40 00     .,@..,@......,@.
  40003c:	05 2c 40 00 05 2c 40 00 05 2c 40 00 05 2c 40 00     .,@..,@..,@..,@.
  40004c:	21 31 40 00 05 2c 40 00 05 2c 40 00 05 2c 40 00     !1@..,@..,@..,@.
  40005c:	05 2c 40 00 05 2c 40 00 00 00 00 00 0d 27 40 00     .,@..,@......'@.
  40006c:	25 27 40 00 3d 27 40 00 05 2c 40 00 05 2c 40 00     %'@.='@..,@..,@.
  40007c:	05 2c 40 00 55 27 40 00 6d 27 40 00 05 2c 40 00     .,@.U'@.m'@..,@.
  40008c:	05 2c 40 00 05 2c 40 00 05 2c 40 00 05 2c 40 00     .,@..,@..,@..,@.
  40009c:	55 31 40 00 81 31 40 00 05 2c 40 00 05 2c 40 00     U1@..1@..,@..,@.
  4000ac:	05 2c 40 00 05 2c 40 00 05 2c 40 00 05 2c 40 00     .,@..,@..,@..,@.
  4000bc:	05 2c 40 00 05 2c 40 00 05 2c 40 00 05 2c 40 00     .,@..,@..,@..,@.
  4000cc:	05 2c 40 00 00 00 00 00 05 2c 40 00 00 00 00 00     .,@......,@.....
  4000dc:	05 2c 40 00 05 2c 40 00 05 2c 40 00 05 2c 40 00     .,@..,@..,@..,@.
  4000ec:	05 2c 40 00 05 2c 40 00 05 2c 40 00 05 2c 40 00     .,@..,@..,@..,@.
  4000fc:	05 2c 40 00 05 2c 40 00 05 2c 40 00 05 2c 40 00     .,@..,@..,@..,@.
  40010c:	05 2c 40 00 05 2c 40 00 00 00 00 00 00 00 00 00     .,@..,@.........
  40011c:	00 00 00 00 05 2c 40 00 05 2c 40 00 05 2c 40 00     .....,@..,@..,@.
  40012c:	05 2c 40 00 05 2c 40 00 00 00 00 00 05 2c 40 00     .,@..,@......,@.
  40013c:	05 2c 40 00                                         .,@.

00400140 <__do_global_dtors_aux>:
  400140:	b510      	push	{r4, lr}
  400142:	4c05      	ldr	r4, [pc, #20]	; (400158 <__do_global_dtors_aux+0x18>)
  400144:	7823      	ldrb	r3, [r4, #0]
  400146:	b933      	cbnz	r3, 400156 <__do_global_dtors_aux+0x16>
  400148:	4b04      	ldr	r3, [pc, #16]	; (40015c <__do_global_dtors_aux+0x1c>)
  40014a:	b113      	cbz	r3, 400152 <__do_global_dtors_aux+0x12>
  40014c:	4804      	ldr	r0, [pc, #16]	; (400160 <__do_global_dtors_aux+0x20>)
  40014e:	f3af 8000 	nop.w
  400152:	2301      	movs	r3, #1
  400154:	7023      	strb	r3, [r4, #0]
  400156:	bd10      	pop	{r4, pc}
  400158:	2040044c 	.word	0x2040044c
  40015c:	00000000 	.word	0x00000000
  400160:	00404540 	.word	0x00404540

00400164 <frame_dummy>:
  400164:	4b0c      	ldr	r3, [pc, #48]	; (400198 <frame_dummy+0x34>)
  400166:	b143      	cbz	r3, 40017a <frame_dummy+0x16>
  400168:	480c      	ldr	r0, [pc, #48]	; (40019c <frame_dummy+0x38>)
  40016a:	490d      	ldr	r1, [pc, #52]	; (4001a0 <frame_dummy+0x3c>)
  40016c:	b510      	push	{r4, lr}
  40016e:	f3af 8000 	nop.w
  400172:	480c      	ldr	r0, [pc, #48]	; (4001a4 <frame_dummy+0x40>)
  400174:	6803      	ldr	r3, [r0, #0]
  400176:	b923      	cbnz	r3, 400182 <frame_dummy+0x1e>
  400178:	bd10      	pop	{r4, pc}
  40017a:	480a      	ldr	r0, [pc, #40]	; (4001a4 <frame_dummy+0x40>)
  40017c:	6803      	ldr	r3, [r0, #0]
  40017e:	b933      	cbnz	r3, 40018e <frame_dummy+0x2a>
  400180:	4770      	bx	lr
  400182:	4b09      	ldr	r3, [pc, #36]	; (4001a8 <frame_dummy+0x44>)
  400184:	2b00      	cmp	r3, #0
  400186:	d0f7      	beq.n	400178 <frame_dummy+0x14>
  400188:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
  40018c:	4718      	bx	r3
  40018e:	4b06      	ldr	r3, [pc, #24]	; (4001a8 <frame_dummy+0x44>)
  400190:	2b00      	cmp	r3, #0
  400192:	d0f5      	beq.n	400180 <frame_dummy+0x1c>
  400194:	4718      	bx	r3
  400196:	bf00      	nop
  400198:	00000000 	.word	0x00000000
  40019c:	00404540 	.word	0x00404540
  4001a0:	20400450 	.word	0x20400450
  4001a4:	00404540 	.word	0x00404540
  4001a8:	00000000 	.word	0x00000000

004001ac <rtt_init>:
 * \param us_prescaler Prescaler value for the RTT.
 *
 * \return 0 if successful.
 */
uint32_t rtt_init(Rtt *p_rtt, uint16_t us_prescaler)
{
  4001ac:	b480      	push	{r7}
  4001ae:	b083      	sub	sp, #12
  4001b0:	af00      	add	r7, sp, #0
  4001b2:	6078      	str	r0, [r7, #4]
  4001b4:	460b      	mov	r3, r1
  4001b6:	807b      	strh	r3, [r7, #2]
#if (SAM4N || SAM4S || SAM4E || SAM4C || SAMG51 || SAM4CP || SAM4CM || SAMV71 || SAMV70 || SAME70 || SAMS70)
	p_rtt->RTT_MR = (us_prescaler | RTT_MR_RTTRST | g_wobits_in_rtt_mr);
  4001b8:	887a      	ldrh	r2, [r7, #2]
  4001ba:	4b07      	ldr	r3, [pc, #28]	; (4001d8 <rtt_init+0x2c>)
  4001bc:	681b      	ldr	r3, [r3, #0]
  4001be:	4313      	orrs	r3, r2
  4001c0:	f443 2280 	orr.w	r2, r3, #262144	; 0x40000
  4001c4:	687b      	ldr	r3, [r7, #4]
  4001c6:	601a      	str	r2, [r3, #0]
#else
	p_rtt->RTT_MR = (us_prescaler | RTT_MR_RTTRST);
#endif
	return 0;
  4001c8:	2300      	movs	r3, #0
}
  4001ca:	4618      	mov	r0, r3
  4001cc:	370c      	adds	r7, #12
  4001ce:	46bd      	mov	sp, r7
  4001d0:	f85d 7b04 	ldr.w	r7, [sp], #4
  4001d4:	4770      	bx	lr
  4001d6:	bf00      	nop
  4001d8:	20400468 	.word	0x20400468

004001dc <rtt_sel_source>:
 *
 * \param p_rtt Pointer to an RTT instance.
 * \param is_rtc_sel RTC 1Hz Clock Selection.
 */
void rtt_sel_source(Rtt *p_rtt, bool is_rtc_sel)
{
  4001dc:	b480      	push	{r7}
  4001de:	b083      	sub	sp, #12
  4001e0:	af00      	add	r7, sp, #0
  4001e2:	6078      	str	r0, [r7, #4]
  4001e4:	460b      	mov	r3, r1
  4001e6:	70fb      	strb	r3, [r7, #3]
	if(is_rtc_sel) {
  4001e8:	78fb      	ldrb	r3, [r7, #3]
  4001ea:	2b00      	cmp	r3, #0
  4001ec:	d00d      	beq.n	40020a <rtt_sel_source+0x2e>
		g_wobits_in_rtt_mr |= RTT_MR_RTC1HZ;
  4001ee:	4b10      	ldr	r3, [pc, #64]	; (400230 <rtt_sel_source+0x54>)
  4001f0:	681b      	ldr	r3, [r3, #0]
  4001f2:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
  4001f6:	4a0e      	ldr	r2, [pc, #56]	; (400230 <rtt_sel_source+0x54>)
  4001f8:	6013      	str	r3, [r2, #0]
		p_rtt->RTT_MR |= g_wobits_in_rtt_mr;
  4001fa:	687b      	ldr	r3, [r7, #4]
  4001fc:	681a      	ldr	r2, [r3, #0]
  4001fe:	4b0c      	ldr	r3, [pc, #48]	; (400230 <rtt_sel_source+0x54>)
  400200:	681b      	ldr	r3, [r3, #0]
  400202:	431a      	orrs	r2, r3
  400204:	687b      	ldr	r3, [r7, #4]
  400206:	601a      	str	r2, [r3, #0]
	} else {
		g_wobits_in_rtt_mr &= ~RTT_MR_RTC1HZ;
		p_rtt->RTT_MR |= g_wobits_in_rtt_mr;
	}
}
  400208:	e00c      	b.n	400224 <rtt_sel_source+0x48>
		g_wobits_in_rtt_mr &= ~RTT_MR_RTC1HZ;
  40020a:	4b09      	ldr	r3, [pc, #36]	; (400230 <rtt_sel_source+0x54>)
  40020c:	681b      	ldr	r3, [r3, #0]
  40020e:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
  400212:	4a07      	ldr	r2, [pc, #28]	; (400230 <rtt_sel_source+0x54>)
  400214:	6013      	str	r3, [r2, #0]
		p_rtt->RTT_MR |= g_wobits_in_rtt_mr;
  400216:	687b      	ldr	r3, [r7, #4]
  400218:	681a      	ldr	r2, [r3, #0]
  40021a:	4b05      	ldr	r3, [pc, #20]	; (400230 <rtt_sel_source+0x54>)
  40021c:	681b      	ldr	r3, [r3, #0]
  40021e:	431a      	orrs	r2, r3
  400220:	687b      	ldr	r3, [r7, #4]
  400222:	601a      	str	r2, [r3, #0]
}
  400224:	bf00      	nop
  400226:	370c      	adds	r7, #12
  400228:	46bd      	mov	sp, r7
  40022a:	f85d 7b04 	ldr.w	r7, [sp], #4
  40022e:	4770      	bx	lr
  400230:	20400468 	.word	0x20400468

00400234 <rtt_enable_interrupt>:
 *
 * \param p_rtt Pointer to an RTT instance.
 * \param ul_sources Interrupts to be enabled.
 */
void rtt_enable_interrupt(Rtt *p_rtt, uint32_t ul_sources)
{
  400234:	b480      	push	{r7}
  400236:	b085      	sub	sp, #20
  400238:	af00      	add	r7, sp, #0
  40023a:	6078      	str	r0, [r7, #4]
  40023c:	6039      	str	r1, [r7, #0]
	uint32_t temp;

	temp = p_rtt->RTT_MR;
  40023e:	687b      	ldr	r3, [r7, #4]
  400240:	681b      	ldr	r3, [r3, #0]
  400242:	60fb      	str	r3, [r7, #12]
	temp |= ul_sources;
  400244:	68fa      	ldr	r2, [r7, #12]
  400246:	683b      	ldr	r3, [r7, #0]
  400248:	4313      	orrs	r3, r2
  40024a:	60fb      	str	r3, [r7, #12]
#if (SAM4N || SAM4S || SAM4E || SAM4C || SAMG51 || SAM4CP || SAM4CM || SAMV71 || SAMV70 || SAME70 || SAMS70)
	temp |= g_wobits_in_rtt_mr;
  40024c:	4b06      	ldr	r3, [pc, #24]	; (400268 <rtt_enable_interrupt+0x34>)
  40024e:	681b      	ldr	r3, [r3, #0]
  400250:	68fa      	ldr	r2, [r7, #12]
  400252:	4313      	orrs	r3, r2
  400254:	60fb      	str	r3, [r7, #12]
#endif
	p_rtt->RTT_MR = temp;
  400256:	687b      	ldr	r3, [r7, #4]
  400258:	68fa      	ldr	r2, [r7, #12]
  40025a:	601a      	str	r2, [r3, #0]
}
  40025c:	bf00      	nop
  40025e:	3714      	adds	r7, #20
  400260:	46bd      	mov	sp, r7
  400262:	f85d 7b04 	ldr.w	r7, [sp], #4
  400266:	4770      	bx	lr
  400268:	20400468 	.word	0x20400468

0040026c <rtt_disable_interrupt>:
 *
 * \param p_rtt Pointer to an RTT instance.
 * \param ul_sources Interrupts to be disabled.
 */
void rtt_disable_interrupt(Rtt *p_rtt, uint32_t ul_sources)
{
  40026c:	b480      	push	{r7}
  40026e:	b085      	sub	sp, #20
  400270:	af00      	add	r7, sp, #0
  400272:	6078      	str	r0, [r7, #4]
  400274:	6039      	str	r1, [r7, #0]
	uint32_t temp = 0;
  400276:	2300      	movs	r3, #0
  400278:	60fb      	str	r3, [r7, #12]

	temp = p_rtt->RTT_MR;
  40027a:	687b      	ldr	r3, [r7, #4]
  40027c:	681b      	ldr	r3, [r3, #0]
  40027e:	60fb      	str	r3, [r7, #12]
	temp &= (~ul_sources);
  400280:	683b      	ldr	r3, [r7, #0]
  400282:	43db      	mvns	r3, r3
  400284:	68fa      	ldr	r2, [r7, #12]
  400286:	4013      	ands	r3, r2
  400288:	60fb      	str	r3, [r7, #12]
#if (SAM4N || SAM4S || SAM4E || SAM4C || SAMG51 || SAM4CP || SAM4CM || SAMV71 || SAMV70 || SAME70 || SAMS70)
	temp |= g_wobits_in_rtt_mr;
  40028a:	4b07      	ldr	r3, [pc, #28]	; (4002a8 <rtt_disable_interrupt+0x3c>)
  40028c:	681b      	ldr	r3, [r3, #0]
  40028e:	68fa      	ldr	r2, [r7, #12]
  400290:	4313      	orrs	r3, r2
  400292:	60fb      	str	r3, [r7, #12]
#endif
	p_rtt->RTT_MR = temp;
  400294:	687b      	ldr	r3, [r7, #4]
  400296:	68fa      	ldr	r2, [r7, #12]
  400298:	601a      	str	r2, [r3, #0]
}
  40029a:	bf00      	nop
  40029c:	3714      	adds	r7, #20
  40029e:	46bd      	mov	sp, r7
  4002a0:	f85d 7b04 	ldr.w	r7, [sp], #4
  4002a4:	4770      	bx	lr
  4002a6:	bf00      	nop
  4002a8:	20400468 	.word	0x20400468

004002ac <rtt_read_timer_value>:
 * \param p_rtt Pointer to an RTT instance.
 *
 * \return The current Real-time Timer value.
 */
uint32_t rtt_read_timer_value(Rtt *p_rtt)
{
  4002ac:	b480      	push	{r7}
  4002ae:	b085      	sub	sp, #20
  4002b0:	af00      	add	r7, sp, #0
  4002b2:	6078      	str	r0, [r7, #4]
	uint32_t rtt_val = p_rtt->RTT_VR;
  4002b4:	687b      	ldr	r3, [r7, #4]
  4002b6:	689b      	ldr	r3, [r3, #8]
  4002b8:	60fb      	str	r3, [r7, #12]

	while (rtt_val != p_rtt->RTT_VR) {
  4002ba:	e002      	b.n	4002c2 <rtt_read_timer_value+0x16>
		rtt_val = p_rtt->RTT_VR;
  4002bc:	687b      	ldr	r3, [r7, #4]
  4002be:	689b      	ldr	r3, [r3, #8]
  4002c0:	60fb      	str	r3, [r7, #12]
	while (rtt_val != p_rtt->RTT_VR) {
  4002c2:	687b      	ldr	r3, [r7, #4]
  4002c4:	689a      	ldr	r2, [r3, #8]
  4002c6:	68fb      	ldr	r3, [r7, #12]
  4002c8:	429a      	cmp	r2, r3
  4002ca:	d1f7      	bne.n	4002bc <rtt_read_timer_value+0x10>
	}

	return rtt_val;
  4002cc:	68fb      	ldr	r3, [r7, #12]
}
  4002ce:	4618      	mov	r0, r3
  4002d0:	3714      	adds	r7, #20
  4002d2:	46bd      	mov	sp, r7
  4002d4:	f85d 7b04 	ldr.w	r7, [sp], #4
  4002d8:	4770      	bx	lr

004002da <rtt_get_status>:
 * \param p_rtt Pointer to an RTT instance.
 *
 * \return The Real-time Timer status.
 */
uint32_t rtt_get_status(Rtt *p_rtt)
{
  4002da:	b480      	push	{r7}
  4002dc:	b083      	sub	sp, #12
  4002de:	af00      	add	r7, sp, #0
  4002e0:	6078      	str	r0, [r7, #4]
	return p_rtt->RTT_SR;
  4002e2:	687b      	ldr	r3, [r7, #4]
  4002e4:	68db      	ldr	r3, [r3, #12]
}
  4002e6:	4618      	mov	r0, r3
  4002e8:	370c      	adds	r7, #12
  4002ea:	46bd      	mov	sp, r7
  4002ec:	f85d 7b04 	ldr.w	r7, [sp], #4
  4002f0:	4770      	bx	lr
	...

004002f4 <rtt_write_alarm_time>:
 * \param ul_alarm_time Alarm time,Alarm time = ALMV + 1.
 *
 * \retval 0 Configuration is done.
 */
uint32_t rtt_write_alarm_time(Rtt *p_rtt, uint32_t ul_alarm_time)
{
  4002f4:	b580      	push	{r7, lr}
  4002f6:	b084      	sub	sp, #16
  4002f8:	af00      	add	r7, sp, #0
  4002fa:	6078      	str	r0, [r7, #4]
  4002fc:	6039      	str	r1, [r7, #0]
	uint32_t flag;

	flag = p_rtt->RTT_MR & RTT_MR_ALMIEN;
  4002fe:	687b      	ldr	r3, [r7, #4]
  400300:	681b      	ldr	r3, [r3, #0]
  400302:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
  400306:	60fb      	str	r3, [r7, #12]

	rtt_disable_interrupt(RTT, RTT_MR_ALMIEN);
  400308:	f44f 3180 	mov.w	r1, #65536	; 0x10000
  40030c:	480d      	ldr	r0, [pc, #52]	; (400344 <rtt_write_alarm_time+0x50>)
  40030e:	4b0e      	ldr	r3, [pc, #56]	; (400348 <rtt_write_alarm_time+0x54>)
  400310:	4798      	blx	r3

	/**
	 * Alarm time = ALMV + 1,If the incoming parameter 
	 * is 0, the ALMV is set to 0xFFFFFFFF.
	*/
	if(ul_alarm_time == 0) {
  400312:	683b      	ldr	r3, [r7, #0]
  400314:	2b00      	cmp	r3, #0
  400316:	d104      	bne.n	400322 <rtt_write_alarm_time+0x2e>
		p_rtt->RTT_AR = 0xFFFFFFFF;
  400318:	687b      	ldr	r3, [r7, #4]
  40031a:	f04f 32ff 	mov.w	r2, #4294967295
  40031e:	605a      	str	r2, [r3, #4]
  400320:	e003      	b.n	40032a <rtt_write_alarm_time+0x36>
	}
	else {
		p_rtt->RTT_AR = ul_alarm_time - 1;
  400322:	683b      	ldr	r3, [r7, #0]
  400324:	1e5a      	subs	r2, r3, #1
  400326:	687b      	ldr	r3, [r7, #4]
  400328:	605a      	str	r2, [r3, #4]
	}

	if (flag) {
  40032a:	68fb      	ldr	r3, [r7, #12]
  40032c:	2b00      	cmp	r3, #0
  40032e:	d004      	beq.n	40033a <rtt_write_alarm_time+0x46>
		rtt_enable_interrupt(RTT, RTT_MR_ALMIEN);
  400330:	f44f 3180 	mov.w	r1, #65536	; 0x10000
  400334:	4803      	ldr	r0, [pc, #12]	; (400344 <rtt_write_alarm_time+0x50>)
  400336:	4b05      	ldr	r3, [pc, #20]	; (40034c <rtt_write_alarm_time+0x58>)
  400338:	4798      	blx	r3
	}

	return 0;
  40033a:	2300      	movs	r3, #0
}
  40033c:	4618      	mov	r0, r3
  40033e:	3710      	adds	r7, #16
  400340:	46bd      	mov	sp, r7
  400342:	bd80      	pop	{r7, pc}
  400344:	400e1830 	.word	0x400e1830
  400348:	0040026d 	.word	0x0040026d
  40034c:	00400235 	.word	0x00400235

00400350 <spi_get_peripheral_select_mode>:
 * \param p_spi Pointer to an SPI instance.
 *
 * \return 1 for Variable mode, 0 for fixed mode.
 */
static inline uint32_t spi_get_peripheral_select_mode(Spi *p_spi)
{
  400350:	b480      	push	{r7}
  400352:	b083      	sub	sp, #12
  400354:	af00      	add	r7, sp, #0
  400356:	6078      	str	r0, [r7, #4]
	if (p_spi->SPI_MR & SPI_MR_PS) {
  400358:	687b      	ldr	r3, [r7, #4]
  40035a:	685b      	ldr	r3, [r3, #4]
  40035c:	f003 0302 	and.w	r3, r3, #2
  400360:	2b00      	cmp	r3, #0
  400362:	d001      	beq.n	400368 <spi_get_peripheral_select_mode+0x18>
		return 1;
  400364:	2301      	movs	r3, #1
  400366:	e000      	b.n	40036a <spi_get_peripheral_select_mode+0x1a>
	} else {
		return 0;
  400368:	2300      	movs	r3, #0
	}
}
  40036a:	4618      	mov	r0, r3
  40036c:	370c      	adds	r7, #12
  40036e:	46bd      	mov	sp, r7
  400370:	f85d 7b04 	ldr.w	r7, [sp], #4
  400374:	4770      	bx	lr
	...

00400378 <sysclk_enable_peripheral_clock>:
 * \brief Enable a peripheral's clock.
 *
 * \param ul_id Id (number) of the peripheral clock.
 */
static inline void sysclk_enable_peripheral_clock(uint32_t ul_id)
{
  400378:	b580      	push	{r7, lr}
  40037a:	b082      	sub	sp, #8
  40037c:	af00      	add	r7, sp, #0
  40037e:	6078      	str	r0, [r7, #4]
	pmc_enable_periph_clk(ul_id);
  400380:	6878      	ldr	r0, [r7, #4]
  400382:	4b03      	ldr	r3, [pc, #12]	; (400390 <sysclk_enable_peripheral_clock+0x18>)
  400384:	4798      	blx	r3
}
  400386:	bf00      	nop
  400388:	3708      	adds	r7, #8
  40038a:	46bd      	mov	sp, r7
  40038c:	bd80      	pop	{r7, pc}
  40038e:	bf00      	nop
  400390:	00402a49 	.word	0x00402a49

00400394 <spi_enable_clock>:
 * \brief Enable SPI clock.
 *
 * \param p_spi Pointer to an SPI instance.
 */
void spi_enable_clock(Spi *p_spi)
{
  400394:	b580      	push	{r7, lr}
  400396:	b082      	sub	sp, #8
  400398:	af00      	add	r7, sp, #0
  40039a:	6078      	str	r0, [r7, #4]
#if (SAM4S || SAM3S || SAM3N || SAM3U || SAM4E || SAM4N || SAMG51|| SAMG53|| SAMG54)
	UNUSED(p_spi);
	sysclk_enable_peripheral_clock(ID_SPI);
#elif (SAM3XA || SAM4C || SAM4CP || SAM4CM || SAMV71 || SAMV70 || SAME70 || SAMS70)
	if (p_spi == SPI0) {
  40039c:	687b      	ldr	r3, [r7, #4]
  40039e:	4a09      	ldr	r2, [pc, #36]	; (4003c4 <spi_enable_clock+0x30>)
  4003a0:	4293      	cmp	r3, r2
  4003a2:	d103      	bne.n	4003ac <spi_enable_clock+0x18>
		sysclk_enable_peripheral_clock(ID_SPI0);
  4003a4:	2015      	movs	r0, #21
  4003a6:	4b08      	ldr	r3, [pc, #32]	; (4003c8 <spi_enable_clock+0x34>)
  4003a8:	4798      	blx	r3
	}
	#endif
#elif SAM4L
	sysclk_enable_peripheral_clock(p_spi);
#endif
}
  4003aa:	e006      	b.n	4003ba <spi_enable_clock+0x26>
	else if (p_spi == SPI1) {
  4003ac:	687b      	ldr	r3, [r7, #4]
  4003ae:	4a07      	ldr	r2, [pc, #28]	; (4003cc <spi_enable_clock+0x38>)
  4003b0:	4293      	cmp	r3, r2
  4003b2:	d102      	bne.n	4003ba <spi_enable_clock+0x26>
		sysclk_enable_peripheral_clock(ID_SPI1);
  4003b4:	202a      	movs	r0, #42	; 0x2a
  4003b6:	4b04      	ldr	r3, [pc, #16]	; (4003c8 <spi_enable_clock+0x34>)
  4003b8:	4798      	blx	r3
}
  4003ba:	bf00      	nop
  4003bc:	3708      	adds	r7, #8
  4003be:	46bd      	mov	sp, r7
  4003c0:	bd80      	pop	{r7, pc}
  4003c2:	bf00      	nop
  4003c4:	40008000 	.word	0x40008000
  4003c8:	00400379 	.word	0x00400379
  4003cc:	40058000 	.word	0x40058000

004003d0 <spi_set_peripheral_chip_select_value>:
 *                 The decode mode can be enabled/disabled by follow functions:
 *                 \ref spi_enable_peripheral_select_decode,
 *                 \ref spi_disable_peripheral_select_decode.
 */
void spi_set_peripheral_chip_select_value(Spi *p_spi, uint32_t ul_value)
{
  4003d0:	b480      	push	{r7}
  4003d2:	b083      	sub	sp, #12
  4003d4:	af00      	add	r7, sp, #0
  4003d6:	6078      	str	r0, [r7, #4]
  4003d8:	6039      	str	r1, [r7, #0]
	p_spi->SPI_MR &= (~SPI_MR_PCS_Msk);
  4003da:	687b      	ldr	r3, [r7, #4]
  4003dc:	685b      	ldr	r3, [r3, #4]
  4003de:	f423 2270 	bic.w	r2, r3, #983040	; 0xf0000
  4003e2:	687b      	ldr	r3, [r7, #4]
  4003e4:	605a      	str	r2, [r3, #4]
	p_spi->SPI_MR |= SPI_MR_PCS(ul_value);
  4003e6:	687b      	ldr	r3, [r7, #4]
  4003e8:	685a      	ldr	r2, [r3, #4]
  4003ea:	683b      	ldr	r3, [r7, #0]
  4003ec:	041b      	lsls	r3, r3, #16
  4003ee:	f403 2370 	and.w	r3, r3, #983040	; 0xf0000
  4003f2:	431a      	orrs	r2, r3
  4003f4:	687b      	ldr	r3, [r7, #4]
  4003f6:	605a      	str	r2, [r3, #4]
}
  4003f8:	bf00      	nop
  4003fa:	370c      	adds	r7, #12
  4003fc:	46bd      	mov	sp, r7
  4003fe:	f85d 7b04 	ldr.w	r7, [sp], #4
  400402:	4770      	bx	lr

00400404 <spi_write>:
 * \retval SPI_OK on Success.
 * \retval SPI_ERROR_TIMEOUT on Time-out.
 */
spi_status_t spi_write(Spi *p_spi, uint16_t us_data,
		uint8_t uc_pcs, uint8_t uc_last)
{
  400404:	b580      	push	{r7, lr}
  400406:	b084      	sub	sp, #16
  400408:	af00      	add	r7, sp, #0
  40040a:	6078      	str	r0, [r7, #4]
  40040c:	4608      	mov	r0, r1
  40040e:	4611      	mov	r1, r2
  400410:	461a      	mov	r2, r3
  400412:	4603      	mov	r3, r0
  400414:	807b      	strh	r3, [r7, #2]
  400416:	460b      	mov	r3, r1
  400418:	707b      	strb	r3, [r7, #1]
  40041a:	4613      	mov	r3, r2
  40041c:	703b      	strb	r3, [r7, #0]
	uint32_t timeout = SPI_TIMEOUT;
  40041e:	f643 2398 	movw	r3, #15000	; 0x3a98
  400422:	60fb      	str	r3, [r7, #12]
	uint32_t value;

	while (!(p_spi->SPI_SR & SPI_SR_TDRE)) {
  400424:	e006      	b.n	400434 <spi_write+0x30>
		if (!timeout--) {
  400426:	68fb      	ldr	r3, [r7, #12]
  400428:	1e5a      	subs	r2, r3, #1
  40042a:	60fa      	str	r2, [r7, #12]
  40042c:	2b00      	cmp	r3, #0
  40042e:	d101      	bne.n	400434 <spi_write+0x30>
			return SPI_ERROR_TIMEOUT;
  400430:	2301      	movs	r3, #1
  400432:	e020      	b.n	400476 <spi_write+0x72>
	while (!(p_spi->SPI_SR & SPI_SR_TDRE)) {
  400434:	687b      	ldr	r3, [r7, #4]
  400436:	691b      	ldr	r3, [r3, #16]
  400438:	f003 0302 	and.w	r3, r3, #2
  40043c:	2b00      	cmp	r3, #0
  40043e:	d0f2      	beq.n	400426 <spi_write+0x22>
		}
	}

	if (spi_get_peripheral_select_mode(p_spi)) {
  400440:	6878      	ldr	r0, [r7, #4]
  400442:	4b0f      	ldr	r3, [pc, #60]	; (400480 <spi_write+0x7c>)
  400444:	4798      	blx	r3
  400446:	4603      	mov	r3, r0
  400448:	2b00      	cmp	r3, #0
  40044a:	d00e      	beq.n	40046a <spi_write+0x66>
		value = SPI_TDR_TD(us_data) | SPI_TDR_PCS(uc_pcs);
  40044c:	887a      	ldrh	r2, [r7, #2]
  40044e:	787b      	ldrb	r3, [r7, #1]
  400450:	041b      	lsls	r3, r3, #16
  400452:	f403 2370 	and.w	r3, r3, #983040	; 0xf0000
  400456:	4313      	orrs	r3, r2
  400458:	60bb      	str	r3, [r7, #8]
		if (uc_last) {
  40045a:	783b      	ldrb	r3, [r7, #0]
  40045c:	2b00      	cmp	r3, #0
  40045e:	d006      	beq.n	40046e <spi_write+0x6a>
			value |= SPI_TDR_LASTXFER;
  400460:	68bb      	ldr	r3, [r7, #8]
  400462:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
  400466:	60bb      	str	r3, [r7, #8]
  400468:	e001      	b.n	40046e <spi_write+0x6a>
		}
	} else {
		value = SPI_TDR_TD(us_data);
  40046a:	887b      	ldrh	r3, [r7, #2]
  40046c:	60bb      	str	r3, [r7, #8]
	}

	p_spi->SPI_TDR = value;
  40046e:	687b      	ldr	r3, [r7, #4]
  400470:	68ba      	ldr	r2, [r7, #8]
  400472:	60da      	str	r2, [r3, #12]

	return SPI_OK;
  400474:	2300      	movs	r3, #0
}
  400476:	4618      	mov	r0, r3
  400478:	3710      	adds	r7, #16
  40047a:	46bd      	mov	sp, r7
  40047c:	bd80      	pop	{r7, pc}
  40047e:	bf00      	nop
  400480:	00400351 	.word	0x00400351

00400484 <spi_set_clock_polarity>:
 * \param ul_pcs_ch Peripheral Chip Select channel (0~3).
 * \param ul_polarity Default clock state is logical one(high)/zero(low).
 */
void spi_set_clock_polarity(Spi *p_spi, uint32_t ul_pcs_ch,
		uint32_t ul_polarity)
{
  400484:	b480      	push	{r7}
  400486:	b085      	sub	sp, #20
  400488:	af00      	add	r7, sp, #0
  40048a:	60f8      	str	r0, [r7, #12]
  40048c:	60b9      	str	r1, [r7, #8]
  40048e:	607a      	str	r2, [r7, #4]
	if (ul_polarity) {
  400490:	687b      	ldr	r3, [r7, #4]
  400492:	2b00      	cmp	r3, #0
  400494:	d00c      	beq.n	4004b0 <spi_set_clock_polarity+0x2c>
		p_spi->SPI_CSR[ul_pcs_ch] |= SPI_CSR_CPOL;
  400496:	68fb      	ldr	r3, [r7, #12]
  400498:	68ba      	ldr	r2, [r7, #8]
  40049a:	320c      	adds	r2, #12
  40049c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
  4004a0:	f043 0101 	orr.w	r1, r3, #1
  4004a4:	68fb      	ldr	r3, [r7, #12]
  4004a6:	68ba      	ldr	r2, [r7, #8]
  4004a8:	320c      	adds	r2, #12
  4004aa:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
	} else {
		p_spi->SPI_CSR[ul_pcs_ch] &= (~SPI_CSR_CPOL);
	}
}
  4004ae:	e00b      	b.n	4004c8 <spi_set_clock_polarity+0x44>
		p_spi->SPI_CSR[ul_pcs_ch] &= (~SPI_CSR_CPOL);
  4004b0:	68fb      	ldr	r3, [r7, #12]
  4004b2:	68ba      	ldr	r2, [r7, #8]
  4004b4:	320c      	adds	r2, #12
  4004b6:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
  4004ba:	f023 0101 	bic.w	r1, r3, #1
  4004be:	68fb      	ldr	r3, [r7, #12]
  4004c0:	68ba      	ldr	r2, [r7, #8]
  4004c2:	320c      	adds	r2, #12
  4004c4:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
}
  4004c8:	bf00      	nop
  4004ca:	3714      	adds	r7, #20
  4004cc:	46bd      	mov	sp, r7
  4004ce:	f85d 7b04 	ldr.w	r7, [sp], #4
  4004d2:	4770      	bx	lr

004004d4 <spi_set_clock_phase>:
 * \param p_spi Pointer to an SPI instance.
 *  \param ul_pcs_ch Peripheral Chip Select channel (0~3).
 *  \param ul_phase Data capture on the rising/falling edge of clock.
 */
void spi_set_clock_phase(Spi *p_spi, uint32_t ul_pcs_ch, uint32_t ul_phase)
{
  4004d4:	b480      	push	{r7}
  4004d6:	b085      	sub	sp, #20
  4004d8:	af00      	add	r7, sp, #0
  4004da:	60f8      	str	r0, [r7, #12]
  4004dc:	60b9      	str	r1, [r7, #8]
  4004de:	607a      	str	r2, [r7, #4]
	if (ul_phase) {
  4004e0:	687b      	ldr	r3, [r7, #4]
  4004e2:	2b00      	cmp	r3, #0
  4004e4:	d00c      	beq.n	400500 <spi_set_clock_phase+0x2c>
		p_spi->SPI_CSR[ul_pcs_ch] |= SPI_CSR_NCPHA;
  4004e6:	68fb      	ldr	r3, [r7, #12]
  4004e8:	68ba      	ldr	r2, [r7, #8]
  4004ea:	320c      	adds	r2, #12
  4004ec:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
  4004f0:	f043 0102 	orr.w	r1, r3, #2
  4004f4:	68fb      	ldr	r3, [r7, #12]
  4004f6:	68ba      	ldr	r2, [r7, #8]
  4004f8:	320c      	adds	r2, #12
  4004fa:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
	} else {
		p_spi->SPI_CSR[ul_pcs_ch] &= (~SPI_CSR_NCPHA);
	}
}
  4004fe:	e00b      	b.n	400518 <spi_set_clock_phase+0x44>
		p_spi->SPI_CSR[ul_pcs_ch] &= (~SPI_CSR_NCPHA);
  400500:	68fb      	ldr	r3, [r7, #12]
  400502:	68ba      	ldr	r2, [r7, #8]
  400504:	320c      	adds	r2, #12
  400506:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
  40050a:	f023 0102 	bic.w	r1, r3, #2
  40050e:	68fb      	ldr	r3, [r7, #12]
  400510:	68ba      	ldr	r2, [r7, #8]
  400512:	320c      	adds	r2, #12
  400514:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
}
  400518:	bf00      	nop
  40051a:	3714      	adds	r7, #20
  40051c:	46bd      	mov	sp, r7
  40051e:	f85d 7b04 	ldr.w	r7, [sp], #4
  400522:	4770      	bx	lr

00400524 <spi_configure_cs_behavior>:
 * \param ul_pcs_ch Peripheral Chip Select channel (0~3).
 * \param ul_cs_behavior Behavior of the Chip Select after transfer.
 */
void spi_configure_cs_behavior(Spi *p_spi, uint32_t ul_pcs_ch,
		uint32_t ul_cs_behavior)
{
  400524:	b480      	push	{r7}
  400526:	b085      	sub	sp, #20
  400528:	af00      	add	r7, sp, #0
  40052a:	60f8      	str	r0, [r7, #12]
  40052c:	60b9      	str	r1, [r7, #8]
  40052e:	607a      	str	r2, [r7, #4]
	if (ul_cs_behavior == SPI_CS_RISE_FORCED) {
  400530:	687b      	ldr	r3, [r7, #4]
  400532:	2b04      	cmp	r3, #4
  400534:	d118      	bne.n	400568 <spi_configure_cs_behavior+0x44>
		p_spi->SPI_CSR[ul_pcs_ch] &= (~SPI_CSR_CSAAT);
  400536:	68fb      	ldr	r3, [r7, #12]
  400538:	68ba      	ldr	r2, [r7, #8]
  40053a:	320c      	adds	r2, #12
  40053c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
  400540:	f023 0108 	bic.w	r1, r3, #8
  400544:	68fb      	ldr	r3, [r7, #12]
  400546:	68ba      	ldr	r2, [r7, #8]
  400548:	320c      	adds	r2, #12
  40054a:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
		p_spi->SPI_CSR[ul_pcs_ch] |= SPI_CSR_CSNAAT;
  40054e:	68fb      	ldr	r3, [r7, #12]
  400550:	68ba      	ldr	r2, [r7, #8]
  400552:	320c      	adds	r2, #12
  400554:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
  400558:	f043 0104 	orr.w	r1, r3, #4
  40055c:	68fb      	ldr	r3, [r7, #12]
  40055e:	68ba      	ldr	r2, [r7, #8]
  400560:	320c      	adds	r2, #12
  400562:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
		p_spi->SPI_CSR[ul_pcs_ch] &= (~SPI_CSR_CSAAT);
		p_spi->SPI_CSR[ul_pcs_ch] &= (~SPI_CSR_CSNAAT);
	} else if (ul_cs_behavior == SPI_CS_KEEP_LOW) {
		p_spi->SPI_CSR[ul_pcs_ch] |= SPI_CSR_CSAAT;
	}
}
  400566:	e02a      	b.n	4005be <spi_configure_cs_behavior+0x9a>
	} else if (ul_cs_behavior == SPI_CS_RISE_NO_TX) {
  400568:	687b      	ldr	r3, [r7, #4]
  40056a:	2b00      	cmp	r3, #0
  40056c:	d118      	bne.n	4005a0 <spi_configure_cs_behavior+0x7c>
		p_spi->SPI_CSR[ul_pcs_ch] &= (~SPI_CSR_CSAAT);
  40056e:	68fb      	ldr	r3, [r7, #12]
  400570:	68ba      	ldr	r2, [r7, #8]
  400572:	320c      	adds	r2, #12
  400574:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
  400578:	f023 0108 	bic.w	r1, r3, #8
  40057c:	68fb      	ldr	r3, [r7, #12]
  40057e:	68ba      	ldr	r2, [r7, #8]
  400580:	320c      	adds	r2, #12
  400582:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
		p_spi->SPI_CSR[ul_pcs_ch] &= (~SPI_CSR_CSNAAT);
  400586:	68fb      	ldr	r3, [r7, #12]
  400588:	68ba      	ldr	r2, [r7, #8]
  40058a:	320c      	adds	r2, #12
  40058c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
  400590:	f023 0104 	bic.w	r1, r3, #4
  400594:	68fb      	ldr	r3, [r7, #12]
  400596:	68ba      	ldr	r2, [r7, #8]
  400598:	320c      	adds	r2, #12
  40059a:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
}
  40059e:	e00e      	b.n	4005be <spi_configure_cs_behavior+0x9a>
	} else if (ul_cs_behavior == SPI_CS_KEEP_LOW) {
  4005a0:	687b      	ldr	r3, [r7, #4]
  4005a2:	2b08      	cmp	r3, #8
  4005a4:	d10b      	bne.n	4005be <spi_configure_cs_behavior+0x9a>
		p_spi->SPI_CSR[ul_pcs_ch] |= SPI_CSR_CSAAT;
  4005a6:	68fb      	ldr	r3, [r7, #12]
  4005a8:	68ba      	ldr	r2, [r7, #8]
  4005aa:	320c      	adds	r2, #12
  4005ac:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
  4005b0:	f043 0108 	orr.w	r1, r3, #8
  4005b4:	68fb      	ldr	r3, [r7, #12]
  4005b6:	68ba      	ldr	r2, [r7, #8]
  4005b8:	320c      	adds	r2, #12
  4005ba:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
}
  4005be:	bf00      	nop
  4005c0:	3714      	adds	r7, #20
  4005c2:	46bd      	mov	sp, r7
  4005c4:	f85d 7b04 	ldr.w	r7, [sp], #4
  4005c8:	4770      	bx	lr

004005ca <spi_set_bits_per_transfer>:
 * \param ul_bits Number of bits (8~16), use the pattern defined
 *        in the device header file.
 */
void spi_set_bits_per_transfer(Spi *p_spi, uint32_t ul_pcs_ch,
		uint32_t ul_bits)
{
  4005ca:	b480      	push	{r7}
  4005cc:	b085      	sub	sp, #20
  4005ce:	af00      	add	r7, sp, #0
  4005d0:	60f8      	str	r0, [r7, #12]
  4005d2:	60b9      	str	r1, [r7, #8]
  4005d4:	607a      	str	r2, [r7, #4]
	p_spi->SPI_CSR[ul_pcs_ch] &= (~SPI_CSR_BITS_Msk);
  4005d6:	68fb      	ldr	r3, [r7, #12]
  4005d8:	68ba      	ldr	r2, [r7, #8]
  4005da:	320c      	adds	r2, #12
  4005dc:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
  4005e0:	f023 01f0 	bic.w	r1, r3, #240	; 0xf0
  4005e4:	68fb      	ldr	r3, [r7, #12]
  4005e6:	68ba      	ldr	r2, [r7, #8]
  4005e8:	320c      	adds	r2, #12
  4005ea:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
	p_spi->SPI_CSR[ul_pcs_ch] |= ul_bits;
  4005ee:	68fb      	ldr	r3, [r7, #12]
  4005f0:	68ba      	ldr	r2, [r7, #8]
  4005f2:	320c      	adds	r2, #12
  4005f4:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
  4005f8:	687b      	ldr	r3, [r7, #4]
  4005fa:	ea42 0103 	orr.w	r1, r2, r3
  4005fe:	68fb      	ldr	r3, [r7, #12]
  400600:	68ba      	ldr	r2, [r7, #8]
  400602:	320c      	adds	r2, #12
  400604:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
}
  400608:	bf00      	nop
  40060a:	3714      	adds	r7, #20
  40060c:	46bd      	mov	sp, r7
  40060e:	f85d 7b04 	ldr.w	r7, [sp], #4
  400612:	4770      	bx	lr

00400614 <spi_calc_baudrate_div>:
 * \return Divider or error code.
 *   \retval > 0  Success.
 *   \retval < 0  Error.
 */
int16_t spi_calc_baudrate_div(const uint32_t baudrate, uint32_t mck)
{
  400614:	b480      	push	{r7}
  400616:	b085      	sub	sp, #20
  400618:	af00      	add	r7, sp, #0
  40061a:	6078      	str	r0, [r7, #4]
  40061c:	6039      	str	r1, [r7, #0]
	int baud_div = div_ceil(mck, baudrate);
  40061e:	683a      	ldr	r2, [r7, #0]
  400620:	687b      	ldr	r3, [r7, #4]
  400622:	4413      	add	r3, r2
  400624:	1e5a      	subs	r2, r3, #1
  400626:	687b      	ldr	r3, [r7, #4]
  400628:	fbb2 f3f3 	udiv	r3, r2, r3
  40062c:	60fb      	str	r3, [r7, #12]

	/* The value of baud_div is from 1 to 255 in the SCBR field. */
	if (baud_div <= 0 || baud_div > 255) {
  40062e:	68fb      	ldr	r3, [r7, #12]
  400630:	2b00      	cmp	r3, #0
  400632:	dd02      	ble.n	40063a <spi_calc_baudrate_div+0x26>
  400634:	68fb      	ldr	r3, [r7, #12]
  400636:	2bff      	cmp	r3, #255	; 0xff
  400638:	dd02      	ble.n	400640 <spi_calc_baudrate_div+0x2c>
		return -1;
  40063a:	f04f 33ff 	mov.w	r3, #4294967295
  40063e:	e001      	b.n	400644 <spi_calc_baudrate_div+0x30>
	}

	return baud_div;
  400640:	68fb      	ldr	r3, [r7, #12]
  400642:	b21b      	sxth	r3, r3
}
  400644:	4618      	mov	r0, r3
  400646:	3714      	adds	r7, #20
  400648:	46bd      	mov	sp, r7
  40064a:	f85d 7b04 	ldr.w	r7, [sp], #4
  40064e:	4770      	bx	lr

00400650 <spi_set_baudrate_div>:
 * \retval is 0 Success.
 * \retval is -1 Error.
 */
int16_t spi_set_baudrate_div(Spi *p_spi, uint32_t ul_pcs_ch,
		uint8_t uc_baudrate_divider)
{
  400650:	b480      	push	{r7}
  400652:	b085      	sub	sp, #20
  400654:	af00      	add	r7, sp, #0
  400656:	60f8      	str	r0, [r7, #12]
  400658:	60b9      	str	r1, [r7, #8]
  40065a:	4613      	mov	r3, r2
  40065c:	71fb      	strb	r3, [r7, #7]
    /* Programming the SCBR field to 0 is forbidden */
    if (!uc_baudrate_divider)
  40065e:	79fb      	ldrb	r3, [r7, #7]
  400660:	2b00      	cmp	r3, #0
  400662:	d102      	bne.n	40066a <spi_set_baudrate_div+0x1a>
        return -1;
  400664:	f04f 33ff 	mov.w	r3, #4294967295
  400668:	e01b      	b.n	4006a2 <spi_set_baudrate_div+0x52>

	p_spi->SPI_CSR[ul_pcs_ch] &= (~SPI_CSR_SCBR_Msk);
  40066a:	68fb      	ldr	r3, [r7, #12]
  40066c:	68ba      	ldr	r2, [r7, #8]
  40066e:	320c      	adds	r2, #12
  400670:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
  400674:	f423 417f 	bic.w	r1, r3, #65280	; 0xff00
  400678:	68fb      	ldr	r3, [r7, #12]
  40067a:	68ba      	ldr	r2, [r7, #8]
  40067c:	320c      	adds	r2, #12
  40067e:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
	p_spi->SPI_CSR[ul_pcs_ch] |= SPI_CSR_SCBR(uc_baudrate_divider);
  400682:	68fb      	ldr	r3, [r7, #12]
  400684:	68ba      	ldr	r2, [r7, #8]
  400686:	320c      	adds	r2, #12
  400688:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
  40068c:	79fb      	ldrb	r3, [r7, #7]
  40068e:	021b      	lsls	r3, r3, #8
  400690:	b29b      	uxth	r3, r3
  400692:	ea42 0103 	orr.w	r1, r2, r3
  400696:	68fb      	ldr	r3, [r7, #12]
  400698:	68ba      	ldr	r2, [r7, #8]
  40069a:	320c      	adds	r2, #12
  40069c:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
    return 0;
  4006a0:	2300      	movs	r3, #0
}
  4006a2:	4618      	mov	r0, r3
  4006a4:	3714      	adds	r7, #20
  4006a6:	46bd      	mov	sp, r7
  4006a8:	f85d 7b04 	ldr.w	r7, [sp], #4
  4006ac:	4770      	bx	lr

004006ae <tc_init>:
 */
void tc_init(
		Tc *p_tc,
		uint32_t ul_channel,
		uint32_t ul_mode)
{
  4006ae:	b480      	push	{r7}
  4006b0:	b087      	sub	sp, #28
  4006b2:	af00      	add	r7, sp, #0
  4006b4:	60f8      	str	r0, [r7, #12]
  4006b6:	60b9      	str	r1, [r7, #8]
  4006b8:	607a      	str	r2, [r7, #4]

	/* Validate inputs. */
	Assert(p_tc);
	Assert(ul_channel <
			(sizeof(p_tc->TC_CHANNEL) / sizeof(p_tc->TC_CHANNEL[0])));
	tc_channel = p_tc->TC_CHANNEL + ul_channel;
  4006ba:	68fa      	ldr	r2, [r7, #12]
  4006bc:	68bb      	ldr	r3, [r7, #8]
  4006be:	019b      	lsls	r3, r3, #6
  4006c0:	4413      	add	r3, r2
  4006c2:	617b      	str	r3, [r7, #20]

	/*  Disable TC clock. */
	tc_channel->TC_CCR = TC_CCR_CLKDIS;
  4006c4:	697b      	ldr	r3, [r7, #20]
  4006c6:	2202      	movs	r2, #2
  4006c8:	601a      	str	r2, [r3, #0]

	/*  Disable interrupts. */
	tc_channel->TC_IDR = 0xFFFFFFFF;
  4006ca:	697b      	ldr	r3, [r7, #20]
  4006cc:	f04f 32ff 	mov.w	r2, #4294967295
  4006d0:	629a      	str	r2, [r3, #40]	; 0x28

	/*  Clear status register. */
	tc_channel->TC_SR;
  4006d2:	697b      	ldr	r3, [r7, #20]
  4006d4:	6a1b      	ldr	r3, [r3, #32]

	/*  Set mode. */
	tc_channel->TC_CMR = ul_mode;
  4006d6:	697b      	ldr	r3, [r7, #20]
  4006d8:	687a      	ldr	r2, [r7, #4]
  4006da:	605a      	str	r2, [r3, #4]
}
  4006dc:	bf00      	nop
  4006de:	371c      	adds	r7, #28
  4006e0:	46bd      	mov	sp, r7
  4006e2:	f85d 7b04 	ldr.w	r7, [sp], #4
  4006e6:	4770      	bx	lr

004006e8 <tc_start>:
 * \param[in] ul_channel Channel to configure
 */
void tc_start(
		Tc *p_tc,
		uint32_t ul_channel)
{
  4006e8:	b480      	push	{r7}
  4006ea:	b083      	sub	sp, #12
  4006ec:	af00      	add	r7, sp, #0
  4006ee:	6078      	str	r0, [r7, #4]
  4006f0:	6039      	str	r1, [r7, #0]
	/* Validate inputs. */
	Assert(p_tc);
	Assert(ul_channel <
			(sizeof(p_tc->TC_CHANNEL) / sizeof(p_tc->TC_CHANNEL[0])));

	p_tc->TC_CHANNEL[ul_channel].TC_CCR = TC_CCR_CLKEN | TC_CCR_SWTRG;
  4006f2:	687a      	ldr	r2, [r7, #4]
  4006f4:	683b      	ldr	r3, [r7, #0]
  4006f6:	019b      	lsls	r3, r3, #6
  4006f8:	4413      	add	r3, r2
  4006fa:	2205      	movs	r2, #5
  4006fc:	601a      	str	r2, [r3, #0]
}
  4006fe:	bf00      	nop
  400700:	370c      	adds	r7, #12
  400702:	46bd      	mov	sp, r7
  400704:	f85d 7b04 	ldr.w	r7, [sp], #4
  400708:	4770      	bx	lr

0040070a <tc_stop>:
 * \param[in] ul_channel Channel to configure
 */
void tc_stop(
		Tc *p_tc,
		uint32_t ul_channel)
{
  40070a:	b480      	push	{r7}
  40070c:	b083      	sub	sp, #12
  40070e:	af00      	add	r7, sp, #0
  400710:	6078      	str	r0, [r7, #4]
  400712:	6039      	str	r1, [r7, #0]
	/* Validate inputs. */
	Assert(p_tc);
	Assert(ul_channel <
			(sizeof(p_tc->TC_CHANNEL) / sizeof(p_tc->TC_CHANNEL[0])));

	p_tc->TC_CHANNEL[ul_channel].TC_CCR = TC_CCR_CLKDIS;
  400714:	687a      	ldr	r2, [r7, #4]
  400716:	683b      	ldr	r3, [r7, #0]
  400718:	019b      	lsls	r3, r3, #6
  40071a:	4413      	add	r3, r2
  40071c:	2202      	movs	r2, #2
  40071e:	601a      	str	r2, [r3, #0]
}
  400720:	bf00      	nop
  400722:	370c      	adds	r7, #12
  400724:	46bd      	mov	sp, r7
  400726:	f85d 7b04 	ldr.w	r7, [sp], #4
  40072a:	4770      	bx	lr

0040072c <tc_write_rc>:
 */
void tc_write_rc(
		Tc *p_tc,
		uint32_t ul_channel,
		uint32_t ul_value)
{
  40072c:	b480      	push	{r7}
  40072e:	b085      	sub	sp, #20
  400730:	af00      	add	r7, sp, #0
  400732:	60f8      	str	r0, [r7, #12]
  400734:	60b9      	str	r1, [r7, #8]
  400736:	607a      	str	r2, [r7, #4]
	/* Validate inputs. */
	Assert(p_tc);
	Assert(ul_channel <
			(sizeof(p_tc->TC_CHANNEL) / sizeof(p_tc->TC_CHANNEL[0])));

	p_tc->TC_CHANNEL[ul_channel].TC_RC = ul_value;
  400738:	68fa      	ldr	r2, [r7, #12]
  40073a:	68bb      	ldr	r3, [r7, #8]
  40073c:	019b      	lsls	r3, r3, #6
  40073e:	4413      	add	r3, r2
  400740:	331c      	adds	r3, #28
  400742:	687a      	ldr	r2, [r7, #4]
  400744:	601a      	str	r2, [r3, #0]
}
  400746:	bf00      	nop
  400748:	3714      	adds	r7, #20
  40074a:	46bd      	mov	sp, r7
  40074c:	f85d 7b04 	ldr.w	r7, [sp], #4
  400750:	4770      	bx	lr

00400752 <tc_enable_interrupt>:
 */
void tc_enable_interrupt(
		Tc *p_tc,
		uint32_t ul_channel,
		uint32_t ul_sources)
{
  400752:	b480      	push	{r7}
  400754:	b087      	sub	sp, #28
  400756:	af00      	add	r7, sp, #0
  400758:	60f8      	str	r0, [r7, #12]
  40075a:	60b9      	str	r1, [r7, #8]
  40075c:	607a      	str	r2, [r7, #4]

	/* Validate inputs. */
	Assert(p_tc);
	Assert(ul_channel <
			(sizeof(p_tc->TC_CHANNEL) / sizeof(p_tc->TC_CHANNEL[0])));
	tc_channel = p_tc->TC_CHANNEL + ul_channel;
  40075e:	68fa      	ldr	r2, [r7, #12]
  400760:	68bb      	ldr	r3, [r7, #8]
  400762:	019b      	lsls	r3, r3, #6
  400764:	4413      	add	r3, r2
  400766:	617b      	str	r3, [r7, #20]
	tc_channel->TC_IER = ul_sources;
  400768:	697b      	ldr	r3, [r7, #20]
  40076a:	687a      	ldr	r2, [r7, #4]
  40076c:	625a      	str	r2, [r3, #36]	; 0x24
}
  40076e:	bf00      	nop
  400770:	371c      	adds	r7, #28
  400772:	46bd      	mov	sp, r7
  400774:	f85d 7b04 	ldr.w	r7, [sp], #4
  400778:	4770      	bx	lr

0040077a <tc_get_status>:
 * \return The current TC status.
 */
uint32_t tc_get_status(
		Tc *p_tc,
		uint32_t ul_channel)
{
  40077a:	b480      	push	{r7}
  40077c:	b085      	sub	sp, #20
  40077e:	af00      	add	r7, sp, #0
  400780:	6078      	str	r0, [r7, #4]
  400782:	6039      	str	r1, [r7, #0]
	/* Validate inputs. */
	Assert(p_tc);
	Assert(ul_channel <
			(sizeof(p_tc->TC_CHANNEL) / sizeof(p_tc->TC_CHANNEL[0])));
			
	tc_channel = p_tc->TC_CHANNEL + ul_channel;
  400784:	687a      	ldr	r2, [r7, #4]
  400786:	683b      	ldr	r3, [r7, #0]
  400788:	019b      	lsls	r3, r3, #6
  40078a:	4413      	add	r3, r2
  40078c:	60fb      	str	r3, [r7, #12]
	return tc_channel->TC_SR;
  40078e:	68fb      	ldr	r3, [r7, #12]
  400790:	6a1b      	ldr	r3, [r3, #32]
}
  400792:	4618      	mov	r0, r3
  400794:	3714      	adds	r7, #20
  400796:	46bd      	mov	sp, r7
  400798:	f85d 7b04 	ldr.w	r7, [sp], #4
  40079c:	4770      	bx	lr

0040079e <tc_find_mck_divisor>:
		uint32_t ul_freq,
		uint32_t ul_mck,
		uint32_t *p_uldiv,
		uint32_t *p_ultcclks,
		uint32_t ul_boardmck)
{
  40079e:	b480      	push	{r7}
  4007a0:	b08d      	sub	sp, #52	; 0x34
  4007a2:	af00      	add	r7, sp, #0
  4007a4:	60f8      	str	r0, [r7, #12]
  4007a6:	60b9      	str	r1, [r7, #8]
  4007a8:	607a      	str	r2, [r7, #4]
  4007aa:	603b      	str	r3, [r7, #0]
	const uint32_t divisors[5] = { 2, 8, 32, 128,
  4007ac:	2302      	movs	r3, #2
  4007ae:	613b      	str	r3, [r7, #16]
  4007b0:	2308      	movs	r3, #8
  4007b2:	617b      	str	r3, [r7, #20]
  4007b4:	2320      	movs	r3, #32
  4007b6:	61bb      	str	r3, [r7, #24]
  4007b8:	2380      	movs	r3, #128	; 0x80
  4007ba:	61fb      	str	r3, [r7, #28]
			ul_boardmck / FREQ_SLOW_CLOCK_EXT };
  4007bc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
  4007be:	0bdb      	lsrs	r3, r3, #15
	const uint32_t divisors[5] = { 2, 8, 32, 128,
  4007c0:	623b      	str	r3, [r7, #32]
	uint32_t ul_index;
	uint32_t ul_high, ul_low;

	/*  Satisfy frequency bound. */
	for (ul_index = 0;
  4007c2:	2300      	movs	r3, #0
  4007c4:	62fb      	str	r3, [r7, #44]	; 0x2c
  4007c6:	e01a      	b.n	4007fe <tc_find_mck_divisor+0x60>
			ul_index < (sizeof(divisors) / sizeof(divisors[0]));
			ul_index++) {
		ul_high = ul_mck / divisors[ul_index];
  4007c8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
  4007ca:	009b      	lsls	r3, r3, #2
  4007cc:	f107 0230 	add.w	r2, r7, #48	; 0x30
  4007d0:	4413      	add	r3, r2
  4007d2:	f853 3c20 	ldr.w	r3, [r3, #-32]
  4007d6:	68ba      	ldr	r2, [r7, #8]
  4007d8:	fbb2 f3f3 	udiv	r3, r2, r3
  4007dc:	62bb      	str	r3, [r7, #40]	; 0x28
		ul_low  = ul_high / TC_DIV_FACTOR;
  4007de:	6abb      	ldr	r3, [r7, #40]	; 0x28
  4007e0:	0c1b      	lsrs	r3, r3, #16
  4007e2:	627b      	str	r3, [r7, #36]	; 0x24
		if (ul_freq > ul_high) {
  4007e4:	68fa      	ldr	r2, [r7, #12]
  4007e6:	6abb      	ldr	r3, [r7, #40]	; 0x28
  4007e8:	429a      	cmp	r2, r3
  4007ea:	d901      	bls.n	4007f0 <tc_find_mck_divisor+0x52>
			return 0;
  4007ec:	2300      	movs	r3, #0
  4007ee:	e023      	b.n	400838 <tc_find_mck_divisor+0x9a>
		} else if (ul_freq >= ul_low) {
  4007f0:	68fa      	ldr	r2, [r7, #12]
  4007f2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
  4007f4:	429a      	cmp	r2, r3
  4007f6:	d206      	bcs.n	400806 <tc_find_mck_divisor+0x68>
			ul_index++) {
  4007f8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
  4007fa:	3301      	adds	r3, #1
  4007fc:	62fb      	str	r3, [r7, #44]	; 0x2c
	for (ul_index = 0;
  4007fe:	6afb      	ldr	r3, [r7, #44]	; 0x2c
  400800:	2b04      	cmp	r3, #4
  400802:	d9e1      	bls.n	4007c8 <tc_find_mck_divisor+0x2a>
  400804:	e000      	b.n	400808 <tc_find_mck_divisor+0x6a>
			break;
  400806:	bf00      	nop
		}
	}
	if (ul_index >= (sizeof(divisors) / sizeof(divisors[0]))) {
  400808:	6afb      	ldr	r3, [r7, #44]	; 0x2c
  40080a:	2b04      	cmp	r3, #4
  40080c:	d901      	bls.n	400812 <tc_find_mck_divisor+0x74>
		return 0;
  40080e:	2300      	movs	r3, #0
  400810:	e012      	b.n	400838 <tc_find_mck_divisor+0x9a>
	}

	/*  Store results. */
	if (p_uldiv) {
  400812:	687b      	ldr	r3, [r7, #4]
  400814:	2b00      	cmp	r3, #0
  400816:	d008      	beq.n	40082a <tc_find_mck_divisor+0x8c>
		*p_uldiv = divisors[ul_index];
  400818:	6afb      	ldr	r3, [r7, #44]	; 0x2c
  40081a:	009b      	lsls	r3, r3, #2
  40081c:	f107 0230 	add.w	r2, r7, #48	; 0x30
  400820:	4413      	add	r3, r2
  400822:	f853 2c20 	ldr.w	r2, [r3, #-32]
  400826:	687b      	ldr	r3, [r7, #4]
  400828:	601a      	str	r2, [r3, #0]
	}

	if (p_ultcclks) {
  40082a:	683b      	ldr	r3, [r7, #0]
  40082c:	2b00      	cmp	r3, #0
  40082e:	d002      	beq.n	400836 <tc_find_mck_divisor+0x98>
		*p_ultcclks = ul_index;
  400830:	683b      	ldr	r3, [r7, #0]
  400832:	6afa      	ldr	r2, [r7, #44]	; 0x2c
  400834:	601a      	str	r2, [r3, #0]
	}

	return 1;
  400836:	2301      	movs	r3, #1
}
  400838:	4618      	mov	r0, r3
  40083a:	3734      	adds	r7, #52	; 0x34
  40083c:	46bd      	mov	sp, r7
  40083e:	f85d 7b04 	ldr.w	r7, [sp], #4
  400842:	4770      	bx	lr

00400844 <NVIC_EnableIRQ>:
    The function enables a device-specific interrupt in the NVIC interrupt controller.

    \param [in]      IRQn  External interrupt number. Value cannot be negative.
 */
__STATIC_INLINE void NVIC_EnableIRQ(IRQn_Type IRQn)
{
  400844:	b480      	push	{r7}
  400846:	b083      	sub	sp, #12
  400848:	af00      	add	r7, sp, #0
  40084a:	4603      	mov	r3, r0
  40084c:	71fb      	strb	r3, [r7, #7]
/*  NVIC->ISER[((uint32_t)(IRQn) >> 5)] = (1 << ((uint32_t)(IRQn) & 0x1F));  enable interrupt */
  NVIC->ISER[(uint32_t)((int32_t)IRQn) >> 5] = (uint32_t)(1 << ((uint32_t)((int32_t)IRQn) & (uint32_t)0x1F)); /* enable interrupt */
  40084e:	4909      	ldr	r1, [pc, #36]	; (400874 <NVIC_EnableIRQ+0x30>)
  400850:	f997 3007 	ldrsb.w	r3, [r7, #7]
  400854:	095b      	lsrs	r3, r3, #5
  400856:	79fa      	ldrb	r2, [r7, #7]
  400858:	f002 021f 	and.w	r2, r2, #31
  40085c:	2001      	movs	r0, #1
  40085e:	fa00 f202 	lsl.w	r2, r0, r2
  400862:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
  400866:	bf00      	nop
  400868:	370c      	adds	r7, #12
  40086a:	46bd      	mov	sp, r7
  40086c:	f85d 7b04 	ldr.w	r7, [sp], #4
  400870:	4770      	bx	lr
  400872:	bf00      	nop
  400874:	e000e100 	.word	0xe000e100

00400878 <NVIC_DisableIRQ>:
    The function disables a device-specific interrupt in the NVIC interrupt controller.

    \param [in]      IRQn  External interrupt number. Value cannot be negative.
 */
__STATIC_INLINE void NVIC_DisableIRQ(IRQn_Type IRQn)
{
  400878:	b480      	push	{r7}
  40087a:	b083      	sub	sp, #12
  40087c:	af00      	add	r7, sp, #0
  40087e:	4603      	mov	r3, r0
  400880:	71fb      	strb	r3, [r7, #7]
  NVIC->ICER[((uint32_t)(IRQn) >> 5)] = (1 << ((uint32_t)(IRQn) & 0x1F)); /* disable interrupt */
  400882:	4909      	ldr	r1, [pc, #36]	; (4008a8 <NVIC_DisableIRQ+0x30>)
  400884:	f997 3007 	ldrsb.w	r3, [r7, #7]
  400888:	095b      	lsrs	r3, r3, #5
  40088a:	79fa      	ldrb	r2, [r7, #7]
  40088c:	f002 021f 	and.w	r2, r2, #31
  400890:	2001      	movs	r0, #1
  400892:	fa00 f202 	lsl.w	r2, r0, r2
  400896:	3320      	adds	r3, #32
  400898:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
  40089c:	bf00      	nop
  40089e:	370c      	adds	r7, #12
  4008a0:	46bd      	mov	sp, r7
  4008a2:	f85d 7b04 	ldr.w	r7, [sp], #4
  4008a6:	4770      	bx	lr
  4008a8:	e000e100 	.word	0xe000e100

004008ac <NVIC_ClearPendingIRQ>:
    The function clears the pending bit of an external interrupt.

    \param [in]      IRQn  External interrupt number. Value cannot be negative.
 */
__STATIC_INLINE void NVIC_ClearPendingIRQ(IRQn_Type IRQn)
{
  4008ac:	b480      	push	{r7}
  4008ae:	b083      	sub	sp, #12
  4008b0:	af00      	add	r7, sp, #0
  4008b2:	4603      	mov	r3, r0
  4008b4:	71fb      	strb	r3, [r7, #7]
  NVIC->ICPR[((uint32_t)(IRQn) >> 5)] = (1 << ((uint32_t)(IRQn) & 0x1F)); /* Clear pending interrupt */
  4008b6:	4909      	ldr	r1, [pc, #36]	; (4008dc <NVIC_ClearPendingIRQ+0x30>)
  4008b8:	f997 3007 	ldrsb.w	r3, [r7, #7]
  4008bc:	095b      	lsrs	r3, r3, #5
  4008be:	79fa      	ldrb	r2, [r7, #7]
  4008c0:	f002 021f 	and.w	r2, r2, #31
  4008c4:	2001      	movs	r0, #1
  4008c6:	fa00 f202 	lsl.w	r2, r0, r2
  4008ca:	3360      	adds	r3, #96	; 0x60
  4008cc:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
  4008d0:	bf00      	nop
  4008d2:	370c      	adds	r7, #12
  4008d4:	46bd      	mov	sp, r7
  4008d6:	f85d 7b04 	ldr.w	r7, [sp], #4
  4008da:	4770      	bx	lr
  4008dc:	e000e100 	.word	0xe000e100

004008e0 <NVIC_SetPriority>:

    \param [in]      IRQn  Interrupt number.
    \param [in]  priority  Priority to set.
 */
__STATIC_INLINE void NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
  4008e0:	b480      	push	{r7}
  4008e2:	b083      	sub	sp, #12
  4008e4:	af00      	add	r7, sp, #0
  4008e6:	4603      	mov	r3, r0
  4008e8:	6039      	str	r1, [r7, #0]
  4008ea:	71fb      	strb	r3, [r7, #7]
  if(IRQn < 0) {
  4008ec:	f997 3007 	ldrsb.w	r3, [r7, #7]
  4008f0:	2b00      	cmp	r3, #0
  4008f2:	da0b      	bge.n	40090c <NVIC_SetPriority+0x2c>
    SCB->SHPR[((uint32_t)(IRQn) & 0xF)-4] = ((priority << (8 - __NVIC_PRIO_BITS)) & 0xff); } /* set Priority for Cortex-M  System Interrupts */
  4008f4:	490d      	ldr	r1, [pc, #52]	; (40092c <NVIC_SetPriority+0x4c>)
  4008f6:	79fb      	ldrb	r3, [r7, #7]
  4008f8:	f003 030f 	and.w	r3, r3, #15
  4008fc:	3b04      	subs	r3, #4
  4008fe:	683a      	ldr	r2, [r7, #0]
  400900:	b2d2      	uxtb	r2, r2
  400902:	0152      	lsls	r2, r2, #5
  400904:	b2d2      	uxtb	r2, r2
  400906:	440b      	add	r3, r1
  400908:	761a      	strb	r2, [r3, #24]
  else {
    NVIC->IP[(uint32_t)(IRQn)]            = ((priority << (8 - __NVIC_PRIO_BITS)) & 0xff); } /* set Priority for device specific Interrupts  */
}
  40090a:	e009      	b.n	400920 <NVIC_SetPriority+0x40>
    NVIC->IP[(uint32_t)(IRQn)]            = ((priority << (8 - __NVIC_PRIO_BITS)) & 0xff); } /* set Priority for device specific Interrupts  */
  40090c:	4908      	ldr	r1, [pc, #32]	; (400930 <NVIC_SetPriority+0x50>)
  40090e:	f997 3007 	ldrsb.w	r3, [r7, #7]
  400912:	683a      	ldr	r2, [r7, #0]
  400914:	b2d2      	uxtb	r2, r2
  400916:	0152      	lsls	r2, r2, #5
  400918:	b2d2      	uxtb	r2, r2
  40091a:	440b      	add	r3, r1
  40091c:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
}
  400920:	bf00      	nop
  400922:	370c      	adds	r7, #12
  400924:	46bd      	mov	sp, r7
  400926:	f85d 7b04 	ldr.w	r7, [sp], #4
  40092a:	4770      	bx	lr
  40092c:	e000ed00 	.word	0xe000ed00
  400930:	e000e100 	.word	0xe000e100

00400934 <osc_get_rate>:

	return 0;
}

static inline uint32_t osc_get_rate(uint32_t ul_id)
{
  400934:	b480      	push	{r7}
  400936:	b083      	sub	sp, #12
  400938:	af00      	add	r7, sp, #0
  40093a:	6078      	str	r0, [r7, #4]
	switch (ul_id) {
  40093c:	687b      	ldr	r3, [r7, #4]
  40093e:	2b07      	cmp	r3, #7
  400940:	d825      	bhi.n	40098e <osc_get_rate+0x5a>
  400942:	a201      	add	r2, pc, #4	; (adr r2, 400948 <osc_get_rate+0x14>)
  400944:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
  400948:	00400969 	.word	0x00400969
  40094c:	0040096f 	.word	0x0040096f
  400950:	00400975 	.word	0x00400975
  400954:	0040097b 	.word	0x0040097b
  400958:	0040097f 	.word	0x0040097f
  40095c:	00400983 	.word	0x00400983
  400960:	00400987 	.word	0x00400987
  400964:	0040098b 	.word	0x0040098b
	case OSC_SLCK_32K_RC:
		return OSC_SLCK_32K_RC_HZ;
  400968:	f44f 43fa 	mov.w	r3, #32000	; 0x7d00
  40096c:	e010      	b.n	400990 <osc_get_rate+0x5c>

	case OSC_SLCK_32K_XTAL:
		return BOARD_FREQ_SLCK_XTAL;
  40096e:	f44f 4300 	mov.w	r3, #32768	; 0x8000
  400972:	e00d      	b.n	400990 <osc_get_rate+0x5c>

	case OSC_SLCK_32K_BYPASS:
		return BOARD_FREQ_SLCK_BYPASS;
  400974:	f44f 4300 	mov.w	r3, #32768	; 0x8000
  400978:	e00a      	b.n	400990 <osc_get_rate+0x5c>

	case OSC_MAINCK_4M_RC:
		return OSC_MAINCK_4M_RC_HZ;
  40097a:	4b08      	ldr	r3, [pc, #32]	; (40099c <osc_get_rate+0x68>)
  40097c:	e008      	b.n	400990 <osc_get_rate+0x5c>

	case OSC_MAINCK_8M_RC:
		return OSC_MAINCK_8M_RC_HZ;
  40097e:	4b08      	ldr	r3, [pc, #32]	; (4009a0 <osc_get_rate+0x6c>)
  400980:	e006      	b.n	400990 <osc_get_rate+0x5c>

	case OSC_MAINCK_12M_RC:
		return OSC_MAINCK_12M_RC_HZ;
  400982:	4b08      	ldr	r3, [pc, #32]	; (4009a4 <osc_get_rate+0x70>)
  400984:	e004      	b.n	400990 <osc_get_rate+0x5c>

	case OSC_MAINCK_XTAL:
		return BOARD_FREQ_MAINCK_XTAL;
  400986:	4b07      	ldr	r3, [pc, #28]	; (4009a4 <osc_get_rate+0x70>)
  400988:	e002      	b.n	400990 <osc_get_rate+0x5c>

	case OSC_MAINCK_BYPASS:
		return BOARD_FREQ_MAINCK_BYPASS;
  40098a:	4b06      	ldr	r3, [pc, #24]	; (4009a4 <osc_get_rate+0x70>)
  40098c:	e000      	b.n	400990 <osc_get_rate+0x5c>
	}

	return 0;
  40098e:	2300      	movs	r3, #0
}
  400990:	4618      	mov	r0, r3
  400992:	370c      	adds	r7, #12
  400994:	46bd      	mov	sp, r7
  400996:	f85d 7b04 	ldr.w	r7, [sp], #4
  40099a:	4770      	bx	lr
  40099c:	003d0900 	.word	0x003d0900
  4009a0:	007a1200 	.word	0x007a1200
  4009a4:	00b71b00 	.word	0x00b71b00

004009a8 <sysclk_get_main_hz>:
{
  4009a8:	b580      	push	{r7, lr}
  4009aa:	af00      	add	r7, sp, #0
		return pll_get_default_rate(0);
  4009ac:	2006      	movs	r0, #6
  4009ae:	4b05      	ldr	r3, [pc, #20]	; (4009c4 <sysclk_get_main_hz+0x1c>)
  4009b0:	4798      	blx	r3
  4009b2:	4602      	mov	r2, r0
  4009b4:	4613      	mov	r3, r2
  4009b6:	009b      	lsls	r3, r3, #2
  4009b8:	4413      	add	r3, r2
  4009ba:	009a      	lsls	r2, r3, #2
  4009bc:	4413      	add	r3, r2
}
  4009be:	4618      	mov	r0, r3
  4009c0:	bd80      	pop	{r7, pc}
  4009c2:	bf00      	nop
  4009c4:	00400935 	.word	0x00400935

004009c8 <sysclk_get_cpu_hz>:
{
  4009c8:	b580      	push	{r7, lr}
  4009ca:	af00      	add	r7, sp, #0
	return sysclk_get_main_hz() /
  4009cc:	4b02      	ldr	r3, [pc, #8]	; (4009d8 <sysclk_get_cpu_hz+0x10>)
  4009ce:	4798      	blx	r3
  4009d0:	4603      	mov	r3, r0
}
  4009d2:	4618      	mov	r0, r3
  4009d4:	bd80      	pop	{r7, pc}
  4009d6:	bf00      	nop
  4009d8:	004009a9 	.word	0x004009a9

004009dc <TC_init>:
#include "helpers.h"
/************************************************************************/
/* timers                                                              */
/************************************************************************/
void TC_init(Tc * TC, int ID_TC, int TC_CHANNEL, int freq){
  4009dc:	b590      	push	{r4, r7, lr}
  4009de:	b08b      	sub	sp, #44	; 0x2c
  4009e0:	af02      	add	r7, sp, #8
  4009e2:	60f8      	str	r0, [r7, #12]
  4009e4:	60b9      	str	r1, [r7, #8]
  4009e6:	607a      	str	r2, [r7, #4]
  4009e8:	603b      	str	r3, [r7, #0]
	uint32_t ul_div;
	uint32_t ul_tcclks;
	uint32_t ul_sysclk = sysclk_get_cpu_hz();
  4009ea:	4b1d      	ldr	r3, [pc, #116]	; (400a60 <TC_init+0x84>)
  4009ec:	4798      	blx	r3
  4009ee:	61f8      	str	r0, [r7, #28]

	pmc_enable_periph_clk(ID_TC);
  4009f0:	68bb      	ldr	r3, [r7, #8]
  4009f2:	4618      	mov	r0, r3
  4009f4:	4b1b      	ldr	r3, [pc, #108]	; (400a64 <TC_init+0x88>)
  4009f6:	4798      	blx	r3

	tc_find_mck_divisor(freq, ul_sysclk, &ul_div, &ul_tcclks, ul_sysclk);
  4009f8:	6838      	ldr	r0, [r7, #0]
  4009fa:	f107 0114 	add.w	r1, r7, #20
  4009fe:	f107 0218 	add.w	r2, r7, #24
  400a02:	69fb      	ldr	r3, [r7, #28]
  400a04:	9300      	str	r3, [sp, #0]
  400a06:	460b      	mov	r3, r1
  400a08:	69f9      	ldr	r1, [r7, #28]
  400a0a:	4c17      	ldr	r4, [pc, #92]	; (400a68 <TC_init+0x8c>)
  400a0c:	47a0      	blx	r4
	tc_init(TC, TC_CHANNEL, ul_tcclks | TC_CMR_CPCTRG);
  400a0e:	6879      	ldr	r1, [r7, #4]
  400a10:	697b      	ldr	r3, [r7, #20]
  400a12:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
  400a16:	461a      	mov	r2, r3
  400a18:	68f8      	ldr	r0, [r7, #12]
  400a1a:	4b14      	ldr	r3, [pc, #80]	; (400a6c <TC_init+0x90>)
  400a1c:	4798      	blx	r3
	tc_write_rc(TC, TC_CHANNEL, (ul_sysclk / ul_div) / freq);
  400a1e:	6879      	ldr	r1, [r7, #4]
  400a20:	69bb      	ldr	r3, [r7, #24]
  400a22:	69fa      	ldr	r2, [r7, #28]
  400a24:	fbb2 f2f3 	udiv	r2, r2, r3
  400a28:	683b      	ldr	r3, [r7, #0]
  400a2a:	fbb2 f3f3 	udiv	r3, r2, r3
  400a2e:	461a      	mov	r2, r3
  400a30:	68f8      	ldr	r0, [r7, #12]
  400a32:	4b0f      	ldr	r3, [pc, #60]	; (400a70 <TC_init+0x94>)
  400a34:	4798      	blx	r3

	NVIC_SetPriority(ID_TC, 4);
  400a36:	68bb      	ldr	r3, [r7, #8]
  400a38:	b25b      	sxtb	r3, r3
  400a3a:	2104      	movs	r1, #4
  400a3c:	4618      	mov	r0, r3
  400a3e:	4b0d      	ldr	r3, [pc, #52]	; (400a74 <TC_init+0x98>)
  400a40:	4798      	blx	r3
	NVIC_EnableIRQ((IRQn_Type) ID_TC);
  400a42:	68bb      	ldr	r3, [r7, #8]
  400a44:	b25b      	sxtb	r3, r3
  400a46:	4618      	mov	r0, r3
  400a48:	4b0b      	ldr	r3, [pc, #44]	; (400a78 <TC_init+0x9c>)
  400a4a:	4798      	blx	r3
	tc_enable_interrupt(TC, TC_CHANNEL, TC_IER_CPCS);
  400a4c:	687b      	ldr	r3, [r7, #4]
  400a4e:	2210      	movs	r2, #16
  400a50:	4619      	mov	r1, r3
  400a52:	68f8      	ldr	r0, [r7, #12]
  400a54:	4b09      	ldr	r3, [pc, #36]	; (400a7c <TC_init+0xa0>)
  400a56:	4798      	blx	r3
}
  400a58:	bf00      	nop
  400a5a:	3724      	adds	r7, #36	; 0x24
  400a5c:	46bd      	mov	sp, r7
  400a5e:	bd90      	pop	{r4, r7, pc}
  400a60:	004009c9 	.word	0x004009c9
  400a64:	00402a49 	.word	0x00402a49
  400a68:	0040079f 	.word	0x0040079f
  400a6c:	004006af 	.word	0x004006af
  400a70:	0040072d 	.word	0x0040072d
  400a74:	004008e1 	.word	0x004008e1
  400a78:	00400845 	.word	0x00400845
  400a7c:	00400753 	.word	0x00400753

00400a80 <RTT_init>:

	/* Ativa interrupcao via alarme */
	rtc_enable_interrupt(rtc,  irq_type);
}

void RTT_init(float freqPrescale, uint32_t IrqNPulses, uint32_t rttIRQSource) {
  400a80:	b580      	push	{r7, lr}
  400a82:	b086      	sub	sp, #24
  400a84:	af00      	add	r7, sp, #0
  400a86:	60f8      	str	r0, [r7, #12]
  400a88:	60b9      	str	r1, [r7, #8]
  400a8a:	607a      	str	r2, [r7, #4]

	uint16_t pllPreScale = (int) (((float) 32768) / freqPrescale);
  400a8c:	eddf 6a26 	vldr	s13, [pc, #152]	; 400b28 <RTT_init+0xa8>
  400a90:	ed97 7a03 	vldr	s14, [r7, #12]
  400a94:	eec6 7a87 	vdiv.f32	s15, s13, s14
  400a98:	eefd 7ae7 	vcvt.s32.f32	s15, s15
  400a9c:	edc7 7a00 	vstr	s15, [r7]
  400aa0:	883b      	ldrh	r3, [r7, #0]
  400aa2:	82fb      	strh	r3, [r7, #22]
	
	rtt_sel_source(RTT, false);
  400aa4:	2100      	movs	r1, #0
  400aa6:	4821      	ldr	r0, [pc, #132]	; (400b2c <RTT_init+0xac>)
  400aa8:	4b21      	ldr	r3, [pc, #132]	; (400b30 <RTT_init+0xb0>)
  400aaa:	4798      	blx	r3
	rtt_init(RTT, pllPreScale);
  400aac:	8afb      	ldrh	r3, [r7, #22]
  400aae:	4619      	mov	r1, r3
  400ab0:	481e      	ldr	r0, [pc, #120]	; (400b2c <RTT_init+0xac>)
  400ab2:	4b20      	ldr	r3, [pc, #128]	; (400b34 <RTT_init+0xb4>)
  400ab4:	4798      	blx	r3
	
	if (rttIRQSource & RTT_MR_ALMIEN) {
  400ab6:	687b      	ldr	r3, [r7, #4]
  400ab8:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
  400abc:	2b00      	cmp	r3, #0
  400abe:	d012      	beq.n	400ae6 <RTT_init+0x66>
		uint32_t ul_previous_time;
		ul_previous_time = rtt_read_timer_value(RTT);
  400ac0:	481a      	ldr	r0, [pc, #104]	; (400b2c <RTT_init+0xac>)
  400ac2:	4b1d      	ldr	r3, [pc, #116]	; (400b38 <RTT_init+0xb8>)
  400ac4:	4798      	blx	r3
  400ac6:	6138      	str	r0, [r7, #16]
		while (ul_previous_time == rtt_read_timer_value(RTT));
  400ac8:	bf00      	nop
  400aca:	4818      	ldr	r0, [pc, #96]	; (400b2c <RTT_init+0xac>)
  400acc:	4b1a      	ldr	r3, [pc, #104]	; (400b38 <RTT_init+0xb8>)
  400ace:	4798      	blx	r3
  400ad0:	4602      	mov	r2, r0
  400ad2:	693b      	ldr	r3, [r7, #16]
  400ad4:	429a      	cmp	r2, r3
  400ad6:	d0f8      	beq.n	400aca <RTT_init+0x4a>
		rtt_write_alarm_time(RTT, IrqNPulses+ul_previous_time);
  400ad8:	68ba      	ldr	r2, [r7, #8]
  400ada:	693b      	ldr	r3, [r7, #16]
  400adc:	4413      	add	r3, r2
  400ade:	4619      	mov	r1, r3
  400ae0:	4812      	ldr	r0, [pc, #72]	; (400b2c <RTT_init+0xac>)
  400ae2:	4b16      	ldr	r3, [pc, #88]	; (400b3c <RTT_init+0xbc>)
  400ae4:	4798      	blx	r3
	}

	/* config NVIC */
	NVIC_DisableIRQ(RTT_IRQn);
  400ae6:	2003      	movs	r0, #3
  400ae8:	4b15      	ldr	r3, [pc, #84]	; (400b40 <RTT_init+0xc0>)
  400aea:	4798      	blx	r3
	NVIC_ClearPendingIRQ(RTT_IRQn);
  400aec:	2003      	movs	r0, #3
  400aee:	4b15      	ldr	r3, [pc, #84]	; (400b44 <RTT_init+0xc4>)
  400af0:	4798      	blx	r3
	NVIC_SetPriority(RTT_IRQn, 4);
  400af2:	2104      	movs	r1, #4
  400af4:	2003      	movs	r0, #3
  400af6:	4b14      	ldr	r3, [pc, #80]	; (400b48 <RTT_init+0xc8>)
  400af8:	4798      	blx	r3
	NVIC_EnableIRQ(RTT_IRQn);
  400afa:	2003      	movs	r0, #3
  400afc:	4b13      	ldr	r3, [pc, #76]	; (400b4c <RTT_init+0xcc>)
  400afe:	4798      	blx	r3

	/* Enable RTT interrupt */
	if (rttIRQSource & (RTT_MR_RTTINCIEN | RTT_MR_ALMIEN))
  400b00:	687b      	ldr	r3, [r7, #4]
  400b02:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
  400b06:	2b00      	cmp	r3, #0
  400b08:	d004      	beq.n	400b14 <RTT_init+0x94>
	rtt_enable_interrupt(RTT, rttIRQSource);
  400b0a:	6879      	ldr	r1, [r7, #4]
  400b0c:	4807      	ldr	r0, [pc, #28]	; (400b2c <RTT_init+0xac>)
  400b0e:	4b10      	ldr	r3, [pc, #64]	; (400b50 <RTT_init+0xd0>)
  400b10:	4798      	blx	r3
	else
	rtt_disable_interrupt(RTT, RTT_MR_RTTINCIEN | RTT_MR_ALMIEN);
	
}
  400b12:	e004      	b.n	400b1e <RTT_init+0x9e>
	rtt_disable_interrupt(RTT, RTT_MR_RTTINCIEN | RTT_MR_ALMIEN);
  400b14:	f44f 3140 	mov.w	r1, #196608	; 0x30000
  400b18:	4804      	ldr	r0, [pc, #16]	; (400b2c <RTT_init+0xac>)
  400b1a:	4b0e      	ldr	r3, [pc, #56]	; (400b54 <RTT_init+0xd4>)
  400b1c:	4798      	blx	r3
}
  400b1e:	bf00      	nop
  400b20:	3718      	adds	r7, #24
  400b22:	46bd      	mov	sp, r7
  400b24:	bd80      	pop	{r7, pc}
  400b26:	bf00      	nop
  400b28:	47000000 	.word	0x47000000
  400b2c:	400e1830 	.word	0x400e1830
  400b30:	004001dd 	.word	0x004001dd
  400b34:	004001ad 	.word	0x004001ad
  400b38:	004002ad 	.word	0x004002ad
  400b3c:	004002f5 	.word	0x004002f5
  400b40:	00400879 	.word	0x00400879
  400b44:	004008ad 	.word	0x004008ad
  400b48:	004008e1 	.word	0x004008e1
  400b4c:	00400845 	.word	0x00400845
  400b50:	00400235 	.word	0x00400235
  400b54:	0040026d 	.word	0x0040026d

00400b58 <gfx_mono_set_framebuffer>:
	uint8_t framebuffer[FRAMEBUFFER_SIZE];
	gfx_mono_set_framebuffer(framebuffer);
\endcode
 */
void gfx_mono_set_framebuffer(uint8_t *framebuffer)
{
  400b58:	b480      	push	{r7}
  400b5a:	b083      	sub	sp, #12
  400b5c:	af00      	add	r7, sp, #0
  400b5e:	6078      	str	r0, [r7, #4]
	fbpointer = framebuffer;
  400b60:	4a04      	ldr	r2, [pc, #16]	; (400b74 <gfx_mono_set_framebuffer+0x1c>)
  400b62:	687b      	ldr	r3, [r7, #4]
  400b64:	6013      	str	r3, [r2, #0]
}
  400b66:	bf00      	nop
  400b68:	370c      	adds	r7, #12
  400b6a:	46bd      	mov	sp, r7
  400b6c:	f85d 7b04 	ldr.w	r7, [sp], #4
  400b70:	4770      	bx	lr
  400b72:	bf00      	nop
  400b74:	2040046c 	.word	0x2040046c

00400b78 <gfx_mono_framebuffer_put_byte>:
	gfx_mono_framebuffer_put_byte(0, 0, 0xFF);
\endcode
 */
void gfx_mono_framebuffer_put_byte(gfx_coord_t page, gfx_coord_t column,
		uint8_t data)
{
  400b78:	b480      	push	{r7}
  400b7a:	b083      	sub	sp, #12
  400b7c:	af00      	add	r7, sp, #0
  400b7e:	4603      	mov	r3, r0
  400b80:	71fb      	strb	r3, [r7, #7]
  400b82:	460b      	mov	r3, r1
  400b84:	71bb      	strb	r3, [r7, #6]
  400b86:	4613      	mov	r3, r2
  400b88:	717b      	strb	r3, [r7, #5]
	*(fbpointer + (page * GFX_MONO_LCD_WIDTH) + column) = data;
  400b8a:	4b08      	ldr	r3, [pc, #32]	; (400bac <gfx_mono_framebuffer_put_byte+0x34>)
  400b8c:	681a      	ldr	r2, [r3, #0]
  400b8e:	79fb      	ldrb	r3, [r7, #7]
  400b90:	01db      	lsls	r3, r3, #7
  400b92:	4619      	mov	r1, r3
  400b94:	79bb      	ldrb	r3, [r7, #6]
  400b96:	440b      	add	r3, r1
  400b98:	4413      	add	r3, r2
  400b9a:	797a      	ldrb	r2, [r7, #5]
  400b9c:	701a      	strb	r2, [r3, #0]
}
  400b9e:	bf00      	nop
  400ba0:	370c      	adds	r7, #12
  400ba2:	46bd      	mov	sp, r7
  400ba4:	f85d 7b04 	ldr.w	r7, [sp], #4
  400ba8:	4770      	bx	lr
  400baa:	bf00      	nop
  400bac:	2040046c 	.word	0x2040046c

00400bb0 <gfx_mono_framebuffer_get_byte>:
 * \code
	data = gfx_mono_framebuffer_get_byte(0, 0);
\endcode
 */
uint8_t gfx_mono_framebuffer_get_byte(gfx_coord_t page, gfx_coord_t column)
{
  400bb0:	b480      	push	{r7}
  400bb2:	b083      	sub	sp, #12
  400bb4:	af00      	add	r7, sp, #0
  400bb6:	4603      	mov	r3, r0
  400bb8:	460a      	mov	r2, r1
  400bba:	71fb      	strb	r3, [r7, #7]
  400bbc:	4613      	mov	r3, r2
  400bbe:	71bb      	strb	r3, [r7, #6]
	return *(fbpointer + (page * GFX_MONO_LCD_WIDTH) + column);
  400bc0:	4b07      	ldr	r3, [pc, #28]	; (400be0 <gfx_mono_framebuffer_get_byte+0x30>)
  400bc2:	681a      	ldr	r2, [r3, #0]
  400bc4:	79fb      	ldrb	r3, [r7, #7]
  400bc6:	01db      	lsls	r3, r3, #7
  400bc8:	4619      	mov	r1, r3
  400bca:	79bb      	ldrb	r3, [r7, #6]
  400bcc:	440b      	add	r3, r1
  400bce:	4413      	add	r3, r2
  400bd0:	781b      	ldrb	r3, [r3, #0]
}
  400bd2:	4618      	mov	r0, r3
  400bd4:	370c      	adds	r7, #12
  400bd6:	46bd      	mov	sp, r7
  400bd8:	f85d 7b04 	ldr.w	r7, [sp], #4
  400bdc:	4770      	bx	lr
  400bde:	bf00      	nop
  400be0:	2040046c 	.word	0x2040046c

00400be4 <gfx_mono_generic_draw_horizontal_line>:
 * \param[in]  length     Length of the line in pixels.
 * \param[in]  color      Pixel operation of the line.
 */
void gfx_mono_generic_draw_horizontal_line(gfx_coord_t x, gfx_coord_t y,
		gfx_coord_t length, enum gfx_mono_color color)
{
  400be4:	b590      	push	{r4, r7, lr}
  400be6:	b085      	sub	sp, #20
  400be8:	af00      	add	r7, sp, #0
  400bea:	4604      	mov	r4, r0
  400bec:	4608      	mov	r0, r1
  400bee:	4611      	mov	r1, r2
  400bf0:	461a      	mov	r2, r3
  400bf2:	4623      	mov	r3, r4
  400bf4:	71fb      	strb	r3, [r7, #7]
  400bf6:	4603      	mov	r3, r0
  400bf8:	71bb      	strb	r3, [r7, #6]
  400bfa:	460b      	mov	r3, r1
  400bfc:	717b      	strb	r3, [r7, #5]
  400bfe:	4613      	mov	r3, r2
  400c00:	713b      	strb	r3, [r7, #4]
	uint8_t page;
	uint8_t pixelmask;
	uint8_t temp;

	/* Clip line length if too long */
	if (x + length > GFX_MONO_LCD_WIDTH) {
  400c02:	79fa      	ldrb	r2, [r7, #7]
  400c04:	797b      	ldrb	r3, [r7, #5]
  400c06:	4413      	add	r3, r2
  400c08:	2b80      	cmp	r3, #128	; 0x80
  400c0a:	dd06      	ble.n	400c1a <gfx_mono_generic_draw_horizontal_line+0x36>
		length = GFX_MONO_LCD_WIDTH - x;
  400c0c:	79fb      	ldrb	r3, [r7, #7]
  400c0e:	f1c3 23ff 	rsb	r3, r3, #4278255360	; 0xff00ff00
  400c12:	f503 037f 	add.w	r3, r3, #16711680	; 0xff0000
  400c16:	3380      	adds	r3, #128	; 0x80
  400c18:	717b      	strb	r3, [r7, #5]
	}

	page = y / 8;
  400c1a:	79bb      	ldrb	r3, [r7, #6]
  400c1c:	08db      	lsrs	r3, r3, #3
  400c1e:	73fb      	strb	r3, [r7, #15]
	pixelmask = (1 << (y - (page * 8)));
  400c20:	79ba      	ldrb	r2, [r7, #6]
  400c22:	7bfb      	ldrb	r3, [r7, #15]
  400c24:	00db      	lsls	r3, r3, #3
  400c26:	1ad3      	subs	r3, r2, r3
  400c28:	2201      	movs	r2, #1
  400c2a:	fa02 f303 	lsl.w	r3, r2, r3
  400c2e:	73bb      	strb	r3, [r7, #14]

	if (length == 0) {
  400c30:	797b      	ldrb	r3, [r7, #5]
  400c32:	2b00      	cmp	r3, #0
  400c34:	d066      	beq.n	400d04 <gfx_mono_generic_draw_horizontal_line+0x120>
		/* Nothing to do. Move along. */
		return;
	}

	switch (color) {
  400c36:	793b      	ldrb	r3, [r7, #4]
  400c38:	2b01      	cmp	r3, #1
  400c3a:	d01c      	beq.n	400c76 <gfx_mono_generic_draw_horizontal_line+0x92>
  400c3c:	2b02      	cmp	r3, #2
  400c3e:	d05b      	beq.n	400cf8 <gfx_mono_generic_draw_horizontal_line+0x114>
  400c40:	2b00      	cmp	r3, #0
  400c42:	d03b      	beq.n	400cbc <gfx_mono_generic_draw_horizontal_line+0xd8>
			gfx_mono_put_byte(page, x + length, temp);
		}
		break;

	default:
		break;
  400c44:	e05f      	b.n	400d06 <gfx_mono_generic_draw_horizontal_line+0x122>
			temp = gfx_mono_get_byte(page, x + length);
  400c46:	79fa      	ldrb	r2, [r7, #7]
  400c48:	797b      	ldrb	r3, [r7, #5]
  400c4a:	4413      	add	r3, r2
  400c4c:	b2da      	uxtb	r2, r3
  400c4e:	7bfb      	ldrb	r3, [r7, #15]
  400c50:	4611      	mov	r1, r2
  400c52:	4618      	mov	r0, r3
  400c54:	4b2d      	ldr	r3, [pc, #180]	; (400d0c <gfx_mono_generic_draw_horizontal_line+0x128>)
  400c56:	4798      	blx	r3
  400c58:	4603      	mov	r3, r0
  400c5a:	737b      	strb	r3, [r7, #13]
			temp |= pixelmask;
  400c5c:	7b7a      	ldrb	r2, [r7, #13]
  400c5e:	7bbb      	ldrb	r3, [r7, #14]
  400c60:	4313      	orrs	r3, r2
  400c62:	737b      	strb	r3, [r7, #13]
			gfx_mono_put_byte(page, x + length, temp);
  400c64:	79fa      	ldrb	r2, [r7, #7]
  400c66:	797b      	ldrb	r3, [r7, #5]
  400c68:	4413      	add	r3, r2
  400c6a:	b2d9      	uxtb	r1, r3
  400c6c:	7b7a      	ldrb	r2, [r7, #13]
  400c6e:	7bf8      	ldrb	r0, [r7, #15]
  400c70:	2300      	movs	r3, #0
  400c72:	4c27      	ldr	r4, [pc, #156]	; (400d10 <gfx_mono_generic_draw_horizontal_line+0x12c>)
  400c74:	47a0      	blx	r4
		while (length-- > 0) {
  400c76:	797b      	ldrb	r3, [r7, #5]
  400c78:	1e5a      	subs	r2, r3, #1
  400c7a:	717a      	strb	r2, [r7, #5]
  400c7c:	2b00      	cmp	r3, #0
  400c7e:	d1e2      	bne.n	400c46 <gfx_mono_generic_draw_horizontal_line+0x62>
		break;
  400c80:	e041      	b.n	400d06 <gfx_mono_generic_draw_horizontal_line+0x122>
			temp = gfx_mono_get_byte(page, x + length);
  400c82:	79fa      	ldrb	r2, [r7, #7]
  400c84:	797b      	ldrb	r3, [r7, #5]
  400c86:	4413      	add	r3, r2
  400c88:	b2da      	uxtb	r2, r3
  400c8a:	7bfb      	ldrb	r3, [r7, #15]
  400c8c:	4611      	mov	r1, r2
  400c8e:	4618      	mov	r0, r3
  400c90:	4b1e      	ldr	r3, [pc, #120]	; (400d0c <gfx_mono_generic_draw_horizontal_line+0x128>)
  400c92:	4798      	blx	r3
  400c94:	4603      	mov	r3, r0
  400c96:	737b      	strb	r3, [r7, #13]
			temp &= ~pixelmask;
  400c98:	f997 300e 	ldrsb.w	r3, [r7, #14]
  400c9c:	43db      	mvns	r3, r3
  400c9e:	b25a      	sxtb	r2, r3
  400ca0:	f997 300d 	ldrsb.w	r3, [r7, #13]
  400ca4:	4013      	ands	r3, r2
  400ca6:	b25b      	sxtb	r3, r3
  400ca8:	737b      	strb	r3, [r7, #13]
			gfx_mono_put_byte(page, x + length, temp);
  400caa:	79fa      	ldrb	r2, [r7, #7]
  400cac:	797b      	ldrb	r3, [r7, #5]
  400cae:	4413      	add	r3, r2
  400cb0:	b2d9      	uxtb	r1, r3
  400cb2:	7b7a      	ldrb	r2, [r7, #13]
  400cb4:	7bf8      	ldrb	r0, [r7, #15]
  400cb6:	2300      	movs	r3, #0
  400cb8:	4c15      	ldr	r4, [pc, #84]	; (400d10 <gfx_mono_generic_draw_horizontal_line+0x12c>)
  400cba:	47a0      	blx	r4
		while (length-- > 0) {
  400cbc:	797b      	ldrb	r3, [r7, #5]
  400cbe:	1e5a      	subs	r2, r3, #1
  400cc0:	717a      	strb	r2, [r7, #5]
  400cc2:	2b00      	cmp	r3, #0
  400cc4:	d1dd      	bne.n	400c82 <gfx_mono_generic_draw_horizontal_line+0x9e>
		break;
  400cc6:	e01e      	b.n	400d06 <gfx_mono_generic_draw_horizontal_line+0x122>
			temp = gfx_mono_get_byte(page, x + length);
  400cc8:	79fa      	ldrb	r2, [r7, #7]
  400cca:	797b      	ldrb	r3, [r7, #5]
  400ccc:	4413      	add	r3, r2
  400cce:	b2da      	uxtb	r2, r3
  400cd0:	7bfb      	ldrb	r3, [r7, #15]
  400cd2:	4611      	mov	r1, r2
  400cd4:	4618      	mov	r0, r3
  400cd6:	4b0d      	ldr	r3, [pc, #52]	; (400d0c <gfx_mono_generic_draw_horizontal_line+0x128>)
  400cd8:	4798      	blx	r3
  400cda:	4603      	mov	r3, r0
  400cdc:	737b      	strb	r3, [r7, #13]
			temp ^= pixelmask;
  400cde:	7b7a      	ldrb	r2, [r7, #13]
  400ce0:	7bbb      	ldrb	r3, [r7, #14]
  400ce2:	4053      	eors	r3, r2
  400ce4:	737b      	strb	r3, [r7, #13]
			gfx_mono_put_byte(page, x + length, temp);
  400ce6:	79fa      	ldrb	r2, [r7, #7]
  400ce8:	797b      	ldrb	r3, [r7, #5]
  400cea:	4413      	add	r3, r2
  400cec:	b2d9      	uxtb	r1, r3
  400cee:	7b7a      	ldrb	r2, [r7, #13]
  400cf0:	7bf8      	ldrb	r0, [r7, #15]
  400cf2:	2300      	movs	r3, #0
  400cf4:	4c06      	ldr	r4, [pc, #24]	; (400d10 <gfx_mono_generic_draw_horizontal_line+0x12c>)
  400cf6:	47a0      	blx	r4
		while (length-- > 0) {
  400cf8:	797b      	ldrb	r3, [r7, #5]
  400cfa:	1e5a      	subs	r2, r3, #1
  400cfc:	717a      	strb	r2, [r7, #5]
  400cfe:	2b00      	cmp	r3, #0
  400d00:	d1e2      	bne.n	400cc8 <gfx_mono_generic_draw_horizontal_line+0xe4>
		break;
  400d02:	e000      	b.n	400d06 <gfx_mono_generic_draw_horizontal_line+0x122>
		return;
  400d04:	bf00      	nop
	}
}
  400d06:	3714      	adds	r7, #20
  400d08:	46bd      	mov	sp, r7
  400d0a:	bd90      	pop	{r4, r7, pc}
  400d0c:	00401121 	.word	0x00401121
  400d10:	0040109d 	.word	0x0040109d

00400d14 <gfx_mono_generic_draw_filled_rect>:
 * \param[in]  color       Pixel operation of the line
 */
void gfx_mono_generic_draw_filled_rect(gfx_coord_t x, gfx_coord_t y,
		gfx_coord_t width, gfx_coord_t height,
		enum gfx_mono_color color)
{
  400d14:	b590      	push	{r4, r7, lr}
  400d16:	b083      	sub	sp, #12
  400d18:	af00      	add	r7, sp, #0
  400d1a:	4604      	mov	r4, r0
  400d1c:	4608      	mov	r0, r1
  400d1e:	4611      	mov	r1, r2
  400d20:	461a      	mov	r2, r3
  400d22:	4623      	mov	r3, r4
  400d24:	71fb      	strb	r3, [r7, #7]
  400d26:	4603      	mov	r3, r0
  400d28:	71bb      	strb	r3, [r7, #6]
  400d2a:	460b      	mov	r3, r1
  400d2c:	717b      	strb	r3, [r7, #5]
  400d2e:	4613      	mov	r3, r2
  400d30:	713b      	strb	r3, [r7, #4]
	if (height == 0) {
  400d32:	793b      	ldrb	r3, [r7, #4]
  400d34:	2b00      	cmp	r3, #0
  400d36:	d00f      	beq.n	400d58 <gfx_mono_generic_draw_filled_rect+0x44>
		/* Nothing to do. Move along. */
		return;
	}

	while (height-- > 0) {
  400d38:	e008      	b.n	400d4c <gfx_mono_generic_draw_filled_rect+0x38>
		gfx_mono_draw_horizontal_line(x, y + height, width, color);
  400d3a:	79ba      	ldrb	r2, [r7, #6]
  400d3c:	793b      	ldrb	r3, [r7, #4]
  400d3e:	4413      	add	r3, r2
  400d40:	b2d9      	uxtb	r1, r3
  400d42:	7e3b      	ldrb	r3, [r7, #24]
  400d44:	797a      	ldrb	r2, [r7, #5]
  400d46:	79f8      	ldrb	r0, [r7, #7]
  400d48:	4c05      	ldr	r4, [pc, #20]	; (400d60 <gfx_mono_generic_draw_filled_rect+0x4c>)
  400d4a:	47a0      	blx	r4
	while (height-- > 0) {
  400d4c:	793b      	ldrb	r3, [r7, #4]
  400d4e:	1e5a      	subs	r2, r3, #1
  400d50:	713a      	strb	r2, [r7, #4]
  400d52:	2b00      	cmp	r3, #0
  400d54:	d1f1      	bne.n	400d3a <gfx_mono_generic_draw_filled_rect+0x26>
  400d56:	e000      	b.n	400d5a <gfx_mono_generic_draw_filled_rect+0x46>
		return;
  400d58:	bf00      	nop
	}
}
  400d5a:	370c      	adds	r7, #12
  400d5c:	46bd      	mov	sp, r7
  400d5e:	bd90      	pop	{r4, r7, pc}
  400d60:	00400be5 	.word	0x00400be5

00400d64 <gfx_mono_draw_char_progmem>:
 * \param[in] y        Y coordinate on screen.
 * \param[in] font     Font to draw character in
 */
static void gfx_mono_draw_char_progmem(const char ch, const gfx_coord_t x,
		const gfx_coord_t y, const struct font *font)
{
  400d64:	b580      	push	{r7, lr}
  400d66:	b086      	sub	sp, #24
  400d68:	af00      	add	r7, sp, #0
  400d6a:	603b      	str	r3, [r7, #0]
  400d6c:	4603      	mov	r3, r0
  400d6e:	71fb      	strb	r3, [r7, #7]
  400d70:	460b      	mov	r3, r1
  400d72:	71bb      	strb	r3, [r7, #6]
  400d74:	4613      	mov	r3, r2
  400d76:	717b      	strb	r3, [r7, #5]
	uint8_t i;

	/* Sanity check on parameters, assert if font is NULL. */
	Assert(font != NULL);

	gfx_coord_t inc_x = x;
  400d78:	79bb      	ldrb	r3, [r7, #6]
  400d7a:	743b      	strb	r3, [r7, #16]
	gfx_coord_t inc_y = y;
  400d7c:	797b      	ldrb	r3, [r7, #5]
  400d7e:	73fb      	strb	r3, [r7, #15]

	char_row_size = font->width / CONFIG_FONT_PIXELS_PER_BYTE;
  400d80:	683b      	ldr	r3, [r7, #0]
  400d82:	7a1b      	ldrb	r3, [r3, #8]
  400d84:	08db      	lsrs	r3, r3, #3
  400d86:	74fb      	strb	r3, [r7, #19]
	if (font->width % CONFIG_FONT_PIXELS_PER_BYTE) {
  400d88:	683b      	ldr	r3, [r7, #0]
  400d8a:	7a1b      	ldrb	r3, [r3, #8]
  400d8c:	f003 0307 	and.w	r3, r3, #7
  400d90:	b2db      	uxtb	r3, r3
  400d92:	2b00      	cmp	r3, #0
  400d94:	d002      	beq.n	400d9c <gfx_mono_draw_char_progmem+0x38>
		char_row_size++;
  400d96:	7cfb      	ldrb	r3, [r7, #19]
  400d98:	3301      	adds	r3, #1
  400d9a:	74fb      	strb	r3, [r7, #19]
	}

	glyph_data_offset = char_row_size * font->height *
  400d9c:	7cfb      	ldrb	r3, [r7, #19]
  400d9e:	b29a      	uxth	r2, r3
  400da0:	683b      	ldr	r3, [r7, #0]
  400da2:	7a5b      	ldrb	r3, [r3, #9]
  400da4:	b29b      	uxth	r3, r3
  400da6:	fb12 f303 	smulbb	r3, r2, r3
  400daa:	b29a      	uxth	r2, r3
			((uint8_t)ch - font->first_char);
  400dac:	79fb      	ldrb	r3, [r7, #7]
  400dae:	6839      	ldr	r1, [r7, #0]
  400db0:	7a89      	ldrb	r1, [r1, #10]
  400db2:	1a5b      	subs	r3, r3, r1
	glyph_data_offset = char_row_size * font->height *
  400db4:	b29b      	uxth	r3, r3
  400db6:	fb12 f303 	smulbb	r3, r2, r3
  400dba:	81bb      	strh	r3, [r7, #12]
	glyph_data = font->data.progmem + glyph_data_offset;
  400dbc:	683b      	ldr	r3, [r7, #0]
  400dbe:	685a      	ldr	r2, [r3, #4]
  400dc0:	89bb      	ldrh	r3, [r7, #12]
  400dc2:	4413      	add	r3, r2
  400dc4:	617b      	str	r3, [r7, #20]
	rows_left = font->height;
  400dc6:	683b      	ldr	r3, [r7, #0]
  400dc8:	7a5b      	ldrb	r3, [r3, #9]
  400dca:	74bb      	strb	r3, [r7, #18]

	do {
		uint8_t glyph_byte = 0;
  400dcc:	2300      	movs	r3, #0
  400dce:	73bb      	strb	r3, [r7, #14]
		uint8_t pixelsToDraw = font->width;
  400dd0:	683b      	ldr	r3, [r7, #0]
  400dd2:	7a1b      	ldrb	r3, [r3, #8]
  400dd4:	72fb      	strb	r3, [r7, #11]

		for (i = 0; i < pixelsToDraw; i++) {
  400dd6:	2300      	movs	r3, #0
  400dd8:	747b      	strb	r3, [r7, #17]
  400dda:	e01e      	b.n	400e1a <gfx_mono_draw_char_progmem+0xb6>
			if (i % CONFIG_FONT_PIXELS_PER_BYTE == 0) {
  400ddc:	7c7b      	ldrb	r3, [r7, #17]
  400dde:	f003 0307 	and.w	r3, r3, #7
  400de2:	b2db      	uxtb	r3, r3
  400de4:	2b00      	cmp	r3, #0
  400de6:	d105      	bne.n	400df4 <gfx_mono_draw_char_progmem+0x90>
				glyph_byte = PROGMEM_READ_BYTE(glyph_data);
  400de8:	697b      	ldr	r3, [r7, #20]
  400dea:	781b      	ldrb	r3, [r3, #0]
  400dec:	73bb      	strb	r3, [r7, #14]
				glyph_data++;
  400dee:	697b      	ldr	r3, [r7, #20]
  400df0:	3301      	adds	r3, #1
  400df2:	617b      	str	r3, [r7, #20]
			}

			if ((glyph_byte & 0x80)) {
  400df4:	f997 300e 	ldrsb.w	r3, [r7, #14]
  400df8:	2b00      	cmp	r3, #0
  400dfa:	da05      	bge.n	400e08 <gfx_mono_draw_char_progmem+0xa4>
				gfx_mono_draw_pixel(inc_x, inc_y,
  400dfc:	7bf9      	ldrb	r1, [r7, #15]
  400dfe:	7c3b      	ldrb	r3, [r7, #16]
  400e00:	2201      	movs	r2, #1
  400e02:	4618      	mov	r0, r3
  400e04:	4b0e      	ldr	r3, [pc, #56]	; (400e40 <gfx_mono_draw_char_progmem+0xdc>)
  400e06:	4798      	blx	r3
						GFX_PIXEL_SET);
			}

			inc_x += 1;
  400e08:	7c3b      	ldrb	r3, [r7, #16]
  400e0a:	3301      	adds	r3, #1
  400e0c:	743b      	strb	r3, [r7, #16]
			glyph_byte <<= 1;
  400e0e:	7bbb      	ldrb	r3, [r7, #14]
  400e10:	005b      	lsls	r3, r3, #1
  400e12:	73bb      	strb	r3, [r7, #14]
		for (i = 0; i < pixelsToDraw; i++) {
  400e14:	7c7b      	ldrb	r3, [r7, #17]
  400e16:	3301      	adds	r3, #1
  400e18:	747b      	strb	r3, [r7, #17]
  400e1a:	7c7a      	ldrb	r2, [r7, #17]
  400e1c:	7afb      	ldrb	r3, [r7, #11]
  400e1e:	429a      	cmp	r2, r3
  400e20:	d3dc      	bcc.n	400ddc <gfx_mono_draw_char_progmem+0x78>
		}

		inc_y += 1;
  400e22:	7bfb      	ldrb	r3, [r7, #15]
  400e24:	3301      	adds	r3, #1
  400e26:	73fb      	strb	r3, [r7, #15]
		inc_x = x;
  400e28:	79bb      	ldrb	r3, [r7, #6]
  400e2a:	743b      	strb	r3, [r7, #16]
		rows_left--;
  400e2c:	7cbb      	ldrb	r3, [r7, #18]
  400e2e:	3b01      	subs	r3, #1
  400e30:	74bb      	strb	r3, [r7, #18]
	} while (rows_left > 0);
  400e32:	7cbb      	ldrb	r3, [r7, #18]
  400e34:	2b00      	cmp	r3, #0
  400e36:	d1c9      	bne.n	400dcc <gfx_mono_draw_char_progmem+0x68>
}
  400e38:	bf00      	nop
  400e3a:	3718      	adds	r7, #24
  400e3c:	46bd      	mov	sp, r7
  400e3e:	bd80      	pop	{r7, pc}
  400e40:	00401001 	.word	0x00401001

00400e44 <gfx_mono_draw_char>:
 * \param[in] y        Y coordinate on screen.
 * \param[in] font     Font to draw character in
 */
void gfx_mono_draw_char(const char c, const gfx_coord_t x, const gfx_coord_t y,
		const struct font *font)
{
  400e44:	b590      	push	{r4, r7, lr}
  400e46:	b085      	sub	sp, #20
  400e48:	af02      	add	r7, sp, #8
  400e4a:	603b      	str	r3, [r7, #0]
  400e4c:	4603      	mov	r3, r0
  400e4e:	71fb      	strb	r3, [r7, #7]
  400e50:	460b      	mov	r3, r1
  400e52:	71bb      	strb	r3, [r7, #6]
  400e54:	4613      	mov	r3, r2
  400e56:	717b      	strb	r3, [r7, #5]
	gfx_mono_draw_filled_rect(x, y, font->width, font->height,
  400e58:	683b      	ldr	r3, [r7, #0]
  400e5a:	7a1a      	ldrb	r2, [r3, #8]
  400e5c:	683b      	ldr	r3, [r7, #0]
  400e5e:	7a5c      	ldrb	r4, [r3, #9]
  400e60:	7979      	ldrb	r1, [r7, #5]
  400e62:	79b8      	ldrb	r0, [r7, #6]
  400e64:	2300      	movs	r3, #0
  400e66:	9300      	str	r3, [sp, #0]
  400e68:	4623      	mov	r3, r4
  400e6a:	4c09      	ldr	r4, [pc, #36]	; (400e90 <gfx_mono_draw_char+0x4c>)
  400e6c:	47a0      	blx	r4
			GFX_PIXEL_CLR);

	switch (font->type) {
  400e6e:	683b      	ldr	r3, [r7, #0]
  400e70:	781b      	ldrb	r3, [r3, #0]
  400e72:	2b00      	cmp	r3, #0
  400e74:	d000      	beq.n	400e78 <gfx_mono_draw_char+0x34>

#endif
	default:
		/* Unsupported mode, call assert */
		Assert(false);
		break;
  400e76:	e006      	b.n	400e86 <gfx_mono_draw_char+0x42>
		gfx_mono_draw_char_progmem(c, x, y, font);
  400e78:	797a      	ldrb	r2, [r7, #5]
  400e7a:	79b9      	ldrb	r1, [r7, #6]
  400e7c:	79f8      	ldrb	r0, [r7, #7]
  400e7e:	683b      	ldr	r3, [r7, #0]
  400e80:	4c04      	ldr	r4, [pc, #16]	; (400e94 <gfx_mono_draw_char+0x50>)
  400e82:	47a0      	blx	r4
		break;
  400e84:	bf00      	nop
	}
}
  400e86:	bf00      	nop
  400e88:	370c      	adds	r7, #12
  400e8a:	46bd      	mov	sp, r7
  400e8c:	bd90      	pop	{r4, r7, pc}
  400e8e:	bf00      	nop
  400e90:	00400d15 	.word	0x00400d15
  400e94:	00400d65 	.word	0x00400d65

00400e98 <gfx_mono_draw_string>:
 * \param[in] y         Y coordinate on screen.
 * \param[in] font      Font to draw string in
 */
void gfx_mono_draw_string(const char *str, gfx_coord_t x, gfx_coord_t y,
		const struct font *font)
{
  400e98:	b590      	push	{r4, r7, lr}
  400e9a:	b087      	sub	sp, #28
  400e9c:	af00      	add	r7, sp, #0
  400e9e:	60f8      	str	r0, [r7, #12]
  400ea0:	607b      	str	r3, [r7, #4]
  400ea2:	460b      	mov	r3, r1
  400ea4:	72fb      	strb	r3, [r7, #11]
  400ea6:	4613      	mov	r3, r2
  400ea8:	72bb      	strb	r3, [r7, #10]
	/* Save X in order to know where to return to on CR. */
	const gfx_coord_t start_of_string_position_x = x;
  400eaa:	7afb      	ldrb	r3, [r7, #11]
  400eac:	75fb      	strb	r3, [r7, #23]
	Assert(font != NULL);

	/* Draw characters until trailing null byte */
	do {
		/* Handle '\n' as newline, draw normal characters. */
		if (*str == '\n') {
  400eae:	68fb      	ldr	r3, [r7, #12]
  400eb0:	781b      	ldrb	r3, [r3, #0]
  400eb2:	2b0a      	cmp	r3, #10
  400eb4:	d109      	bne.n	400eca <gfx_mono_draw_string+0x32>
			x = start_of_string_position_x;
  400eb6:	7dfb      	ldrb	r3, [r7, #23]
  400eb8:	72fb      	strb	r3, [r7, #11]
			y += font->height + 1;
  400eba:	687b      	ldr	r3, [r7, #4]
  400ebc:	7a5a      	ldrb	r2, [r3, #9]
  400ebe:	7abb      	ldrb	r3, [r7, #10]
  400ec0:	4413      	add	r3, r2
  400ec2:	b2db      	uxtb	r3, r3
  400ec4:	3301      	adds	r3, #1
  400ec6:	72bb      	strb	r3, [r7, #10]
  400ec8:	e00f      	b.n	400eea <gfx_mono_draw_string+0x52>
		} else if (*str == '\r') {
  400eca:	68fb      	ldr	r3, [r7, #12]
  400ecc:	781b      	ldrb	r3, [r3, #0]
  400ece:	2b0d      	cmp	r3, #13
  400ed0:	d00b      	beq.n	400eea <gfx_mono_draw_string+0x52>
			/* Skip '\r' characters. */
		} else {
			gfx_mono_draw_char(*str, x, y, font);
  400ed2:	68fb      	ldr	r3, [r7, #12]
  400ed4:	7818      	ldrb	r0, [r3, #0]
  400ed6:	7aba      	ldrb	r2, [r7, #10]
  400ed8:	7af9      	ldrb	r1, [r7, #11]
  400eda:	687b      	ldr	r3, [r7, #4]
  400edc:	4c08      	ldr	r4, [pc, #32]	; (400f00 <gfx_mono_draw_string+0x68>)
  400ede:	47a0      	blx	r4
			x += font->width;
  400ee0:	687b      	ldr	r3, [r7, #4]
  400ee2:	7a1a      	ldrb	r2, [r3, #8]
  400ee4:	7afb      	ldrb	r3, [r7, #11]
  400ee6:	4413      	add	r3, r2
  400ee8:	72fb      	strb	r3, [r7, #11]
		}
	} while (*(++str));
  400eea:	68fb      	ldr	r3, [r7, #12]
  400eec:	3301      	adds	r3, #1
  400eee:	60fb      	str	r3, [r7, #12]
  400ef0:	68fb      	ldr	r3, [r7, #12]
  400ef2:	781b      	ldrb	r3, [r3, #0]
  400ef4:	2b00      	cmp	r3, #0
  400ef6:	d1da      	bne.n	400eae <gfx_mono_draw_string+0x16>
}
  400ef8:	bf00      	nop
  400efa:	371c      	adds	r7, #28
  400efc:	46bd      	mov	sp, r7
  400efe:	bd90      	pop	{r4, r7, pc}
  400f00:	00400e45 	.word	0x00400e45

00400f04 <ssd1306_set_page_address>:
 * RAM.
 *
 * \param address the page address
 */
static inline void ssd1306_set_page_address(uint8_t address)
{
  400f04:	b580      	push	{r7, lr}
  400f06:	b082      	sub	sp, #8
  400f08:	af00      	add	r7, sp, #0
  400f0a:	4603      	mov	r3, r0
  400f0c:	71fb      	strb	r3, [r7, #7]
	// Make sure that the address is 4 bits (only 8 pages)
	address &= 0x0F;
  400f0e:	79fb      	ldrb	r3, [r7, #7]
  400f10:	f003 030f 	and.w	r3, r3, #15
  400f14:	71fb      	strb	r3, [r7, #7]
	ssd1306_write_command(SSD1306_CMD_SET_PAGE_START_ADDRESS(address));
  400f16:	79fb      	ldrb	r3, [r7, #7]
  400f18:	f063 034f 	orn	r3, r3, #79	; 0x4f
  400f1c:	b2db      	uxtb	r3, r3
  400f1e:	4618      	mov	r0, r3
  400f20:	4b02      	ldr	r3, [pc, #8]	; (400f2c <ssd1306_set_page_address+0x28>)
  400f22:	4798      	blx	r3
	
}
  400f24:	bf00      	nop
  400f26:	3708      	adds	r7, #8
  400f28:	46bd      	mov	sp, r7
  400f2a:	bd80      	pop	{r7, pc}
  400f2c:	00401809 	.word	0x00401809

00400f30 <ssd1306_set_column_address>:
 * \brief Set current column in display RAM
 *
 * \param address the column address
 */
static inline void ssd1306_set_column_address(uint8_t address)
{
  400f30:	b580      	push	{r7, lr}
  400f32:	b082      	sub	sp, #8
  400f34:	af00      	add	r7, sp, #0
  400f36:	4603      	mov	r3, r0
  400f38:	71fb      	strb	r3, [r7, #7]
	// Make sure the address is 7 bits
	address &= 0x7F;
  400f3a:	79fb      	ldrb	r3, [r7, #7]
  400f3c:	f003 037f 	and.w	r3, r3, #127	; 0x7f
  400f40:	71fb      	strb	r3, [r7, #7]
	ssd1306_write_command(SSD1306_CMD_COL_ADD_SET_MSB(address >> 4));
  400f42:	79fb      	ldrb	r3, [r7, #7]
  400f44:	091b      	lsrs	r3, r3, #4
  400f46:	b2db      	uxtb	r3, r3
  400f48:	f043 0310 	orr.w	r3, r3, #16
  400f4c:	b2db      	uxtb	r3, r3
  400f4e:	4618      	mov	r0, r3
  400f50:	4b06      	ldr	r3, [pc, #24]	; (400f6c <ssd1306_set_column_address+0x3c>)
  400f52:	4798      	blx	r3
	ssd1306_write_command(SSD1306_CMD_COL_ADD_SET_LSB(address & 0x0F));
  400f54:	79fb      	ldrb	r3, [r7, #7]
  400f56:	f003 030f 	and.w	r3, r3, #15
  400f5a:	b2db      	uxtb	r3, r3
  400f5c:	4618      	mov	r0, r3
  400f5e:	4b03      	ldr	r3, [pc, #12]	; (400f6c <ssd1306_set_column_address+0x3c>)
  400f60:	4798      	blx	r3
}
  400f62:	bf00      	nop
  400f64:	3708      	adds	r7, #8
  400f66:	46bd      	mov	sp, r7
  400f68:	bd80      	pop	{r7, pc}
  400f6a:	bf00      	nop
  400f6c:	00401809 	.word	0x00401809

00400f70 <ssd1306_set_display_start_line_address>:
 * \brief Set the display start draw line address
 *
 * This function will set which line should be the start draw line for the OLED.
 */
static inline void ssd1306_set_display_start_line_address(uint8_t address)
{
  400f70:	b580      	push	{r7, lr}
  400f72:	b082      	sub	sp, #8
  400f74:	af00      	add	r7, sp, #0
  400f76:	4603      	mov	r3, r0
  400f78:	71fb      	strb	r3, [r7, #7]
	// Make sure address is 6 bits
	address &= 0x3F;
  400f7a:	79fb      	ldrb	r3, [r7, #7]
  400f7c:	f003 033f 	and.w	r3, r3, #63	; 0x3f
  400f80:	71fb      	strb	r3, [r7, #7]
	ssd1306_write_command(SSD1306_CMD_SET_DISPLAY_START_LINE(address));
  400f82:	79fb      	ldrb	r3, [r7, #7]
  400f84:	f043 0340 	orr.w	r3, r3, #64	; 0x40
  400f88:	b2db      	uxtb	r3, r3
  400f8a:	4618      	mov	r0, r3
  400f8c:	4b02      	ldr	r3, [pc, #8]	; (400f98 <ssd1306_set_display_start_line_address+0x28>)
  400f8e:	4798      	blx	r3
}
  400f90:	bf00      	nop
  400f92:	3708      	adds	r7, #8
  400f94:	46bd      	mov	sp, r7
  400f96:	bd80      	pop	{r7, pc}
  400f98:	00401809 	.word	0x00401809

00400f9c <gfx_mono_ssd1306_init>:
 * It will also write the graphic controller RAM to all zeroes.
 *
 * \note This function will clear the contents of the display.
 */
void gfx_mono_ssd1306_init(void)
{
  400f9c:	b590      	push	{r4, r7, lr}
  400f9e:	b083      	sub	sp, #12
  400fa0:	af00      	add	r7, sp, #0
	uint8_t page;
	uint8_t column;

#ifdef CONFIG_SSD1306_FRAMEBUFFER
	gfx_mono_set_framebuffer(framebuffer);
  400fa2:	4812      	ldr	r0, [pc, #72]	; (400fec <gfx_mono_ssd1306_init+0x50>)
  400fa4:	4b12      	ldr	r3, [pc, #72]	; (400ff0 <gfx_mono_ssd1306_init+0x54>)
  400fa6:	4798      	blx	r3
#endif

	/* Initialize the low-level display controller. */
	ssd1306_init();
  400fa8:	4b12      	ldr	r3, [pc, #72]	; (400ff4 <gfx_mono_ssd1306_init+0x58>)
  400faa:	4798      	blx	r3

	/* Set display to output data from line 0 */
	ssd1306_set_display_start_line_address(0);
  400fac:	2000      	movs	r0, #0
  400fae:	4b12      	ldr	r3, [pc, #72]	; (400ff8 <gfx_mono_ssd1306_init+0x5c>)
  400fb0:	4798      	blx	r3

	/* Clear the contents of the display.
	 * If using a framebuffer (SPI interface) it will both clear the
	 * controller memory and the framebuffer.
	 */
	for (page = 0; page < GFX_MONO_LCD_PAGES; page++) {
  400fb2:	2300      	movs	r3, #0
  400fb4:	71fb      	strb	r3, [r7, #7]
  400fb6:	e012      	b.n	400fde <gfx_mono_ssd1306_init+0x42>
		for (column = 0; column < GFX_MONO_LCD_WIDTH; column++) {
  400fb8:	2300      	movs	r3, #0
  400fba:	71bb      	strb	r3, [r7, #6]
  400fbc:	e008      	b.n	400fd0 <gfx_mono_ssd1306_init+0x34>
			gfx_mono_ssd1306_put_byte(page, column, 0x00, true);
  400fbe:	79b9      	ldrb	r1, [r7, #6]
  400fc0:	79f8      	ldrb	r0, [r7, #7]
  400fc2:	2301      	movs	r3, #1
  400fc4:	2200      	movs	r2, #0
  400fc6:	4c0d      	ldr	r4, [pc, #52]	; (400ffc <gfx_mono_ssd1306_init+0x60>)
  400fc8:	47a0      	blx	r4
		for (column = 0; column < GFX_MONO_LCD_WIDTH; column++) {
  400fca:	79bb      	ldrb	r3, [r7, #6]
  400fcc:	3301      	adds	r3, #1
  400fce:	71bb      	strb	r3, [r7, #6]
  400fd0:	f997 3006 	ldrsb.w	r3, [r7, #6]
  400fd4:	2b00      	cmp	r3, #0
  400fd6:	daf2      	bge.n	400fbe <gfx_mono_ssd1306_init+0x22>
	for (page = 0; page < GFX_MONO_LCD_PAGES; page++) {
  400fd8:	79fb      	ldrb	r3, [r7, #7]
  400fda:	3301      	adds	r3, #1
  400fdc:	71fb      	strb	r3, [r7, #7]
  400fde:	79fb      	ldrb	r3, [r7, #7]
  400fe0:	2b03      	cmp	r3, #3
  400fe2:	d9e9      	bls.n	400fb8 <gfx_mono_ssd1306_init+0x1c>
		}
	}
}
  400fe4:	bf00      	nop
  400fe6:	370c      	adds	r7, #12
  400fe8:	46bd      	mov	sp, r7
  400fea:	bd90      	pop	{r4, r7, pc}
  400fec:	20400470 	.word	0x20400470
  400ff0:	00400b59 	.word	0x00400b59
  400ff4:	00401759 	.word	0x00401759
  400ff8:	00400f71 	.word	0x00400f71
  400ffc:	0040109d 	.word	0x0040109d

00401000 <gfx_mono_ssd1306_draw_pixel>:
	gfx_mono_ssd1306_draw_pixel(10, 10, GFX_PIXEL_XOR);
\endcode
 */
void gfx_mono_ssd1306_draw_pixel(gfx_coord_t x, gfx_coord_t y,
		gfx_coord_t color)
{
  401000:	b590      	push	{r4, r7, lr}
  401002:	b085      	sub	sp, #20
  401004:	af00      	add	r7, sp, #0
  401006:	4603      	mov	r3, r0
  401008:	71fb      	strb	r3, [r7, #7]
  40100a:	460b      	mov	r3, r1
  40100c:	71bb      	strb	r3, [r7, #6]
  40100e:	4613      	mov	r3, r2
  401010:	717b      	strb	r3, [r7, #5]
	uint8_t page;
	uint8_t pixel_mask;
	uint8_t pixel_value;

	/* Discard pixels drawn outside the screen */
	if ((x > GFX_MONO_LCD_WIDTH - 1) || (y > GFX_MONO_LCD_HEIGHT - 1)) {
  401012:	f997 3007 	ldrsb.w	r3, [r7, #7]
  401016:	2b00      	cmp	r3, #0
  401018:	db38      	blt.n	40108c <gfx_mono_ssd1306_draw_pixel+0x8c>
  40101a:	79bb      	ldrb	r3, [r7, #6]
  40101c:	2b1f      	cmp	r3, #31
  40101e:	d835      	bhi.n	40108c <gfx_mono_ssd1306_draw_pixel+0x8c>
		return;
	}

	page = y / GFX_MONO_LCD_PIXELS_PER_BYTE;
  401020:	79bb      	ldrb	r3, [r7, #6]
  401022:	08db      	lsrs	r3, r3, #3
  401024:	73bb      	strb	r3, [r7, #14]
	pixel_mask = (1 << (y - (page * 8)));
  401026:	79ba      	ldrb	r2, [r7, #6]
  401028:	7bbb      	ldrb	r3, [r7, #14]
  40102a:	00db      	lsls	r3, r3, #3
  40102c:	1ad3      	subs	r3, r2, r3
  40102e:	2201      	movs	r2, #1
  401030:	fa02 f303 	lsl.w	r3, r2, r3
  401034:	737b      	strb	r3, [r7, #13]
	/*
	 * Read the page containing the pixel in interest, then perform the
	 * requested action on this pixel before writing the page back to the
	 * display.
	 */
	pixel_value = gfx_mono_get_byte(page, x);
  401036:	79fa      	ldrb	r2, [r7, #7]
  401038:	7bbb      	ldrb	r3, [r7, #14]
  40103a:	4611      	mov	r1, r2
  40103c:	4618      	mov	r0, r3
  40103e:	4b15      	ldr	r3, [pc, #84]	; (401094 <gfx_mono_ssd1306_draw_pixel+0x94>)
  401040:	4798      	blx	r3
  401042:	4603      	mov	r3, r0
  401044:	73fb      	strb	r3, [r7, #15]

	switch (color) {
  401046:	797b      	ldrb	r3, [r7, #5]
  401048:	2b01      	cmp	r3, #1
  40104a:	d004      	beq.n	401056 <gfx_mono_ssd1306_draw_pixel+0x56>
  40104c:	2b02      	cmp	r3, #2
  40104e:	d011      	beq.n	401074 <gfx_mono_ssd1306_draw_pixel+0x74>
  401050:	2b00      	cmp	r3, #0
  401052:	d005      	beq.n	401060 <gfx_mono_ssd1306_draw_pixel+0x60>
	case GFX_PIXEL_XOR:
		pixel_value ^= pixel_mask;
		break;

	default:
		break;
  401054:	e013      	b.n	40107e <gfx_mono_ssd1306_draw_pixel+0x7e>
		pixel_value |= pixel_mask;
  401056:	7bfa      	ldrb	r2, [r7, #15]
  401058:	7b7b      	ldrb	r3, [r7, #13]
  40105a:	4313      	orrs	r3, r2
  40105c:	73fb      	strb	r3, [r7, #15]
		break;
  40105e:	e00e      	b.n	40107e <gfx_mono_ssd1306_draw_pixel+0x7e>
		pixel_value &= ~pixel_mask;
  401060:	f997 300d 	ldrsb.w	r3, [r7, #13]
  401064:	43db      	mvns	r3, r3
  401066:	b25a      	sxtb	r2, r3
  401068:	f997 300f 	ldrsb.w	r3, [r7, #15]
  40106c:	4013      	ands	r3, r2
  40106e:	b25b      	sxtb	r3, r3
  401070:	73fb      	strb	r3, [r7, #15]
		break;
  401072:	e004      	b.n	40107e <gfx_mono_ssd1306_draw_pixel+0x7e>
		pixel_value ^= pixel_mask;
  401074:	7bfa      	ldrb	r2, [r7, #15]
  401076:	7b7b      	ldrb	r3, [r7, #13]
  401078:	4053      	eors	r3, r2
  40107a:	73fb      	strb	r3, [r7, #15]
		break;
  40107c:	bf00      	nop
	}

	gfx_mono_put_byte(page, x, pixel_value);
  40107e:	7bfa      	ldrb	r2, [r7, #15]
  401080:	79f9      	ldrb	r1, [r7, #7]
  401082:	7bb8      	ldrb	r0, [r7, #14]
  401084:	2300      	movs	r3, #0
  401086:	4c04      	ldr	r4, [pc, #16]	; (401098 <gfx_mono_ssd1306_draw_pixel+0x98>)
  401088:	47a0      	blx	r4
  40108a:	e000      	b.n	40108e <gfx_mono_ssd1306_draw_pixel+0x8e>
		return;
  40108c:	bf00      	nop
}
  40108e:	3714      	adds	r7, #20
  401090:	46bd      	mov	sp, r7
  401092:	bd90      	pop	{r4, r7, pc}
  401094:	00401121 	.word	0x00401121
  401098:	0040109d 	.word	0x0040109d

0040109c <gfx_mono_ssd1306_put_byte>:
	gfx_mono_ssd1306_put_byte(0, 0, 0xFF, false);
\endcode
  */
 void gfx_mono_ssd1306_put_byte(gfx_coord_t page, gfx_coord_t column,
		uint8_t data, bool force)
{
  40109c:	b590      	push	{r4, r7, lr}
  40109e:	b083      	sub	sp, #12
  4010a0:	af00      	add	r7, sp, #0
  4010a2:	4604      	mov	r4, r0
  4010a4:	4608      	mov	r0, r1
  4010a6:	4611      	mov	r1, r2
  4010a8:	461a      	mov	r2, r3
  4010aa:	4623      	mov	r3, r4
  4010ac:	71fb      	strb	r3, [r7, #7]
  4010ae:	4603      	mov	r3, r0
  4010b0:	71bb      	strb	r3, [r7, #6]
  4010b2:	460b      	mov	r3, r1
  4010b4:	717b      	strb	r3, [r7, #5]
  4010b6:	4613      	mov	r3, r2
  4010b8:	713b      	strb	r3, [r7, #4]
#ifdef CONFIG_SSD1306_FRAMEBUFFER
	if (!force && data == gfx_mono_framebuffer_get_byte(page, column)) {
  4010ba:	793b      	ldrb	r3, [r7, #4]
  4010bc:	f083 0301 	eor.w	r3, r3, #1
  4010c0:	b2db      	uxtb	r3, r3
  4010c2:	2b00      	cmp	r3, #0
  4010c4:	d00a      	beq.n	4010dc <gfx_mono_ssd1306_put_byte+0x40>
  4010c6:	79ba      	ldrb	r2, [r7, #6]
  4010c8:	79fb      	ldrb	r3, [r7, #7]
  4010ca:	4611      	mov	r1, r2
  4010cc:	4618      	mov	r0, r3
  4010ce:	4b0f      	ldr	r3, [pc, #60]	; (40110c <gfx_mono_ssd1306_put_byte+0x70>)
  4010d0:	4798      	blx	r3
  4010d2:	4603      	mov	r3, r0
  4010d4:	461a      	mov	r2, r3
  4010d6:	797b      	ldrb	r3, [r7, #5]
  4010d8:	4293      	cmp	r3, r2
  4010da:	d012      	beq.n	401102 <gfx_mono_ssd1306_put_byte+0x66>
		return;
	}
	gfx_mono_framebuffer_put_byte(page, column, data);
  4010dc:	797a      	ldrb	r2, [r7, #5]
  4010de:	79b9      	ldrb	r1, [r7, #6]
  4010e0:	79fb      	ldrb	r3, [r7, #7]
  4010e2:	4618      	mov	r0, r3
  4010e4:	4b0a      	ldr	r3, [pc, #40]	; (401110 <gfx_mono_ssd1306_put_byte+0x74>)
  4010e6:	4798      	blx	r3
#endif

	ssd1306_set_page_address(page);
  4010e8:	79fb      	ldrb	r3, [r7, #7]
  4010ea:	4618      	mov	r0, r3
  4010ec:	4b09      	ldr	r3, [pc, #36]	; (401114 <gfx_mono_ssd1306_put_byte+0x78>)
  4010ee:	4798      	blx	r3
	ssd1306_set_column_address(column);
  4010f0:	79bb      	ldrb	r3, [r7, #6]
  4010f2:	4618      	mov	r0, r3
  4010f4:	4b08      	ldr	r3, [pc, #32]	; (401118 <gfx_mono_ssd1306_put_byte+0x7c>)
  4010f6:	4798      	blx	r3

	ssd1306_write_data(data);
  4010f8:	797b      	ldrb	r3, [r7, #5]
  4010fa:	4618      	mov	r0, r3
  4010fc:	4b07      	ldr	r3, [pc, #28]	; (40111c <gfx_mono_ssd1306_put_byte+0x80>)
  4010fe:	4798      	blx	r3
  401100:	e000      	b.n	401104 <gfx_mono_ssd1306_put_byte+0x68>
		return;
  401102:	bf00      	nop
}
  401104:	370c      	adds	r7, #12
  401106:	46bd      	mov	sp, r7
  401108:	bd90      	pop	{r4, r7, pc}
  40110a:	bf00      	nop
  40110c:	00400bb1 	.word	0x00400bb1
  401110:	00400b79 	.word	0x00400b79
  401114:	00400f05 	.word	0x00400f05
  401118:	00400f31 	.word	0x00400f31
  40111c:	004018ad 	.word	0x004018ad

00401120 <gfx_mono_ssd1306_get_byte>:
 * \code
	data = gfx_mono_ssd1306_get_byte(0, 0);
\endcode
 */
uint8_t gfx_mono_ssd1306_get_byte(gfx_coord_t page, gfx_coord_t column)
{
  401120:	b580      	push	{r7, lr}
  401122:	b082      	sub	sp, #8
  401124:	af00      	add	r7, sp, #0
  401126:	4603      	mov	r3, r0
  401128:	460a      	mov	r2, r1
  40112a:	71fb      	strb	r3, [r7, #7]
  40112c:	4613      	mov	r3, r2
  40112e:	71bb      	strb	r3, [r7, #6]
#ifdef CONFIG_SSD1306_FRAMEBUFFER
	return gfx_mono_framebuffer_get_byte(page, column);
  401130:	79ba      	ldrb	r2, [r7, #6]
  401132:	79fb      	ldrb	r3, [r7, #7]
  401134:	4611      	mov	r1, r2
  401136:	4618      	mov	r0, r3
  401138:	4b03      	ldr	r3, [pc, #12]	; (401148 <gfx_mono_ssd1306_get_byte+0x28>)
  40113a:	4798      	blx	r3
  40113c:	4603      	mov	r3, r0
	ssd1306_set_column_address(column);

	return ssd1306_read_data();

#endif
}
  40113e:	4618      	mov	r0, r3
  401140:	3708      	adds	r7, #8
  401142:	46bd      	mov	sp, r7
  401144:	bd80      	pop	{r7, pc}
  401146:	bf00      	nop
  401148:	00400bb1 	.word	0x00400bb1

0040114c <osc_get_rate>:
{
  40114c:	b480      	push	{r7}
  40114e:	b083      	sub	sp, #12
  401150:	af00      	add	r7, sp, #0
  401152:	6078      	str	r0, [r7, #4]
	switch (ul_id) {
  401154:	687b      	ldr	r3, [r7, #4]
  401156:	2b07      	cmp	r3, #7
  401158:	d825      	bhi.n	4011a6 <osc_get_rate+0x5a>
  40115a:	a201      	add	r2, pc, #4	; (adr r2, 401160 <osc_get_rate+0x14>)
  40115c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
  401160:	00401181 	.word	0x00401181
  401164:	00401187 	.word	0x00401187
  401168:	0040118d 	.word	0x0040118d
  40116c:	00401193 	.word	0x00401193
  401170:	00401197 	.word	0x00401197
  401174:	0040119b 	.word	0x0040119b
  401178:	0040119f 	.word	0x0040119f
  40117c:	004011a3 	.word	0x004011a3
		return OSC_SLCK_32K_RC_HZ;
  401180:	f44f 43fa 	mov.w	r3, #32000	; 0x7d00
  401184:	e010      	b.n	4011a8 <osc_get_rate+0x5c>
		return BOARD_FREQ_SLCK_XTAL;
  401186:	f44f 4300 	mov.w	r3, #32768	; 0x8000
  40118a:	e00d      	b.n	4011a8 <osc_get_rate+0x5c>
		return BOARD_FREQ_SLCK_BYPASS;
  40118c:	f44f 4300 	mov.w	r3, #32768	; 0x8000
  401190:	e00a      	b.n	4011a8 <osc_get_rate+0x5c>
		return OSC_MAINCK_4M_RC_HZ;
  401192:	4b08      	ldr	r3, [pc, #32]	; (4011b4 <osc_get_rate+0x68>)
  401194:	e008      	b.n	4011a8 <osc_get_rate+0x5c>
		return OSC_MAINCK_8M_RC_HZ;
  401196:	4b08      	ldr	r3, [pc, #32]	; (4011b8 <osc_get_rate+0x6c>)
  401198:	e006      	b.n	4011a8 <osc_get_rate+0x5c>
		return OSC_MAINCK_12M_RC_HZ;
  40119a:	4b08      	ldr	r3, [pc, #32]	; (4011bc <osc_get_rate+0x70>)
  40119c:	e004      	b.n	4011a8 <osc_get_rate+0x5c>
		return BOARD_FREQ_MAINCK_XTAL;
  40119e:	4b07      	ldr	r3, [pc, #28]	; (4011bc <osc_get_rate+0x70>)
  4011a0:	e002      	b.n	4011a8 <osc_get_rate+0x5c>
		return BOARD_FREQ_MAINCK_BYPASS;
  4011a2:	4b06      	ldr	r3, [pc, #24]	; (4011bc <osc_get_rate+0x70>)
  4011a4:	e000      	b.n	4011a8 <osc_get_rate+0x5c>
	return 0;
  4011a6:	2300      	movs	r3, #0
}
  4011a8:	4618      	mov	r0, r3
  4011aa:	370c      	adds	r7, #12
  4011ac:	46bd      	mov	sp, r7
  4011ae:	f85d 7b04 	ldr.w	r7, [sp], #4
  4011b2:	4770      	bx	lr
  4011b4:	003d0900 	.word	0x003d0900
  4011b8:	007a1200 	.word	0x007a1200
  4011bc:	00b71b00 	.word	0x00b71b00

004011c0 <sysclk_get_main_hz>:
{
  4011c0:	b580      	push	{r7, lr}
  4011c2:	af00      	add	r7, sp, #0
		return pll_get_default_rate(0);
  4011c4:	2006      	movs	r0, #6
  4011c6:	4b05      	ldr	r3, [pc, #20]	; (4011dc <sysclk_get_main_hz+0x1c>)
  4011c8:	4798      	blx	r3
  4011ca:	4602      	mov	r2, r0
  4011cc:	4613      	mov	r3, r2
  4011ce:	009b      	lsls	r3, r3, #2
  4011d0:	4413      	add	r3, r2
  4011d2:	009a      	lsls	r2, r3, #2
  4011d4:	4413      	add	r3, r2
}
  4011d6:	4618      	mov	r0, r3
  4011d8:	bd80      	pop	{r7, pc}
  4011da:	bf00      	nop
  4011dc:	0040114d 	.word	0x0040114d

004011e0 <sysclk_get_cpu_hz>:
{
  4011e0:	b580      	push	{r7, lr}
  4011e2:	af00      	add	r7, sp, #0
	return sysclk_get_main_hz() /
  4011e4:	4b02      	ldr	r3, [pc, #8]	; (4011f0 <sysclk_get_cpu_hz+0x10>)
  4011e6:	4798      	blx	r3
  4011e8:	4603      	mov	r3, r0
}
  4011ea:	4618      	mov	r0, r3
  4011ec:	bd80      	pop	{r7, pc}
  4011ee:	bf00      	nop
  4011f0:	004011c1 	.word	0x004011c1

004011f4 <sysclk_get_peripheral_hz>:
{
  4011f4:	b580      	push	{r7, lr}
  4011f6:	af00      	add	r7, sp, #0
	return sysclk_get_main_hz() /
  4011f8:	4b02      	ldr	r3, [pc, #8]	; (401204 <sysclk_get_peripheral_hz+0x10>)
  4011fa:	4798      	blx	r3
  4011fc:	4603      	mov	r3, r0
  4011fe:	085b      	lsrs	r3, r3, #1
}
  401200:	4618      	mov	r0, r3
  401202:	bd80      	pop	{r7, pc}
  401204:	004011c1 	.word	0x004011c1

00401208 <ioport_enable_pin>:
 * IOPORT_CREATE_PIN().
 *
 * \param pin  IOPORT pin to enable
 */
static inline void ioport_enable_pin(ioport_pin_t pin)
{
  401208:	b480      	push	{r7}
  40120a:	b089      	sub	sp, #36	; 0x24
  40120c:	af00      	add	r7, sp, #0
  40120e:	6078      	str	r0, [r7, #4]
  401210:	687b      	ldr	r3, [r7, #4]
  401212:	61fb      	str	r3, [r7, #28]
  401214:	69fb      	ldr	r3, [r7, #28]
  401216:	61bb      	str	r3, [r7, #24]
typedef uint32_t ioport_port_t;
typedef uint32_t ioport_port_mask_t;

__always_inline static ioport_port_t arch_ioport_pin_to_port_id(ioport_pin_t pin)
{
	return pin >> 5;
  401218:	69bb      	ldr	r3, [r7, #24]
  40121a:	095a      	lsrs	r2, r3, #5
  40121c:	69fb      	ldr	r3, [r7, #28]
  40121e:	617b      	str	r3, [r7, #20]
	return arch_ioport_port_to_base(arch_ioport_pin_to_port_id(pin));
}

__always_inline static ioport_port_mask_t arch_ioport_pin_to_mask(ioport_pin_t pin)
{
	return 1U << (pin & 0x1F);
  401220:	697b      	ldr	r3, [r7, #20]
  401222:	f003 031f 	and.w	r3, r3, #31
  401226:	2101      	movs	r1, #1
  401228:	fa01 f303 	lsl.w	r3, r1, r3
  40122c:	613a      	str	r2, [r7, #16]
  40122e:	60fb      	str	r3, [r7, #12]
  401230:	693b      	ldr	r3, [r7, #16]
  401232:	60bb      	str	r3, [r7, #8]
	return (Pio *)((uintptr_t)IOPORT_BASE_ADDRESS +
  401234:	68ba      	ldr	r2, [r7, #8]
  401236:	4b06      	ldr	r3, [pc, #24]	; (401250 <ioport_enable_pin+0x48>)
  401238:	4413      	add	r3, r2
  40123a:	025b      	lsls	r3, r3, #9
  40123c:	461a      	mov	r2, r3
}

__always_inline static void arch_ioport_enable_port(ioport_port_t port,
		ioport_port_mask_t mask)
{
	arch_ioport_port_to_base(port)->PIO_PER = mask;
  40123e:	68fb      	ldr	r3, [r7, #12]
  401240:	6013      	str	r3, [r2, #0]
	arch_ioport_enable_pin(pin);
}
  401242:	bf00      	nop
  401244:	3724      	adds	r7, #36	; 0x24
  401246:	46bd      	mov	sp, r7
  401248:	f85d 7b04 	ldr.w	r7, [sp], #4
  40124c:	4770      	bx	lr
  40124e:	bf00      	nop
  401250:	00200707 	.word	0x00200707

00401254 <ioport_set_pin_mode>:
 *
 * \param pin IOPORT pin to configure
 * \param mode Mode masks to configure for the specified pin (\ref ioport_modes)
 */
static inline void ioport_set_pin_mode(ioport_pin_t pin, ioport_mode_t mode)
{
  401254:	b480      	push	{r7}
  401256:	b08d      	sub	sp, #52	; 0x34
  401258:	af00      	add	r7, sp, #0
  40125a:	6078      	str	r0, [r7, #4]
  40125c:	6039      	str	r1, [r7, #0]
  40125e:	687b      	ldr	r3, [r7, #4]
  401260:	62fb      	str	r3, [r7, #44]	; 0x2c
  401262:	683b      	ldr	r3, [r7, #0]
  401264:	62bb      	str	r3, [r7, #40]	; 0x28
  401266:	6afb      	ldr	r3, [r7, #44]	; 0x2c
  401268:	627b      	str	r3, [r7, #36]	; 0x24
	return pin >> 5;
  40126a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
  40126c:	095a      	lsrs	r2, r3, #5
  40126e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
  401270:	623b      	str	r3, [r7, #32]
	return 1U << (pin & 0x1F);
  401272:	6a3b      	ldr	r3, [r7, #32]
  401274:	f003 031f 	and.w	r3, r3, #31
  401278:	2101      	movs	r1, #1
  40127a:	fa01 f303 	lsl.w	r3, r1, r3
  40127e:	61fa      	str	r2, [r7, #28]
  401280:	61bb      	str	r3, [r7, #24]
  401282:	6abb      	ldr	r3, [r7, #40]	; 0x28
  401284:	617b      	str	r3, [r7, #20]
  401286:	69fb      	ldr	r3, [r7, #28]
  401288:	613b      	str	r3, [r7, #16]
	return (Pio *)((uintptr_t)IOPORT_BASE_ADDRESS +
  40128a:	693a      	ldr	r2, [r7, #16]
  40128c:	4b37      	ldr	r3, [pc, #220]	; (40136c <ioport_set_pin_mode+0x118>)
  40128e:	4413      	add	r3, r2
  401290:	025b      	lsls	r3, r3, #9
}

__always_inline static void arch_ioport_set_port_mode(ioport_port_t port,
		ioport_port_mask_t mask, ioport_mode_t mode)
{
	Pio *base = arch_ioport_port_to_base(port);
  401292:	60fb      	str	r3, [r7, #12]

	if (mode & IOPORT_MODE_PULLUP) {
  401294:	697b      	ldr	r3, [r7, #20]
  401296:	f003 0308 	and.w	r3, r3, #8
  40129a:	2b00      	cmp	r3, #0
  40129c:	d003      	beq.n	4012a6 <ioport_set_pin_mode+0x52>
		base->PIO_PUER = mask;
  40129e:	68fb      	ldr	r3, [r7, #12]
  4012a0:	69ba      	ldr	r2, [r7, #24]
  4012a2:	665a      	str	r2, [r3, #100]	; 0x64
  4012a4:	e002      	b.n	4012ac <ioport_set_pin_mode+0x58>
	} else {
		base->PIO_PUDR = mask;
  4012a6:	68fb      	ldr	r3, [r7, #12]
  4012a8:	69ba      	ldr	r2, [r7, #24]
  4012aa:	661a      	str	r2, [r3, #96]	; 0x60
	}

#if defined(IOPORT_MODE_PULLDOWN)
	if (mode & IOPORT_MODE_PULLDOWN) {
  4012ac:	697b      	ldr	r3, [r7, #20]
  4012ae:	f003 0310 	and.w	r3, r3, #16
  4012b2:	2b00      	cmp	r3, #0
  4012b4:	d004      	beq.n	4012c0 <ioport_set_pin_mode+0x6c>
		base->PIO_PPDER = mask;
  4012b6:	68fb      	ldr	r3, [r7, #12]
  4012b8:	69ba      	ldr	r2, [r7, #24]
  4012ba:	f8c3 2094 	str.w	r2, [r3, #148]	; 0x94
  4012be:	e003      	b.n	4012c8 <ioport_set_pin_mode+0x74>
	} else {
		base->PIO_PPDDR = mask;
  4012c0:	68fb      	ldr	r3, [r7, #12]
  4012c2:	69ba      	ldr	r2, [r7, #24]
  4012c4:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
	}
#endif

	if (mode & IOPORT_MODE_OPEN_DRAIN) {
  4012c8:	697b      	ldr	r3, [r7, #20]
  4012ca:	f003 0320 	and.w	r3, r3, #32
  4012ce:	2b00      	cmp	r3, #0
  4012d0:	d003      	beq.n	4012da <ioport_set_pin_mode+0x86>
		base->PIO_MDER = mask;
  4012d2:	68fb      	ldr	r3, [r7, #12]
  4012d4:	69ba      	ldr	r2, [r7, #24]
  4012d6:	651a      	str	r2, [r3, #80]	; 0x50
  4012d8:	e002      	b.n	4012e0 <ioport_set_pin_mode+0x8c>
	} else {
		base->PIO_MDDR = mask;
  4012da:	68fb      	ldr	r3, [r7, #12]
  4012dc:	69ba      	ldr	r2, [r7, #24]
  4012de:	655a      	str	r2, [r3, #84]	; 0x54
	}

	if (mode & (IOPORT_MODE_GLITCH_FILTER | IOPORT_MODE_DEBOUNCE)) {
  4012e0:	697b      	ldr	r3, [r7, #20]
  4012e2:	f003 03c0 	and.w	r3, r3, #192	; 0xc0
  4012e6:	2b00      	cmp	r3, #0
  4012e8:	d003      	beq.n	4012f2 <ioport_set_pin_mode+0x9e>
		base->PIO_IFER = mask;
  4012ea:	68fb      	ldr	r3, [r7, #12]
  4012ec:	69ba      	ldr	r2, [r7, #24]
  4012ee:	621a      	str	r2, [r3, #32]
  4012f0:	e002      	b.n	4012f8 <ioport_set_pin_mode+0xa4>
	} else {
		base->PIO_IFDR = mask;
  4012f2:	68fb      	ldr	r3, [r7, #12]
  4012f4:	69ba      	ldr	r2, [r7, #24]
  4012f6:	625a      	str	r2, [r3, #36]	; 0x24
	}

	if (mode & IOPORT_MODE_DEBOUNCE) {
  4012f8:	697b      	ldr	r3, [r7, #20]
  4012fa:	f003 0380 	and.w	r3, r3, #128	; 0x80
  4012fe:	2b00      	cmp	r3, #0
  401300:	d004      	beq.n	40130c <ioport_set_pin_mode+0xb8>
#if SAM3U || SAM3XA
		base->PIO_DIFSR = mask;
#else
		base->PIO_IFSCER = mask;
  401302:	68fb      	ldr	r3, [r7, #12]
  401304:	69ba      	ldr	r2, [r7, #24]
  401306:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
  40130a:	e003      	b.n	401314 <ioport_set_pin_mode+0xc0>
#endif
	} else {
#if SAM3U || SAM3XA
		base->PIO_SCIFSR = mask;
#else
		base->PIO_IFSCDR = mask;
  40130c:	68fb      	ldr	r3, [r7, #12]
  40130e:	69ba      	ldr	r2, [r7, #24]
  401310:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
		base->PIO_ABSR |= mask;
	} else {
		base->PIO_ABSR &= ~mask;
	}
#else
	if (mode & IOPORT_MODE_MUX_BIT0) {
  401314:	697b      	ldr	r3, [r7, #20]
  401316:	f003 0301 	and.w	r3, r3, #1
  40131a:	2b00      	cmp	r3, #0
  40131c:	d006      	beq.n	40132c <ioport_set_pin_mode+0xd8>
		base->PIO_ABCDSR[0] |= mask;
  40131e:	68fb      	ldr	r3, [r7, #12]
  401320:	6f1a      	ldr	r2, [r3, #112]	; 0x70
  401322:	69bb      	ldr	r3, [r7, #24]
  401324:	431a      	orrs	r2, r3
  401326:	68fb      	ldr	r3, [r7, #12]
  401328:	671a      	str	r2, [r3, #112]	; 0x70
  40132a:	e006      	b.n	40133a <ioport_set_pin_mode+0xe6>
	} else {
		base->PIO_ABCDSR[0] &= ~mask;
  40132c:	68fb      	ldr	r3, [r7, #12]
  40132e:	6f1a      	ldr	r2, [r3, #112]	; 0x70
  401330:	69bb      	ldr	r3, [r7, #24]
  401332:	43db      	mvns	r3, r3
  401334:	401a      	ands	r2, r3
  401336:	68fb      	ldr	r3, [r7, #12]
  401338:	671a      	str	r2, [r3, #112]	; 0x70
	}

	if (mode & IOPORT_MODE_MUX_BIT1) {
  40133a:	697b      	ldr	r3, [r7, #20]
  40133c:	f003 0302 	and.w	r3, r3, #2
  401340:	2b00      	cmp	r3, #0
  401342:	d006      	beq.n	401352 <ioport_set_pin_mode+0xfe>
		base->PIO_ABCDSR[1] |= mask;
  401344:	68fb      	ldr	r3, [r7, #12]
  401346:	6f5a      	ldr	r2, [r3, #116]	; 0x74
  401348:	69bb      	ldr	r3, [r7, #24]
  40134a:	431a      	orrs	r2, r3
  40134c:	68fb      	ldr	r3, [r7, #12]
  40134e:	675a      	str	r2, [r3, #116]	; 0x74
	arch_ioport_set_pin_mode(pin, mode);
}
  401350:	e006      	b.n	401360 <ioport_set_pin_mode+0x10c>
	} else {
		base->PIO_ABCDSR[1] &= ~mask;
  401352:	68fb      	ldr	r3, [r7, #12]
  401354:	6f5a      	ldr	r2, [r3, #116]	; 0x74
  401356:	69bb      	ldr	r3, [r7, #24]
  401358:	43db      	mvns	r3, r3
  40135a:	401a      	ands	r2, r3
  40135c:	68fb      	ldr	r3, [r7, #12]
  40135e:	675a      	str	r2, [r3, #116]	; 0x74
  401360:	bf00      	nop
  401362:	3734      	adds	r7, #52	; 0x34
  401364:	46bd      	mov	sp, r7
  401366:	f85d 7b04 	ldr.w	r7, [sp], #4
  40136a:	4770      	bx	lr
  40136c:	00200707 	.word	0x00200707

00401370 <ioport_set_pin_dir>:
 * \param pin IOPORT pin to configure
 * \param dir Direction to set for the specified pin (\ref ioport_direction)
 */
static inline void ioport_set_pin_dir(ioport_pin_t pin,
		enum ioport_direction dir)
{
  401370:	b480      	push	{r7}
  401372:	b08d      	sub	sp, #52	; 0x34
  401374:	af00      	add	r7, sp, #0
  401376:	6078      	str	r0, [r7, #4]
  401378:	460b      	mov	r3, r1
  40137a:	70fb      	strb	r3, [r7, #3]
  40137c:	687b      	ldr	r3, [r7, #4]
  40137e:	62fb      	str	r3, [r7, #44]	; 0x2c
  401380:	78fb      	ldrb	r3, [r7, #3]
  401382:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
  401386:	6afb      	ldr	r3, [r7, #44]	; 0x2c
  401388:	627b      	str	r3, [r7, #36]	; 0x24
  40138a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
  40138c:	623b      	str	r3, [r7, #32]
	return pin >> 5;
  40138e:	6a3b      	ldr	r3, [r7, #32]
  401390:	095b      	lsrs	r3, r3, #5
  401392:	61fb      	str	r3, [r7, #28]
	return (Pio *)((uintptr_t)IOPORT_BASE_ADDRESS +
  401394:	69fa      	ldr	r2, [r7, #28]
  401396:	4b17      	ldr	r3, [pc, #92]	; (4013f4 <ioport_set_pin_dir+0x84>)
  401398:	4413      	add	r3, r2
  40139a:	025b      	lsls	r3, r3, #9
}

__always_inline static void arch_ioport_set_pin_dir(ioport_pin_t pin,
		enum ioport_direction dir)
{
	Pio *base = arch_ioport_pin_to_base(pin);
  40139c:	61bb      	str	r3, [r7, #24]

	if (dir == IOPORT_DIR_OUTPUT) {
  40139e:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
  4013a2:	2b01      	cmp	r3, #1
  4013a4:	d109      	bne.n	4013ba <ioport_set_pin_dir+0x4a>
  4013a6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
  4013a8:	617b      	str	r3, [r7, #20]
	return 1U << (pin & 0x1F);
  4013aa:	697b      	ldr	r3, [r7, #20]
  4013ac:	f003 031f 	and.w	r3, r3, #31
  4013b0:	2201      	movs	r2, #1
  4013b2:	409a      	lsls	r2, r3
		base->PIO_OER = arch_ioport_pin_to_mask(pin);
  4013b4:	69bb      	ldr	r3, [r7, #24]
  4013b6:	611a      	str	r2, [r3, #16]
  4013b8:	e00c      	b.n	4013d4 <ioport_set_pin_dir+0x64>
	} else if (dir == IOPORT_DIR_INPUT) {
  4013ba:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
  4013be:	2b00      	cmp	r3, #0
  4013c0:	d108      	bne.n	4013d4 <ioport_set_pin_dir+0x64>
  4013c2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
  4013c4:	613b      	str	r3, [r7, #16]
	return 1U << (pin & 0x1F);
  4013c6:	693b      	ldr	r3, [r7, #16]
  4013c8:	f003 031f 	and.w	r3, r3, #31
  4013cc:	2201      	movs	r2, #1
  4013ce:	409a      	lsls	r2, r3
		base->PIO_ODR = arch_ioport_pin_to_mask(pin);
  4013d0:	69bb      	ldr	r3, [r7, #24]
  4013d2:	615a      	str	r2, [r3, #20]
  4013d4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
  4013d6:	60fb      	str	r3, [r7, #12]
	return 1U << (pin & 0x1F);
  4013d8:	68fb      	ldr	r3, [r7, #12]
  4013da:	f003 031f 	and.w	r3, r3, #31
  4013de:	2201      	movs	r2, #1
  4013e0:	409a      	lsls	r2, r3
	}

	base->PIO_OWER = arch_ioport_pin_to_mask(pin);
  4013e2:	69bb      	ldr	r3, [r7, #24]
  4013e4:	f8c3 20a0 	str.w	r2, [r3, #160]	; 0xa0
	arch_ioport_set_pin_dir(pin, dir);
}
  4013e8:	bf00      	nop
  4013ea:	3734      	adds	r7, #52	; 0x34
  4013ec:	46bd      	mov	sp, r7
  4013ee:	f85d 7b04 	ldr.w	r7, [sp], #4
  4013f2:	4770      	bx	lr
  4013f4:	00200707 	.word	0x00200707

004013f8 <ioport_set_pin_level>:
 *
 * \param pin IOPORT pin to configure
 * \param level Logical value of the pin
 */
static inline void ioport_set_pin_level(ioport_pin_t pin, bool level)
{
  4013f8:	b480      	push	{r7}
  4013fa:	b08b      	sub	sp, #44	; 0x2c
  4013fc:	af00      	add	r7, sp, #0
  4013fe:	6078      	str	r0, [r7, #4]
  401400:	460b      	mov	r3, r1
  401402:	70fb      	strb	r3, [r7, #3]
  401404:	687b      	ldr	r3, [r7, #4]
  401406:	627b      	str	r3, [r7, #36]	; 0x24
  401408:	78fb      	ldrb	r3, [r7, #3]
  40140a:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
  40140e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
  401410:	61fb      	str	r3, [r7, #28]
  401412:	69fb      	ldr	r3, [r7, #28]
  401414:	61bb      	str	r3, [r7, #24]
	return pin >> 5;
  401416:	69bb      	ldr	r3, [r7, #24]
  401418:	095b      	lsrs	r3, r3, #5
  40141a:	617b      	str	r3, [r7, #20]
	return (Pio *)((uintptr_t)IOPORT_BASE_ADDRESS +
  40141c:	697a      	ldr	r2, [r7, #20]
  40141e:	4b10      	ldr	r3, [pc, #64]	; (401460 <ioport_set_pin_level+0x68>)
  401420:	4413      	add	r3, r2
  401422:	025b      	lsls	r3, r3, #9
}

__always_inline static void arch_ioport_set_pin_level(ioport_pin_t pin,
		bool level)
{
	Pio *base = arch_ioport_pin_to_base(pin);
  401424:	613b      	str	r3, [r7, #16]

	if (level) {
  401426:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
  40142a:	2b00      	cmp	r3, #0
  40142c:	d009      	beq.n	401442 <ioport_set_pin_level+0x4a>
  40142e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
  401430:	60fb      	str	r3, [r7, #12]
	return 1U << (pin & 0x1F);
  401432:	68fb      	ldr	r3, [r7, #12]
  401434:	f003 031f 	and.w	r3, r3, #31
  401438:	2201      	movs	r2, #1
  40143a:	409a      	lsls	r2, r3
		base->PIO_SODR = arch_ioport_pin_to_mask(pin);
  40143c:	693b      	ldr	r3, [r7, #16]
  40143e:	631a      	str	r2, [r3, #48]	; 0x30
	arch_ioport_set_pin_level(pin, level);
}
  401440:	e008      	b.n	401454 <ioport_set_pin_level+0x5c>
  401442:	6a7b      	ldr	r3, [r7, #36]	; 0x24
  401444:	60bb      	str	r3, [r7, #8]
	return 1U << (pin & 0x1F);
  401446:	68bb      	ldr	r3, [r7, #8]
  401448:	f003 031f 	and.w	r3, r3, #31
  40144c:	2201      	movs	r2, #1
  40144e:	409a      	lsls	r2, r3
	} else {
		base->PIO_CODR = arch_ioport_pin_to_mask(pin);
  401450:	693b      	ldr	r3, [r7, #16]
  401452:	635a      	str	r2, [r3, #52]	; 0x34
  401454:	bf00      	nop
  401456:	372c      	adds	r7, #44	; 0x2c
  401458:	46bd      	mov	sp, r7
  40145a:	f85d 7b04 	ldr.w	r7, [sp], #4
  40145e:	4770      	bx	lr
  401460:	00200707 	.word	0x00200707

00401464 <spi_reset>:
{
  401464:	b480      	push	{r7}
  401466:	b083      	sub	sp, #12
  401468:	af00      	add	r7, sp, #0
  40146a:	6078      	str	r0, [r7, #4]
	p_spi->SPI_CR = SPI_CR_SWRST;
  40146c:	687b      	ldr	r3, [r7, #4]
  40146e:	2280      	movs	r2, #128	; 0x80
  401470:	601a      	str	r2, [r3, #0]
}
  401472:	bf00      	nop
  401474:	370c      	adds	r7, #12
  401476:	46bd      	mov	sp, r7
  401478:	f85d 7b04 	ldr.w	r7, [sp], #4
  40147c:	4770      	bx	lr

0040147e <spi_enable>:
{
  40147e:	b480      	push	{r7}
  401480:	b083      	sub	sp, #12
  401482:	af00      	add	r7, sp, #0
  401484:	6078      	str	r0, [r7, #4]
	p_spi->SPI_CR = SPI_CR_SPIEN;
  401486:	687b      	ldr	r3, [r7, #4]
  401488:	2201      	movs	r2, #1
  40148a:	601a      	str	r2, [r3, #0]
}
  40148c:	bf00      	nop
  40148e:	370c      	adds	r7, #12
  401490:	46bd      	mov	sp, r7
  401492:	f85d 7b04 	ldr.w	r7, [sp], #4
  401496:	4770      	bx	lr

00401498 <spi_disable>:
{
  401498:	b480      	push	{r7}
  40149a:	b083      	sub	sp, #12
  40149c:	af00      	add	r7, sp, #0
  40149e:	6078      	str	r0, [r7, #4]
	p_spi->SPI_CR = SPI_CR_SPIDIS;
  4014a0:	687b      	ldr	r3, [r7, #4]
  4014a2:	2202      	movs	r2, #2
  4014a4:	601a      	str	r2, [r3, #0]
}
  4014a6:	bf00      	nop
  4014a8:	370c      	adds	r7, #12
  4014aa:	46bd      	mov	sp, r7
  4014ac:	f85d 7b04 	ldr.w	r7, [sp], #4
  4014b0:	4770      	bx	lr

004014b2 <spi_set_master_mode>:
{
  4014b2:	b480      	push	{r7}
  4014b4:	b083      	sub	sp, #12
  4014b6:	af00      	add	r7, sp, #0
  4014b8:	6078      	str	r0, [r7, #4]
	p_spi->SPI_MR |= SPI_MR_MSTR;
  4014ba:	687b      	ldr	r3, [r7, #4]
  4014bc:	685b      	ldr	r3, [r3, #4]
  4014be:	f043 0201 	orr.w	r2, r3, #1
  4014c2:	687b      	ldr	r3, [r7, #4]
  4014c4:	605a      	str	r2, [r3, #4]
}
  4014c6:	bf00      	nop
  4014c8:	370c      	adds	r7, #12
  4014ca:	46bd      	mov	sp, r7
  4014cc:	f85d 7b04 	ldr.w	r7, [sp], #4
  4014d0:	4770      	bx	lr

004014d2 <spi_set_fixed_peripheral_select>:
{
  4014d2:	b480      	push	{r7}
  4014d4:	b083      	sub	sp, #12
  4014d6:	af00      	add	r7, sp, #0
  4014d8:	6078      	str	r0, [r7, #4]
	p_spi->SPI_MR &= (~SPI_MR_PS);
  4014da:	687b      	ldr	r3, [r7, #4]
  4014dc:	685b      	ldr	r3, [r3, #4]
  4014de:	f023 0202 	bic.w	r2, r3, #2
  4014e2:	687b      	ldr	r3, [r7, #4]
  4014e4:	605a      	str	r2, [r3, #4]
}
  4014e6:	bf00      	nop
  4014e8:	370c      	adds	r7, #12
  4014ea:	46bd      	mov	sp, r7
  4014ec:	f85d 7b04 	ldr.w	r7, [sp], #4
  4014f0:	4770      	bx	lr

004014f2 <spi_disable_mode_fault_detect>:
 * \brief Disable Mode Fault Detection.
 *
 * \param p_spi Pointer to an SPI instance.
 */
static inline void spi_disable_mode_fault_detect(Spi *p_spi)
{
  4014f2:	b480      	push	{r7}
  4014f4:	b083      	sub	sp, #12
  4014f6:	af00      	add	r7, sp, #0
  4014f8:	6078      	str	r0, [r7, #4]
	p_spi->SPI_MR |= SPI_MR_MODFDIS;
  4014fa:	687b      	ldr	r3, [r7, #4]
  4014fc:	685b      	ldr	r3, [r3, #4]
  4014fe:	f043 0210 	orr.w	r2, r3, #16
  401502:	687b      	ldr	r3, [r7, #4]
  401504:	605a      	str	r2, [r3, #4]
}
  401506:	bf00      	nop
  401508:	370c      	adds	r7, #12
  40150a:	46bd      	mov	sp, r7
  40150c:	f85d 7b04 	ldr.w	r7, [sp], #4
  401510:	4770      	bx	lr

00401512 <spi_disable_loopback>:
 * \brief Disable loopback mode.
 *
 * \param p_spi Pointer to an SPI instance.
 */
static inline void spi_disable_loopback(Spi *p_spi)
{
  401512:	b480      	push	{r7}
  401514:	b083      	sub	sp, #12
  401516:	af00      	add	r7, sp, #0
  401518:	6078      	str	r0, [r7, #4]
	p_spi->SPI_MR &= (~SPI_MR_LLB);
  40151a:	687b      	ldr	r3, [r7, #4]
  40151c:	685b      	ldr	r3, [r3, #4]
  40151e:	f023 0280 	bic.w	r2, r3, #128	; 0x80
  401522:	687b      	ldr	r3, [r7, #4]
  401524:	605a      	str	r2, [r3, #4]
}
  401526:	bf00      	nop
  401528:	370c      	adds	r7, #12
  40152a:	46bd      	mov	sp, r7
  40152c:	f85d 7b04 	ldr.w	r7, [sp], #4
  401530:	4770      	bx	lr
	...

00401534 <ssd1306_hard_reset>:
{
  401534:	b580      	push	{r7, lr}
  401536:	b082      	sub	sp, #8
  401538:	af00      	add	r7, sp, #0
	uint32_t delay_10us = 10 * (sysclk_get_cpu_hz()/1000000);
  40153a:	4b0f      	ldr	r3, [pc, #60]	; (401578 <ssd1306_hard_reset+0x44>)
  40153c:	4798      	blx	r3
  40153e:	4602      	mov	r2, r0
  401540:	4b0e      	ldr	r3, [pc, #56]	; (40157c <ssd1306_hard_reset+0x48>)
  401542:	fba3 2302 	umull	r2, r3, r3, r2
  401546:	0c9a      	lsrs	r2, r3, #18
  401548:	4613      	mov	r3, r2
  40154a:	009b      	lsls	r3, r3, #2
  40154c:	4413      	add	r3, r2
  40154e:	005b      	lsls	r3, r3, #1
  401550:	607b      	str	r3, [r7, #4]
	ioport_set_pin_level(SSD1306_RES_PIN, false);
  401552:	2100      	movs	r1, #0
  401554:	2051      	movs	r0, #81	; 0x51
  401556:	4b0a      	ldr	r3, [pc, #40]	; (401580 <ssd1306_hard_reset+0x4c>)
  401558:	4798      	blx	r3
	delay_cycles(delay_10us); // At lest 10us
  40155a:	6878      	ldr	r0, [r7, #4]
  40155c:	4b09      	ldr	r3, [pc, #36]	; (401584 <ssd1306_hard_reset+0x50>)
  40155e:	4798      	blx	r3
	ioport_set_pin_level(SSD1306_RES_PIN, true);
  401560:	2101      	movs	r1, #1
  401562:	2051      	movs	r0, #81	; 0x51
  401564:	4b06      	ldr	r3, [pc, #24]	; (401580 <ssd1306_hard_reset+0x4c>)
  401566:	4798      	blx	r3
	delay_cycles(delay_10us); // At lest 10us
  401568:	6878      	ldr	r0, [r7, #4]
  40156a:	4b06      	ldr	r3, [pc, #24]	; (401584 <ssd1306_hard_reset+0x50>)
  40156c:	4798      	blx	r3
}
  40156e:	bf00      	nop
  401570:	3708      	adds	r7, #8
  401572:	46bd      	mov	sp, r7
  401574:	bd80      	pop	{r7, pc}
  401576:	bf00      	nop
  401578:	004011e1 	.word	0x004011e1
  40157c:	431bde83 	.word	0x431bde83
  401580:	004013f9 	.word	0x004013f9
  401584:	20400001 	.word	0x20400001

00401588 <ssd1306_display_on>:
 * \brief Turn the OLED display on
 *
 * This function will turn on the OLED.
 */
static inline void ssd1306_display_on(void)
{
  401588:	b580      	push	{r7, lr}
  40158a:	af00      	add	r7, sp, #0
	ssd1306_write_command(SSD1306_CMD_SET_DISPLAY_ON);
  40158c:	20af      	movs	r0, #175	; 0xaf
  40158e:	4b02      	ldr	r3, [pc, #8]	; (401598 <ssd1306_display_on+0x10>)
  401590:	4798      	blx	r3
}
  401592:	bf00      	nop
  401594:	bd80      	pop	{r7, pc}
  401596:	bf00      	nop
  401598:	00401809 	.word	0x00401809

0040159c <ssd1306_set_contrast>:
 * \param contrast a number between 0 and 0xFF
 *
 * \retval contrast the contrast value written to the OLED controller
 */
static inline uint8_t ssd1306_set_contrast(uint8_t contrast)
{
  40159c:	b580      	push	{r7, lr}
  40159e:	b082      	sub	sp, #8
  4015a0:	af00      	add	r7, sp, #0
  4015a2:	4603      	mov	r3, r0
  4015a4:	71fb      	strb	r3, [r7, #7]
	ssd1306_write_command(SSD1306_CMD_SET_CONTRAST_CONTROL_FOR_BANK0);
  4015a6:	2081      	movs	r0, #129	; 0x81
  4015a8:	4b05      	ldr	r3, [pc, #20]	; (4015c0 <ssd1306_set_contrast+0x24>)
  4015aa:	4798      	blx	r3
	ssd1306_write_command(contrast);
  4015ac:	79fb      	ldrb	r3, [r7, #7]
  4015ae:	4618      	mov	r0, r3
  4015b0:	4b03      	ldr	r3, [pc, #12]	; (4015c0 <ssd1306_set_contrast+0x24>)
  4015b2:	4798      	blx	r3
	return contrast;
  4015b4:	79fb      	ldrb	r3, [r7, #7]
}
  4015b6:	4618      	mov	r0, r3
  4015b8:	3708      	adds	r7, #8
  4015ba:	46bd      	mov	sp, r7
  4015bc:	bd80      	pop	{r7, pc}
  4015be:	bf00      	nop
  4015c0:	00401809 	.word	0x00401809

004015c4 <ssd1306_display_invert_disable>:
 *
 * This function will disable invert on all pixels on the OLED
 *
 */
static inline void ssd1306_display_invert_disable(void)
{
  4015c4:	b580      	push	{r7, lr}
  4015c6:	af00      	add	r7, sp, #0
	ssd1306_write_command(SSD1306_CMD_SET_NORMAL_DISPLAY);
  4015c8:	20a6      	movs	r0, #166	; 0xa6
  4015ca:	4b02      	ldr	r3, [pc, #8]	; (4015d4 <ssd1306_display_invert_disable+0x10>)
  4015cc:	4798      	blx	r3
}
  4015ce:	bf00      	nop
  4015d0:	bd80      	pop	{r7, pc}
  4015d2:	bf00      	nop
  4015d4:	00401809 	.word	0x00401809

004015d8 <ssd1306_interface_init>:
#define SPI_MOSI_MASK 21
#define SPI_CLK_MASK 22


static void ssd1306_interface_init(void)
{
  4015d8:	b590      	push	{r4, r7, lr}
  4015da:	b083      	sub	sp, #12
  4015dc:	af00      	add	r7, sp, #0
	
	ioport_set_pin_dir(SSD1306_RES_PIN, IOPORT_DIR_OUTPUT);
  4015de:	2101      	movs	r1, #1
  4015e0:	2051      	movs	r0, #81	; 0x51
  4015e2:	4b46      	ldr	r3, [pc, #280]	; (4016fc <ssd1306_interface_init+0x124>)
  4015e4:	4798      	blx	r3
	ioport_set_pin_dir(SSD1306_DC_PIN, IOPORT_DIR_OUTPUT);
  4015e6:	2101      	movs	r1, #1
  4015e8:	2023      	movs	r0, #35	; 0x23
  4015ea:	4b44      	ldr	r3, [pc, #272]	; (4016fc <ssd1306_interface_init+0x124>)
  4015ec:	4798      	blx	r3
	ioport_set_pin_mode(SSD1306_RES_PIN, IOPORT_MODE_PULLUP);
  4015ee:	2108      	movs	r1, #8
  4015f0:	2051      	movs	r0, #81	; 0x51
  4015f2:	4b43      	ldr	r3, [pc, #268]	; (401700 <ssd1306_interface_init+0x128>)
  4015f4:	4798      	blx	r3
	ioport_set_pin_mode(SSD1306_DC_PIN, IOPORT_MODE_PULLUP);
  4015f6:	2108      	movs	r1, #8
  4015f8:	2023      	movs	r0, #35	; 0x23
  4015fa:	4b41      	ldr	r3, [pc, #260]	; (401700 <ssd1306_interface_init+0x128>)
  4015fc:	4798      	blx	r3
	ioport_enable_pin(SSD1306_DC_PIN);
  4015fe:	2023      	movs	r0, #35	; 0x23
  401600:	4b40      	ldr	r3, [pc, #256]	; (401704 <ssd1306_interface_init+0x12c>)
  401602:	4798      	blx	r3
	ioport_enable_pin(SSD1306_RES_PIN);
  401604:	2051      	movs	r0, #81	; 0x51
  401606:	4b3f      	ldr	r3, [pc, #252]	; (401704 <ssd1306_interface_init+0x12c>)
  401608:	4798      	blx	r3
	ioport_set_pin_level(SSD1306_DC_PIN, true);
  40160a:	2101      	movs	r1, #1
  40160c:	2023      	movs	r0, #35	; 0x23
  40160e:	4b3e      	ldr	r3, [pc, #248]	; (401708 <ssd1306_interface_init+0x130>)
  401610:	4798      	blx	r3
	ioport_set_pin_level(SSD1306_RES_PIN, true);
  401612:	2101      	movs	r1, #1
  401614:	2051      	movs	r0, #81	; 0x51
  401616:	4b3c      	ldr	r3, [pc, #240]	; (401708 <ssd1306_interface_init+0x130>)
  401618:	4798      	blx	r3
	
	
	pio_configure(PIOD, PIO_PERIPH_B, 1 << SPI_CLK_MASK, PIO_DEFAULT);
  40161a:	2300      	movs	r3, #0
  40161c:	f44f 0280 	mov.w	r2, #4194304	; 0x400000
  401620:	f04f 5180 	mov.w	r1, #268435456	; 0x10000000
  401624:	4839      	ldr	r0, [pc, #228]	; (40170c <ssd1306_interface_init+0x134>)
  401626:	4c3a      	ldr	r4, [pc, #232]	; (401710 <ssd1306_interface_init+0x138>)
  401628:	47a0      	blx	r4
	pio_configure(PIOD, PIO_PERIPH_B, 1 << SPI_MOSI_MASK, PIO_DEFAULT);
  40162a:	2300      	movs	r3, #0
  40162c:	f44f 1200 	mov.w	r2, #2097152	; 0x200000
  401630:	f04f 5180 	mov.w	r1, #268435456	; 0x10000000
  401634:	4835      	ldr	r0, [pc, #212]	; (40170c <ssd1306_interface_init+0x134>)
  401636:	4c36      	ldr	r4, [pc, #216]	; (401710 <ssd1306_interface_init+0x138>)
  401638:	47a0      	blx	r4
	pio_configure(PIOD, PIO_PERIPH_B, 1 << SPI_CS_MASK, PIO_DEFAULT);
  40163a:	2300      	movs	r3, #0
  40163c:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
  401640:	f04f 5180 	mov.w	r1, #268435456	; 0x10000000
  401644:	4831      	ldr	r0, [pc, #196]	; (40170c <ssd1306_interface_init+0x134>)
  401646:	4c32      	ldr	r4, [pc, #200]	; (401710 <ssd1306_interface_init+0x138>)
  401648:	47a0      	blx	r4
	
		pio_configure(PIOD, PIO_PERIPH_B, 1 << SPI_CLK_MASK, PIO_DEFAULT);
  40164a:	2300      	movs	r3, #0
  40164c:	f44f 0280 	mov.w	r2, #4194304	; 0x400000
  401650:	f04f 5180 	mov.w	r1, #268435456	; 0x10000000
  401654:	482d      	ldr	r0, [pc, #180]	; (40170c <ssd1306_interface_init+0x134>)
  401656:	4c2e      	ldr	r4, [pc, #184]	; (401710 <ssd1306_interface_init+0x138>)
  401658:	47a0      	blx	r4
		pio_configure(PIOD, PIO_PERIPH_B, 1 << SPI_MOSI_MASK, PIO_DEFAULT);
  40165a:	2300      	movs	r3, #0
  40165c:	f44f 1200 	mov.w	r2, #2097152	; 0x200000
  401660:	f04f 5180 	mov.w	r1, #268435456	; 0x10000000
  401664:	4829      	ldr	r0, [pc, #164]	; (40170c <ssd1306_interface_init+0x134>)
  401666:	4c2a      	ldr	r4, [pc, #168]	; (401710 <ssd1306_interface_init+0x138>)
  401668:	47a0      	blx	r4
		pio_configure(PIOD, PIO_PERIPH_B, 1 << SPI_CS_MASK, PIO_DEFAULT);
  40166a:	2300      	movs	r3, #0
  40166c:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
  401670:	f04f 5180 	mov.w	r1, #268435456	; 0x10000000
  401674:	4825      	ldr	r0, [pc, #148]	; (40170c <ssd1306_interface_init+0x134>)
  401676:	4c26      	ldr	r4, [pc, #152]	; (401710 <ssd1306_interface_init+0x138>)
  401678:	47a0      	blx	r4
		
		spi_disable(SPI0);
  40167a:	4826      	ldr	r0, [pc, #152]	; (401714 <ssd1306_interface_init+0x13c>)
  40167c:	4b26      	ldr	r3, [pc, #152]	; (401718 <ssd1306_interface_init+0x140>)
  40167e:	4798      	blx	r3
		spi_reset(SPI0);
  401680:	4824      	ldr	r0, [pc, #144]	; (401714 <ssd1306_interface_init+0x13c>)
  401682:	4b26      	ldr	r3, [pc, #152]	; (40171c <ssd1306_interface_init+0x144>)
  401684:	4798      	blx	r3
		spi_set_master_mode(SPI0);
  401686:	4823      	ldr	r0, [pc, #140]	; (401714 <ssd1306_interface_init+0x13c>)
  401688:	4b25      	ldr	r3, [pc, #148]	; (401720 <ssd1306_interface_init+0x148>)
  40168a:	4798      	blx	r3
		//spi_set_transfer_delay(SPI0, 1, 40, 30);
		spi_configure_cs_behavior(SPI0, 1, SPI_CS_KEEP_LOW);
  40168c:	2208      	movs	r2, #8
  40168e:	2101      	movs	r1, #1
  401690:	4820      	ldr	r0, [pc, #128]	; (401714 <ssd1306_interface_init+0x13c>)
  401692:	4b24      	ldr	r3, [pc, #144]	; (401724 <ssd1306_interface_init+0x14c>)
  401694:	4798      	blx	r3
		spi_set_clock_polarity(SPI0, 1, 0);
  401696:	2200      	movs	r2, #0
  401698:	2101      	movs	r1, #1
  40169a:	481e      	ldr	r0, [pc, #120]	; (401714 <ssd1306_interface_init+0x13c>)
  40169c:	4b22      	ldr	r3, [pc, #136]	; (401728 <ssd1306_interface_init+0x150>)
  40169e:	4798      	blx	r3
		spi_set_clock_phase(SPI0, 1, 0);
  4016a0:	2200      	movs	r2, #0
  4016a2:	2101      	movs	r1, #1
  4016a4:	481b      	ldr	r0, [pc, #108]	; (401714 <ssd1306_interface_init+0x13c>)
  4016a6:	4b21      	ldr	r3, [pc, #132]	; (40172c <ssd1306_interface_init+0x154>)
  4016a8:	4798      	blx	r3
		spi_set_fixed_peripheral_select(SPI0);
  4016aa:	481a      	ldr	r0, [pc, #104]	; (401714 <ssd1306_interface_init+0x13c>)
  4016ac:	4b20      	ldr	r3, [pc, #128]	; (401730 <ssd1306_interface_init+0x158>)
  4016ae:	4798      	blx	r3
		spi_set_bits_per_transfer(SPI0, 1, SPI_CSR_BITS_8_BIT);
  4016b0:	2200      	movs	r2, #0
  4016b2:	2101      	movs	r1, #1
  4016b4:	4817      	ldr	r0, [pc, #92]	; (401714 <ssd1306_interface_init+0x13c>)
  4016b6:	4b1f      	ldr	r3, [pc, #124]	; (401734 <ssd1306_interface_init+0x15c>)
  4016b8:	4798      	blx	r3
		spi_disable_loopback(SPI0);
  4016ba:	4816      	ldr	r0, [pc, #88]	; (401714 <ssd1306_interface_init+0x13c>)
  4016bc:	4b1e      	ldr	r3, [pc, #120]	; (401738 <ssd1306_interface_init+0x160>)
  4016be:	4798      	blx	r3

		spi_disable_mode_fault_detect(SPI0);
  4016c0:	4814      	ldr	r0, [pc, #80]	; (401714 <ssd1306_interface_init+0x13c>)
  4016c2:	4b1e      	ldr	r3, [pc, #120]	; (40173c <ssd1306_interface_init+0x164>)
  4016c4:	4798      	blx	r3
		int div = spi_calc_baudrate_div(1000000, sysclk_get_peripheral_hz());
  4016c6:	4b1e      	ldr	r3, [pc, #120]	; (401740 <ssd1306_interface_init+0x168>)
  4016c8:	4798      	blx	r3
  4016ca:	4603      	mov	r3, r0
  4016cc:	4619      	mov	r1, r3
  4016ce:	481d      	ldr	r0, [pc, #116]	; (401744 <ssd1306_interface_init+0x16c>)
  4016d0:	4b1d      	ldr	r3, [pc, #116]	; (401748 <ssd1306_interface_init+0x170>)
  4016d2:	4798      	blx	r3
  4016d4:	4603      	mov	r3, r0
  4016d6:	607b      	str	r3, [r7, #4]
		spi_set_baudrate_div(SPI0,1, div);
  4016d8:	687b      	ldr	r3, [r7, #4]
  4016da:	b2db      	uxtb	r3, r3
  4016dc:	461a      	mov	r2, r3
  4016de:	2101      	movs	r1, #1
  4016e0:	480c      	ldr	r0, [pc, #48]	; (401714 <ssd1306_interface_init+0x13c>)
  4016e2:	4b1a      	ldr	r3, [pc, #104]	; (40174c <ssd1306_interface_init+0x174>)
  4016e4:	4798      	blx	r3
		spi_enable_clock(SPI0);
  4016e6:	480b      	ldr	r0, [pc, #44]	; (401714 <ssd1306_interface_init+0x13c>)
  4016e8:	4b19      	ldr	r3, [pc, #100]	; (401750 <ssd1306_interface_init+0x178>)
  4016ea:	4798      	blx	r3
		
		spi_enable(SPI0);
  4016ec:	4809      	ldr	r0, [pc, #36]	; (401714 <ssd1306_interface_init+0x13c>)
  4016ee:	4b19      	ldr	r3, [pc, #100]	; (401754 <ssd1306_interface_init+0x17c>)
  4016f0:	4798      	blx	r3
}
  4016f2:	bf00      	nop
  4016f4:	370c      	adds	r7, #12
  4016f6:	46bd      	mov	sp, r7
  4016f8:	bd90      	pop	{r4, r7, pc}
  4016fa:	bf00      	nop
  4016fc:	00401371 	.word	0x00401371
  401700:	00401255 	.word	0x00401255
  401704:	00401209 	.word	0x00401209
  401708:	004013f9 	.word	0x004013f9
  40170c:	400e1400 	.word	0x400e1400
  401710:	004023f1 	.word	0x004023f1
  401714:	40008000 	.word	0x40008000
  401718:	00401499 	.word	0x00401499
  40171c:	00401465 	.word	0x00401465
  401720:	004014b3 	.word	0x004014b3
  401724:	00400525 	.word	0x00400525
  401728:	00400485 	.word	0x00400485
  40172c:	004004d5 	.word	0x004004d5
  401730:	004014d3 	.word	0x004014d3
  401734:	004005cb 	.word	0x004005cb
  401738:	00401513 	.word	0x00401513
  40173c:	004014f3 	.word	0x004014f3
  401740:	004011f5 	.word	0x004011f5
  401744:	000f4240 	.word	0x000f4240
  401748:	00400615 	.word	0x00400615
  40174c:	00400651 	.word	0x00400651
  401750:	00400395 	.word	0x00400395
  401754:	0040147f 	.word	0x0040147f

00401758 <ssd1306_init>:
 a
 a
 a
 */
void ssd1306_init(void)
{
  401758:	b580      	push	{r7, lr}
  40175a:	af00      	add	r7, sp, #0
	// Initialize delay routine
	delay_init();

	// Initialize the interface
	ssd1306_interface_init();
  40175c:	4b23      	ldr	r3, [pc, #140]	; (4017ec <ssd1306_init+0x94>)
  40175e:	4798      	blx	r3

	// Do a hard reset of the OLED display controller
	ssd1306_hard_reset();
  401760:	4b23      	ldr	r3, [pc, #140]	; (4017f0 <ssd1306_init+0x98>)
  401762:	4798      	blx	r3

	// Set the reset pin to the default state
	ioport_set_pin_level(SSD1306_RES_PIN, true);
  401764:	2101      	movs	r1, #1
  401766:	2051      	movs	r0, #81	; 0x51
  401768:	4b22      	ldr	r3, [pc, #136]	; (4017f4 <ssd1306_init+0x9c>)
  40176a:	4798      	blx	r3
	
	// 1/32 Duty (0x0F~0x3F)
	ssd1306_write_command(SSD1306_CMD_SET_MULTIPLEX_RATIO);
  40176c:	20a8      	movs	r0, #168	; 0xa8
  40176e:	4b22      	ldr	r3, [pc, #136]	; (4017f8 <ssd1306_init+0xa0>)
  401770:	4798      	blx	r3
	ssd1306_write_command(0x1F);
  401772:	201f      	movs	r0, #31
  401774:	4b20      	ldr	r3, [pc, #128]	; (4017f8 <ssd1306_init+0xa0>)
  401776:	4798      	blx	r3

	// Shift Mapping RAM Counter (0x00~0x3F)
	ssd1306_write_command(SSD1306_CMD_SET_DISPLAY_OFFSET);
  401778:	20d3      	movs	r0, #211	; 0xd3
  40177a:	4b1f      	ldr	r3, [pc, #124]	; (4017f8 <ssd1306_init+0xa0>)
  40177c:	4798      	blx	r3
	ssd1306_write_command(0x00);
  40177e:	2000      	movs	r0, #0
  401780:	4b1d      	ldr	r3, [pc, #116]	; (4017f8 <ssd1306_init+0xa0>)
  401782:	4798      	blx	r3

	// Set Mapping RAM Display Start Line (0x00~0x3F)
	ssd1306_write_command(SSD1306_CMD_SET_DISPLAY_START_LINE(0x00));
  401784:	2040      	movs	r0, #64	; 0x40
  401786:	4b1c      	ldr	r3, [pc, #112]	; (4017f8 <ssd1306_init+0xa0>)
  401788:	4798      	blx	r3

	// Set Column Address 0 Mapped to SEG0
	ssd1306_write_command(SSD1306_CMD_SET_SEGMENT_RE_MAP_COL127_SEG0);
  40178a:	20a1      	movs	r0, #161	; 0xa1
  40178c:	4b1a      	ldr	r3, [pc, #104]	; (4017f8 <ssd1306_init+0xa0>)
  40178e:	4798      	blx	r3

	// Set COM/Row Scan Scan from COM63 to 0
	ssd1306_write_command(SSD1306_CMD_SET_COM_OUTPUT_SCAN_DOWN);
  401790:	20c8      	movs	r0, #200	; 0xc8
  401792:	4b19      	ldr	r3, [pc, #100]	; (4017f8 <ssd1306_init+0xa0>)
  401794:	4798      	blx	r3

	// Set COM Pins hardware configuration
	ssd1306_write_command(SSD1306_CMD_SET_COM_PINS);
  401796:	20da      	movs	r0, #218	; 0xda
  401798:	4b17      	ldr	r3, [pc, #92]	; (4017f8 <ssd1306_init+0xa0>)
  40179a:	4798      	blx	r3
	ssd1306_write_command(0x02);
  40179c:	2002      	movs	r0, #2
  40179e:	4b16      	ldr	r3, [pc, #88]	; (4017f8 <ssd1306_init+0xa0>)
  4017a0:	4798      	blx	r3

	ssd1306_set_contrast(0x8F);
  4017a2:	208f      	movs	r0, #143	; 0x8f
  4017a4:	4b15      	ldr	r3, [pc, #84]	; (4017fc <ssd1306_init+0xa4>)
  4017a6:	4798      	blx	r3

	// Disable Entire display On
	ssd1306_write_command(SSD1306_CMD_ENTIRE_DISPLAY_AND_GDDRAM_ON);
  4017a8:	20a4      	movs	r0, #164	; 0xa4
  4017aa:	4b13      	ldr	r3, [pc, #76]	; (4017f8 <ssd1306_init+0xa0>)
  4017ac:	4798      	blx	r3

	ssd1306_display_invert_disable();
  4017ae:	4b14      	ldr	r3, [pc, #80]	; (401800 <ssd1306_init+0xa8>)
  4017b0:	4798      	blx	r3

	// Set Display Clock Divide Ratio / Oscillator Frequency (Default => 0x80)
	ssd1306_write_command(SSD1306_CMD_SET_DISPLAY_CLOCK_DIVIDE_RATIO);
  4017b2:	20d5      	movs	r0, #213	; 0xd5
  4017b4:	4b10      	ldr	r3, [pc, #64]	; (4017f8 <ssd1306_init+0xa0>)
  4017b6:	4798      	blx	r3
	ssd1306_write_command(0x80);
  4017b8:	2080      	movs	r0, #128	; 0x80
  4017ba:	4b0f      	ldr	r3, [pc, #60]	; (4017f8 <ssd1306_init+0xa0>)
  4017bc:	4798      	blx	r3

	// Enable charge pump regulator
	ssd1306_write_command(SSD1306_CMD_SET_CHARGE_PUMP_SETTING);
  4017be:	208d      	movs	r0, #141	; 0x8d
  4017c0:	4b0d      	ldr	r3, [pc, #52]	; (4017f8 <ssd1306_init+0xa0>)
  4017c2:	4798      	blx	r3
	ssd1306_write_command(0x14);
  4017c4:	2014      	movs	r0, #20
  4017c6:	4b0c      	ldr	r3, [pc, #48]	; (4017f8 <ssd1306_init+0xa0>)
  4017c8:	4798      	blx	r3

	// Set VCOMH Deselect Level
	ssd1306_write_command(SSD1306_CMD_SET_VCOMH_DESELECT_LEVEL);
  4017ca:	20db      	movs	r0, #219	; 0xdb
  4017cc:	4b0a      	ldr	r3, [pc, #40]	; (4017f8 <ssd1306_init+0xa0>)
  4017ce:	4798      	blx	r3
	ssd1306_write_command(0x40); // Default => 0x20 (0.77*VCC)
  4017d0:	2040      	movs	r0, #64	; 0x40
  4017d2:	4b09      	ldr	r3, [pc, #36]	; (4017f8 <ssd1306_init+0xa0>)
  4017d4:	4798      	blx	r3

	// Set Pre-Charge as 15 Clocks & Discharge as 1 Clock
	ssd1306_write_command(SSD1306_CMD_SET_PRE_CHARGE_PERIOD);
  4017d6:	20d9      	movs	r0, #217	; 0xd9
  4017d8:	4b07      	ldr	r3, [pc, #28]	; (4017f8 <ssd1306_init+0xa0>)
  4017da:	4798      	blx	r3
	ssd1306_write_command(0xF1);
  4017dc:	20f1      	movs	r0, #241	; 0xf1
  4017de:	4b06      	ldr	r3, [pc, #24]	; (4017f8 <ssd1306_init+0xa0>)
  4017e0:	4798      	blx	r3

	
	ssd1306_display_on();
  4017e2:	4b08      	ldr	r3, [pc, #32]	; (401804 <ssd1306_init+0xac>)
  4017e4:	4798      	blx	r3
}
  4017e6:	bf00      	nop
  4017e8:	bd80      	pop	{r7, pc}
  4017ea:	bf00      	nop
  4017ec:	004015d9 	.word	0x004015d9
  4017f0:	00401535 	.word	0x00401535
  4017f4:	004013f9 	.word	0x004013f9
  4017f8:	00401809 	.word	0x00401809
  4017fc:	0040159d 	.word	0x0040159d
  401800:	004015c5 	.word	0x004015c5
  401804:	00401589 	.word	0x00401589

00401808 <ssd1306_write_command>:
 * data write function is called based on the selected interface.
 *
 * \param command the command to write
 */
void ssd1306_write_command(uint8_t command)
{
  401808:	b5f0      	push	{r4, r5, r6, r7, lr}
  40180a:	b083      	sub	sp, #12
  40180c:	af00      	add	r7, sp, #0
  40180e:	4603      	mov	r3, r0
  401810:	71fb      	strb	r3, [r7, #7]
	ioport_set_pin_level(SSD1306_DC_PIN, false);
  401812:	2100      	movs	r1, #0
  401814:	2023      	movs	r0, #35	; 0x23
  401816:	4b1c      	ldr	r3, [pc, #112]	; (401888 <ssd1306_write_command+0x80>)
  401818:	4798      	blx	r3
	
	spi_set_peripheral_chip_select_value(SPI0, 1);
  40181a:	2101      	movs	r1, #1
  40181c:	481b      	ldr	r0, [pc, #108]	; (40188c <ssd1306_write_command+0x84>)
  40181e:	4b1c      	ldr	r3, [pc, #112]	; (401890 <ssd1306_write_command+0x88>)
  401820:	4798      	blx	r3
	spi_write(SPI0, command, 1, 1);
  401822:	79fb      	ldrb	r3, [r7, #7]
  401824:	b299      	uxth	r1, r3
  401826:	2301      	movs	r3, #1
  401828:	2201      	movs	r2, #1
  40182a:	4818      	ldr	r0, [pc, #96]	; (40188c <ssd1306_write_command+0x84>)
  40182c:	4c19      	ldr	r4, [pc, #100]	; (401894 <ssd1306_write_command+0x8c>)
  40182e:	47a0      	blx	r4
	delay_us(10);
  401830:	4b19      	ldr	r3, [pc, #100]	; (401898 <ssd1306_write_command+0x90>)
  401832:	4798      	blx	r3
  401834:	4603      	mov	r3, r0
  401836:	4619      	mov	r1, r3
  401838:	f04f 0200 	mov.w	r2, #0
  40183c:	460b      	mov	r3, r1
  40183e:	4614      	mov	r4, r2
  401840:	00a6      	lsls	r6, r4, #2
  401842:	ea46 7693 	orr.w	r6, r6, r3, lsr #30
  401846:	009d      	lsls	r5, r3, #2
  401848:	462b      	mov	r3, r5
  40184a:	4634      	mov	r4, r6
  40184c:	185b      	adds	r3, r3, r1
  40184e:	eb44 0402 	adc.w	r4, r4, r2
  401852:	18db      	adds	r3, r3, r3
  401854:	eb44 0404 	adc.w	r4, r4, r4
  401858:	4619      	mov	r1, r3
  40185a:	4622      	mov	r2, r4
  40185c:	4b0f      	ldr	r3, [pc, #60]	; (40189c <ssd1306_write_command+0x94>)
  40185e:	f04f 0400 	mov.w	r4, #0
  401862:	18cd      	adds	r5, r1, r3
  401864:	eb42 0604 	adc.w	r6, r2, r4
  401868:	4628      	mov	r0, r5
  40186a:	4631      	mov	r1, r6
  40186c:	4c0c      	ldr	r4, [pc, #48]	; (4018a0 <ssd1306_write_command+0x98>)
  40186e:	4a0d      	ldr	r2, [pc, #52]	; (4018a4 <ssd1306_write_command+0x9c>)
  401870:	f04f 0300 	mov.w	r3, #0
  401874:	47a0      	blx	r4
  401876:	4603      	mov	r3, r0
  401878:	460c      	mov	r4, r1
  40187a:	4618      	mov	r0, r3
  40187c:	4b0a      	ldr	r3, [pc, #40]	; (4018a8 <ssd1306_write_command+0xa0>)
  40187e:	4798      	blx	r3
}
  401880:	bf00      	nop
  401882:	370c      	adds	r7, #12
  401884:	46bd      	mov	sp, r7
  401886:	bdf0      	pop	{r4, r5, r6, r7, pc}
  401888:	004013f9 	.word	0x004013f9
  40188c:	40008000 	.word	0x40008000
  401890:	004003d1 	.word	0x004003d1
  401894:	00400405 	.word	0x00400405
  401898:	004011e1 	.word	0x004011e1
  40189c:	005a83df 	.word	0x005a83df
  4018a0:	00403609 	.word	0x00403609
  4018a4:	005a83e0 	.word	0x005a83e0
  4018a8:	20400001 	.word	0x20400001

004018ac <ssd1306_write_data>:
 * data write function is called based on the selected interface.
 *
 * \param data the data to write
 */
void ssd1306_write_data(uint8_t data)
{
  4018ac:	b5f0      	push	{r4, r5, r6, r7, lr}
  4018ae:	b083      	sub	sp, #12
  4018b0:	af00      	add	r7, sp, #0
  4018b2:	4603      	mov	r3, r0
  4018b4:	71fb      	strb	r3, [r7, #7]
	ioport_set_pin_level(SSD1306_DC_PIN, true);
  4018b6:	2101      	movs	r1, #1
  4018b8:	2023      	movs	r0, #35	; 0x23
  4018ba:	4b1c      	ldr	r3, [pc, #112]	; (40192c <ssd1306_write_data+0x80>)
  4018bc:	4798      	blx	r3
	
	spi_set_peripheral_chip_select_value(SPI0, 1);
  4018be:	2101      	movs	r1, #1
  4018c0:	481b      	ldr	r0, [pc, #108]	; (401930 <ssd1306_write_data+0x84>)
  4018c2:	4b1c      	ldr	r3, [pc, #112]	; (401934 <ssd1306_write_data+0x88>)
  4018c4:	4798      	blx	r3
	spi_write(SPI0, data, 1, 1);
  4018c6:	79fb      	ldrb	r3, [r7, #7]
  4018c8:	b299      	uxth	r1, r3
  4018ca:	2301      	movs	r3, #1
  4018cc:	2201      	movs	r2, #1
  4018ce:	4818      	ldr	r0, [pc, #96]	; (401930 <ssd1306_write_data+0x84>)
  4018d0:	4c19      	ldr	r4, [pc, #100]	; (401938 <ssd1306_write_data+0x8c>)
  4018d2:	47a0      	blx	r4
	delay_us(10);
  4018d4:	4b19      	ldr	r3, [pc, #100]	; (40193c <ssd1306_write_data+0x90>)
  4018d6:	4798      	blx	r3
  4018d8:	4603      	mov	r3, r0
  4018da:	4619      	mov	r1, r3
  4018dc:	f04f 0200 	mov.w	r2, #0
  4018e0:	460b      	mov	r3, r1
  4018e2:	4614      	mov	r4, r2
  4018e4:	00a6      	lsls	r6, r4, #2
  4018e6:	ea46 7693 	orr.w	r6, r6, r3, lsr #30
  4018ea:	009d      	lsls	r5, r3, #2
  4018ec:	462b      	mov	r3, r5
  4018ee:	4634      	mov	r4, r6
  4018f0:	185b      	adds	r3, r3, r1
  4018f2:	eb44 0402 	adc.w	r4, r4, r2
  4018f6:	18db      	adds	r3, r3, r3
  4018f8:	eb44 0404 	adc.w	r4, r4, r4
  4018fc:	4619      	mov	r1, r3
  4018fe:	4622      	mov	r2, r4
  401900:	4b0f      	ldr	r3, [pc, #60]	; (401940 <ssd1306_write_data+0x94>)
  401902:	f04f 0400 	mov.w	r4, #0
  401906:	18cd      	adds	r5, r1, r3
  401908:	eb42 0604 	adc.w	r6, r2, r4
  40190c:	4628      	mov	r0, r5
  40190e:	4631      	mov	r1, r6
  401910:	4c0c      	ldr	r4, [pc, #48]	; (401944 <ssd1306_write_data+0x98>)
  401912:	4a0d      	ldr	r2, [pc, #52]	; (401948 <ssd1306_write_data+0x9c>)
  401914:	f04f 0300 	mov.w	r3, #0
  401918:	47a0      	blx	r4
  40191a:	4603      	mov	r3, r0
  40191c:	460c      	mov	r4, r1
  40191e:	4618      	mov	r0, r3
  401920:	4b0a      	ldr	r3, [pc, #40]	; (40194c <ssd1306_write_data+0xa0>)
  401922:	4798      	blx	r3
}
  401924:	bf00      	nop
  401926:	370c      	adds	r7, #12
  401928:	46bd      	mov	sp, r7
  40192a:	bdf0      	pop	{r4, r5, r6, r7, pc}
  40192c:	004013f9 	.word	0x004013f9
  401930:	40008000 	.word	0x40008000
  401934:	004003d1 	.word	0x004003d1
  401938:	00400405 	.word	0x00400405
  40193c:	004011e1 	.word	0x004011e1
  401940:	005a83df 	.word	0x005a83df
  401944:	00403609 	.word	0x00403609
  401948:	005a83e0 	.word	0x005a83e0
  40194c:	20400001 	.word	0x20400001

00401950 <osc_enable>:
{
  401950:	b580      	push	{r7, lr}
  401952:	b082      	sub	sp, #8
  401954:	af00      	add	r7, sp, #0
  401956:	6078      	str	r0, [r7, #4]
	switch (ul_id) {
  401958:	687b      	ldr	r3, [r7, #4]
  40195a:	2b07      	cmp	r3, #7
  40195c:	d831      	bhi.n	4019c2 <osc_enable+0x72>
  40195e:	a201      	add	r2, pc, #4	; (adr r2, 401964 <osc_enable+0x14>)
  401960:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
  401964:	004019c1 	.word	0x004019c1
  401968:	00401985 	.word	0x00401985
  40196c:	0040198d 	.word	0x0040198d
  401970:	00401995 	.word	0x00401995
  401974:	0040199d 	.word	0x0040199d
  401978:	004019a5 	.word	0x004019a5
  40197c:	004019ad 	.word	0x004019ad
  401980:	004019b7 	.word	0x004019b7
		pmc_switch_sclk_to_32kxtal(PMC_OSC_XTAL);
  401984:	2000      	movs	r0, #0
  401986:	4b11      	ldr	r3, [pc, #68]	; (4019cc <osc_enable+0x7c>)
  401988:	4798      	blx	r3
		break;
  40198a:	e01a      	b.n	4019c2 <osc_enable+0x72>
		pmc_switch_sclk_to_32kxtal(PMC_OSC_BYPASS);
  40198c:	2001      	movs	r0, #1
  40198e:	4b0f      	ldr	r3, [pc, #60]	; (4019cc <osc_enable+0x7c>)
  401990:	4798      	blx	r3
		break;
  401992:	e016      	b.n	4019c2 <osc_enable+0x72>
		pmc_switch_mainck_to_fastrc(CKGR_MOR_MOSCRCF_4_MHz);
  401994:	2000      	movs	r0, #0
  401996:	4b0e      	ldr	r3, [pc, #56]	; (4019d0 <osc_enable+0x80>)
  401998:	4798      	blx	r3
		break;
  40199a:	e012      	b.n	4019c2 <osc_enable+0x72>
		pmc_switch_mainck_to_fastrc(CKGR_MOR_MOSCRCF_8_MHz);
  40199c:	2010      	movs	r0, #16
  40199e:	4b0c      	ldr	r3, [pc, #48]	; (4019d0 <osc_enable+0x80>)
  4019a0:	4798      	blx	r3
		break;
  4019a2:	e00e      	b.n	4019c2 <osc_enable+0x72>
		pmc_switch_mainck_to_fastrc(CKGR_MOR_MOSCRCF_12_MHz);
  4019a4:	2020      	movs	r0, #32
  4019a6:	4b0a      	ldr	r3, [pc, #40]	; (4019d0 <osc_enable+0x80>)
  4019a8:	4798      	blx	r3
		break;
  4019aa:	e00a      	b.n	4019c2 <osc_enable+0x72>
		pmc_switch_mainck_to_xtal(PMC_OSC_XTAL,
  4019ac:	213e      	movs	r1, #62	; 0x3e
  4019ae:	2000      	movs	r0, #0
  4019b0:	4b08      	ldr	r3, [pc, #32]	; (4019d4 <osc_enable+0x84>)
  4019b2:	4798      	blx	r3
		break;
  4019b4:	e005      	b.n	4019c2 <osc_enable+0x72>
		pmc_switch_mainck_to_xtal(PMC_OSC_BYPASS,
  4019b6:	213e      	movs	r1, #62	; 0x3e
  4019b8:	2001      	movs	r0, #1
  4019ba:	4b06      	ldr	r3, [pc, #24]	; (4019d4 <osc_enable+0x84>)
  4019bc:	4798      	blx	r3
		break;
  4019be:	e000      	b.n	4019c2 <osc_enable+0x72>
		break;
  4019c0:	bf00      	nop
}
  4019c2:	bf00      	nop
  4019c4:	3708      	adds	r7, #8
  4019c6:	46bd      	mov	sp, r7
  4019c8:	bd80      	pop	{r7, pc}
  4019ca:	bf00      	nop
  4019cc:	00402885 	.word	0x00402885
  4019d0:	004028f1 	.word	0x004028f1
  4019d4:	00402961 	.word	0x00402961

004019d8 <osc_is_ready>:
{
  4019d8:	b580      	push	{r7, lr}
  4019da:	b082      	sub	sp, #8
  4019dc:	af00      	add	r7, sp, #0
  4019de:	6078      	str	r0, [r7, #4]
	switch (ul_id) {
  4019e0:	687b      	ldr	r3, [r7, #4]
  4019e2:	2b07      	cmp	r3, #7
  4019e4:	d826      	bhi.n	401a34 <osc_is_ready+0x5c>
  4019e6:	a201      	add	r2, pc, #4	; (adr r2, 4019ec <osc_is_ready+0x14>)
  4019e8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
  4019ec:	00401a0d 	.word	0x00401a0d
  4019f0:	00401a11 	.word	0x00401a11
  4019f4:	00401a11 	.word	0x00401a11
  4019f8:	00401a23 	.word	0x00401a23
  4019fc:	00401a23 	.word	0x00401a23
  401a00:	00401a23 	.word	0x00401a23
  401a04:	00401a23 	.word	0x00401a23
  401a08:	00401a23 	.word	0x00401a23
		return 1;
  401a0c:	2301      	movs	r3, #1
  401a0e:	e012      	b.n	401a36 <osc_is_ready+0x5e>
		return pmc_osc_is_ready_32kxtal();
  401a10:	4b0b      	ldr	r3, [pc, #44]	; (401a40 <osc_is_ready+0x68>)
  401a12:	4798      	blx	r3
  401a14:	4603      	mov	r3, r0
  401a16:	2b00      	cmp	r3, #0
  401a18:	bf14      	ite	ne
  401a1a:	2301      	movne	r3, #1
  401a1c:	2300      	moveq	r3, #0
  401a1e:	b2db      	uxtb	r3, r3
  401a20:	e009      	b.n	401a36 <osc_is_ready+0x5e>
		return pmc_osc_is_ready_mainck();
  401a22:	4b08      	ldr	r3, [pc, #32]	; (401a44 <osc_is_ready+0x6c>)
  401a24:	4798      	blx	r3
  401a26:	4603      	mov	r3, r0
  401a28:	2b00      	cmp	r3, #0
  401a2a:	bf14      	ite	ne
  401a2c:	2301      	movne	r3, #1
  401a2e:	2300      	moveq	r3, #0
  401a30:	b2db      	uxtb	r3, r3
  401a32:	e000      	b.n	401a36 <osc_is_ready+0x5e>
	return 0;
  401a34:	2300      	movs	r3, #0
}
  401a36:	4618      	mov	r0, r3
  401a38:	3708      	adds	r7, #8
  401a3a:	46bd      	mov	sp, r7
  401a3c:	bd80      	pop	{r7, pc}
  401a3e:	bf00      	nop
  401a40:	004028bd 	.word	0x004028bd
  401a44:	004029d9 	.word	0x004029d9

00401a48 <osc_get_rate>:
{
  401a48:	b480      	push	{r7}
  401a4a:	b083      	sub	sp, #12
  401a4c:	af00      	add	r7, sp, #0
  401a4e:	6078      	str	r0, [r7, #4]
	switch (ul_id) {
  401a50:	687b      	ldr	r3, [r7, #4]
  401a52:	2b07      	cmp	r3, #7
  401a54:	d825      	bhi.n	401aa2 <osc_get_rate+0x5a>
  401a56:	a201      	add	r2, pc, #4	; (adr r2, 401a5c <osc_get_rate+0x14>)
  401a58:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
  401a5c:	00401a7d 	.word	0x00401a7d
  401a60:	00401a83 	.word	0x00401a83
  401a64:	00401a89 	.word	0x00401a89
  401a68:	00401a8f 	.word	0x00401a8f
  401a6c:	00401a93 	.word	0x00401a93
  401a70:	00401a97 	.word	0x00401a97
  401a74:	00401a9b 	.word	0x00401a9b
  401a78:	00401a9f 	.word	0x00401a9f
		return OSC_SLCK_32K_RC_HZ;
  401a7c:	f44f 43fa 	mov.w	r3, #32000	; 0x7d00
  401a80:	e010      	b.n	401aa4 <osc_get_rate+0x5c>
		return BOARD_FREQ_SLCK_XTAL;
  401a82:	f44f 4300 	mov.w	r3, #32768	; 0x8000
  401a86:	e00d      	b.n	401aa4 <osc_get_rate+0x5c>
		return BOARD_FREQ_SLCK_BYPASS;
  401a88:	f44f 4300 	mov.w	r3, #32768	; 0x8000
  401a8c:	e00a      	b.n	401aa4 <osc_get_rate+0x5c>
		return OSC_MAINCK_4M_RC_HZ;
  401a8e:	4b08      	ldr	r3, [pc, #32]	; (401ab0 <osc_get_rate+0x68>)
  401a90:	e008      	b.n	401aa4 <osc_get_rate+0x5c>
		return OSC_MAINCK_8M_RC_HZ;
  401a92:	4b08      	ldr	r3, [pc, #32]	; (401ab4 <osc_get_rate+0x6c>)
  401a94:	e006      	b.n	401aa4 <osc_get_rate+0x5c>
		return OSC_MAINCK_12M_RC_HZ;
  401a96:	4b08      	ldr	r3, [pc, #32]	; (401ab8 <osc_get_rate+0x70>)
  401a98:	e004      	b.n	401aa4 <osc_get_rate+0x5c>
		return BOARD_FREQ_MAINCK_XTAL;
  401a9a:	4b07      	ldr	r3, [pc, #28]	; (401ab8 <osc_get_rate+0x70>)
  401a9c:	e002      	b.n	401aa4 <osc_get_rate+0x5c>
		return BOARD_FREQ_MAINCK_BYPASS;
  401a9e:	4b06      	ldr	r3, [pc, #24]	; (401ab8 <osc_get_rate+0x70>)
  401aa0:	e000      	b.n	401aa4 <osc_get_rate+0x5c>
	return 0;
  401aa2:	2300      	movs	r3, #0
}
  401aa4:	4618      	mov	r0, r3
  401aa6:	370c      	adds	r7, #12
  401aa8:	46bd      	mov	sp, r7
  401aaa:	f85d 7b04 	ldr.w	r7, [sp], #4
  401aae:	4770      	bx	lr
  401ab0:	003d0900 	.word	0x003d0900
  401ab4:	007a1200 	.word	0x007a1200
  401ab8:	00b71b00 	.word	0x00b71b00

00401abc <osc_wait_ready>:
 * to become stable and ready to use as a clock source.
 *
 * \param id A number identifying the oscillator to wait for.
 */
static inline void osc_wait_ready(uint8_t id)
{
  401abc:	b580      	push	{r7, lr}
  401abe:	b082      	sub	sp, #8
  401ac0:	af00      	add	r7, sp, #0
  401ac2:	4603      	mov	r3, r0
  401ac4:	71fb      	strb	r3, [r7, #7]
	while (!osc_is_ready(id)) {
  401ac6:	bf00      	nop
  401ac8:	79fb      	ldrb	r3, [r7, #7]
  401aca:	4618      	mov	r0, r3
  401acc:	4b05      	ldr	r3, [pc, #20]	; (401ae4 <osc_wait_ready+0x28>)
  401ace:	4798      	blx	r3
  401ad0:	4603      	mov	r3, r0
  401ad2:	f083 0301 	eor.w	r3, r3, #1
  401ad6:	b2db      	uxtb	r3, r3
  401ad8:	2b00      	cmp	r3, #0
  401ada:	d1f5      	bne.n	401ac8 <osc_wait_ready+0xc>
		/* Do nothing */
	}
}
  401adc:	bf00      	nop
  401ade:	3708      	adds	r7, #8
  401ae0:	46bd      	mov	sp, r7
  401ae2:	bd80      	pop	{r7, pc}
  401ae4:	004019d9 	.word	0x004019d9

00401ae8 <pll_config_init>:
 * hardware mul+1 is hidden in this implementation. Use mul as mul effective
 * value.
 */
static inline void pll_config_init(struct pll_config *p_cfg,
		enum pll_source e_src, uint32_t ul_div, uint32_t ul_mul)
{
  401ae8:	b580      	push	{r7, lr}
  401aea:	b086      	sub	sp, #24
  401aec:	af00      	add	r7, sp, #0
  401aee:	60f8      	str	r0, [r7, #12]
  401af0:	607a      	str	r2, [r7, #4]
  401af2:	603b      	str	r3, [r7, #0]
  401af4:	460b      	mov	r3, r1
  401af6:	72fb      	strb	r3, [r7, #11]
	uint32_t vco_hz;

	Assert(e_src < PLL_NR_SOURCES);

	if (ul_div == 0 && ul_mul == 0) { /* Must only be true for UTMI PLL */
  401af8:	687b      	ldr	r3, [r7, #4]
  401afa:	2b00      	cmp	r3, #0
  401afc:	d107      	bne.n	401b0e <pll_config_init+0x26>
  401afe:	683b      	ldr	r3, [r7, #0]
  401b00:	2b00      	cmp	r3, #0
  401b02:	d104      	bne.n	401b0e <pll_config_init+0x26>
		p_cfg->ctrl = CKGR_UCKR_UPLLCOUNT(PLL_COUNT);
  401b04:	68fb      	ldr	r3, [r7, #12]
  401b06:	f44f 0270 	mov.w	r2, #15728640	; 0xf00000
  401b0a:	601a      	str	r2, [r3, #0]
  401b0c:	e019      	b.n	401b42 <pll_config_init+0x5a>
	} else { /* PLLA */
	/* Calculate internal VCO frequency */
	vco_hz = osc_get_rate(e_src) / ul_div;
  401b0e:	7afb      	ldrb	r3, [r7, #11]
  401b10:	4618      	mov	r0, r3
  401b12:	4b0e      	ldr	r3, [pc, #56]	; (401b4c <pll_config_init+0x64>)
  401b14:	4798      	blx	r3
  401b16:	4602      	mov	r2, r0
  401b18:	687b      	ldr	r3, [r7, #4]
  401b1a:	fbb2 f3f3 	udiv	r3, r2, r3
  401b1e:	617b      	str	r3, [r7, #20]
	Assert(vco_hz >= PLL_INPUT_MIN_HZ);
	Assert(vco_hz <= PLL_INPUT_MAX_HZ);

	vco_hz *= ul_mul;
  401b20:	697b      	ldr	r3, [r7, #20]
  401b22:	683a      	ldr	r2, [r7, #0]
  401b24:	fb02 f303 	mul.w	r3, r2, r3
  401b28:	617b      	str	r3, [r7, #20]
	Assert(vco_hz >= PLL_OUTPUT_MIN_HZ);
	Assert(vco_hz <= PLL_OUTPUT_MAX_HZ);

	/* PMC hardware will automatically make it mul+1 */
		p_cfg->ctrl = CKGR_PLLAR_MULA(ul_mul - 1) | CKGR_PLLAR_DIVA(ul_div)  \
  401b2a:	683b      	ldr	r3, [r7, #0]
  401b2c:	3b01      	subs	r3, #1
  401b2e:	041a      	lsls	r2, r3, #16
  401b30:	4b07      	ldr	r3, [pc, #28]	; (401b50 <pll_config_init+0x68>)
  401b32:	4013      	ands	r3, r2
  401b34:	687a      	ldr	r2, [r7, #4]
  401b36:	b2d2      	uxtb	r2, r2
  401b38:	4313      	orrs	r3, r2
		| CKGR_PLLAR_PLLACOUNT(PLL_COUNT);
  401b3a:	f443 527c 	orr.w	r2, r3, #16128	; 0x3f00
		p_cfg->ctrl = CKGR_PLLAR_MULA(ul_mul - 1) | CKGR_PLLAR_DIVA(ul_div)  \
  401b3e:	68fb      	ldr	r3, [r7, #12]
  401b40:	601a      	str	r2, [r3, #0]
	}
}
  401b42:	bf00      	nop
  401b44:	3718      	adds	r7, #24
  401b46:	46bd      	mov	sp, r7
  401b48:	bd80      	pop	{r7, pc}
  401b4a:	bf00      	nop
  401b4c:	00401a49 	.word	0x00401a49
  401b50:	07ff0000 	.word	0x07ff0000

00401b54 <pll_enable>:
		PMC->CKGR_UCKR = p_cfg->ctrl;
	}
}

static inline void pll_enable(const struct pll_config *p_cfg, uint32_t ul_pll_id)
{
  401b54:	b580      	push	{r7, lr}
  401b56:	b082      	sub	sp, #8
  401b58:	af00      	add	r7, sp, #0
  401b5a:	6078      	str	r0, [r7, #4]
  401b5c:	6039      	str	r1, [r7, #0]
	Assert(ul_pll_id < NR_PLLS);

	if (ul_pll_id == PLLA_ID) {
  401b5e:	683b      	ldr	r3, [r7, #0]
  401b60:	2b00      	cmp	r3, #0
  401b62:	d108      	bne.n	401b76 <pll_enable+0x22>
		pmc_disable_pllack(); // Always stop PLL first!
  401b64:	4b09      	ldr	r3, [pc, #36]	; (401b8c <pll_enable+0x38>)
  401b66:	4798      	blx	r3
		PMC->CKGR_PLLAR = CKGR_PLLAR_ONE | p_cfg->ctrl;
  401b68:	4a09      	ldr	r2, [pc, #36]	; (401b90 <pll_enable+0x3c>)
  401b6a:	687b      	ldr	r3, [r7, #4]
  401b6c:	681b      	ldr	r3, [r3, #0]
  401b6e:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
  401b72:	6293      	str	r3, [r2, #40]	; 0x28
	} else {
		PMC->CKGR_UCKR = p_cfg->ctrl | CKGR_UCKR_UPLLEN;
	}
}
  401b74:	e005      	b.n	401b82 <pll_enable+0x2e>
		PMC->CKGR_UCKR = p_cfg->ctrl | CKGR_UCKR_UPLLEN;
  401b76:	4a06      	ldr	r2, [pc, #24]	; (401b90 <pll_enable+0x3c>)
  401b78:	687b      	ldr	r3, [r7, #4]
  401b7a:	681b      	ldr	r3, [r3, #0]
  401b7c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
  401b80:	61d3      	str	r3, [r2, #28]
}
  401b82:	bf00      	nop
  401b84:	3708      	adds	r7, #8
  401b86:	46bd      	mov	sp, r7
  401b88:	bd80      	pop	{r7, pc}
  401b8a:	bf00      	nop
  401b8c:	004029f5 	.word	0x004029f5
  401b90:	400e0600 	.word	0x400e0600

00401b94 <pll_is_locked>:
		PMC->CKGR_UCKR &= ~CKGR_UCKR_UPLLEN;
	}
}

static inline uint32_t pll_is_locked(uint32_t ul_pll_id)
{
  401b94:	b580      	push	{r7, lr}
  401b96:	b082      	sub	sp, #8
  401b98:	af00      	add	r7, sp, #0
  401b9a:	6078      	str	r0, [r7, #4]
	Assert(ul_pll_id < NR_PLLS);

	if (ul_pll_id == PLLA_ID) {
  401b9c:	687b      	ldr	r3, [r7, #4]
  401b9e:	2b00      	cmp	r3, #0
  401ba0:	d103      	bne.n	401baa <pll_is_locked+0x16>
	return pmc_is_locked_pllack();
  401ba2:	4b05      	ldr	r3, [pc, #20]	; (401bb8 <pll_is_locked+0x24>)
  401ba4:	4798      	blx	r3
  401ba6:	4603      	mov	r3, r0
  401ba8:	e002      	b.n	401bb0 <pll_is_locked+0x1c>
	} else {
		return pmc_is_locked_upll();
  401baa:	4b04      	ldr	r3, [pc, #16]	; (401bbc <pll_is_locked+0x28>)
  401bac:	4798      	blx	r3
  401bae:	4603      	mov	r3, r0
	}
}
  401bb0:	4618      	mov	r0, r3
  401bb2:	3708      	adds	r7, #8
  401bb4:	46bd      	mov	sp, r7
  401bb6:	bd80      	pop	{r7, pc}
  401bb8:	00402a11 	.word	0x00402a11
  401bbc:	00402a2d 	.word	0x00402a2d

00401bc0 <pll_enable_source>:

static inline void pll_enable_source(enum pll_source e_src)
{
  401bc0:	b580      	push	{r7, lr}
  401bc2:	b082      	sub	sp, #8
  401bc4:	af00      	add	r7, sp, #0
  401bc6:	4603      	mov	r3, r0
  401bc8:	71fb      	strb	r3, [r7, #7]
	switch (e_src) {
  401bca:	79fb      	ldrb	r3, [r7, #7]
  401bcc:	3b03      	subs	r3, #3
  401bce:	2b04      	cmp	r3, #4
  401bd0:	d808      	bhi.n	401be4 <pll_enable_source+0x24>
	case PLL_SRC_MAINCK_4M_RC:
	case PLL_SRC_MAINCK_8M_RC:
	case PLL_SRC_MAINCK_12M_RC:
	case PLL_SRC_MAINCK_XTAL:
	case PLL_SRC_MAINCK_BYPASS:
		osc_enable(e_src);
  401bd2:	79fb      	ldrb	r3, [r7, #7]
  401bd4:	4618      	mov	r0, r3
  401bd6:	4b06      	ldr	r3, [pc, #24]	; (401bf0 <pll_enable_source+0x30>)
  401bd8:	4798      	blx	r3
		osc_wait_ready(e_src);
  401bda:	79fb      	ldrb	r3, [r7, #7]
  401bdc:	4618      	mov	r0, r3
  401bde:	4b05      	ldr	r3, [pc, #20]	; (401bf4 <pll_enable_source+0x34>)
  401be0:	4798      	blx	r3
		break;
  401be2:	e000      	b.n	401be6 <pll_enable_source+0x26>

	default:
		Assert(false);
		break;
  401be4:	bf00      	nop
	}
}
  401be6:	bf00      	nop
  401be8:	3708      	adds	r7, #8
  401bea:	46bd      	mov	sp, r7
  401bec:	bd80      	pop	{r7, pc}
  401bee:	bf00      	nop
  401bf0:	00401951 	.word	0x00401951
  401bf4:	00401abd 	.word	0x00401abd

00401bf8 <pll_wait_for_lock>:
 *
 * \retval STATUS_OK The PLL is now locked.
 * \retval ERR_TIMEOUT Timed out waiting for PLL to become locked.
 */
static inline int pll_wait_for_lock(unsigned int pll_id)
{
  401bf8:	b580      	push	{r7, lr}
  401bfa:	b082      	sub	sp, #8
  401bfc:	af00      	add	r7, sp, #0
  401bfe:	6078      	str	r0, [r7, #4]
	Assert(pll_id < NR_PLLS);

	while (!pll_is_locked(pll_id)) {
  401c00:	bf00      	nop
  401c02:	6878      	ldr	r0, [r7, #4]
  401c04:	4b04      	ldr	r3, [pc, #16]	; (401c18 <pll_wait_for_lock+0x20>)
  401c06:	4798      	blx	r3
  401c08:	4603      	mov	r3, r0
  401c0a:	2b00      	cmp	r3, #0
  401c0c:	d0f9      	beq.n	401c02 <pll_wait_for_lock+0xa>
		/* Do nothing */
	}

	return 0;
  401c0e:	2300      	movs	r3, #0
}
  401c10:	4618      	mov	r0, r3
  401c12:	3708      	adds	r7, #8
  401c14:	46bd      	mov	sp, r7
  401c16:	bd80      	pop	{r7, pc}
  401c18:	00401b95 	.word	0x00401b95

00401c1c <sysclk_get_main_hz>:
{
  401c1c:	b580      	push	{r7, lr}
  401c1e:	af00      	add	r7, sp, #0
		return pll_get_default_rate(0);
  401c20:	2006      	movs	r0, #6
  401c22:	4b05      	ldr	r3, [pc, #20]	; (401c38 <sysclk_get_main_hz+0x1c>)
  401c24:	4798      	blx	r3
  401c26:	4602      	mov	r2, r0
  401c28:	4613      	mov	r3, r2
  401c2a:	009b      	lsls	r3, r3, #2
  401c2c:	4413      	add	r3, r2
  401c2e:	009a      	lsls	r2, r3, #2
  401c30:	4413      	add	r3, r2
}
  401c32:	4618      	mov	r0, r3
  401c34:	bd80      	pop	{r7, pc}
  401c36:	bf00      	nop
  401c38:	00401a49 	.word	0x00401a49

00401c3c <sysclk_get_cpu_hz>:
{
  401c3c:	b580      	push	{r7, lr}
  401c3e:	af00      	add	r7, sp, #0
	return sysclk_get_main_hz() /
  401c40:	4b02      	ldr	r3, [pc, #8]	; (401c4c <sysclk_get_cpu_hz+0x10>)
  401c42:	4798      	blx	r3
  401c44:	4603      	mov	r3, r0
}
  401c46:	4618      	mov	r0, r3
  401c48:	bd80      	pop	{r7, pc}
  401c4a:	bf00      	nop
  401c4c:	00401c1d 	.word	0x00401c1d

00401c50 <sysclk_init>:
	pmc_disable_udpck();
}
#endif // CONFIG_USBCLK_SOURCE

void sysclk_init(void)
{
  401c50:	b590      	push	{r4, r7, lr}
  401c52:	b083      	sub	sp, #12
  401c54:	af00      	add	r7, sp, #0
	struct pll_config pllcfg;

	/* Set flash wait state to max in case the below clock switching. */
	system_init_flash(CHIP_FREQ_CPU_MAX);
  401c56:	4813      	ldr	r0, [pc, #76]	; (401ca4 <sysclk_init+0x54>)
  401c58:	4b13      	ldr	r3, [pc, #76]	; (401ca8 <sysclk_init+0x58>)
  401c5a:	4798      	blx	r3
		pmc_switch_mck_to_mainck(CONFIG_SYSCLK_PRES);
	}

#ifdef CONFIG_PLL0_SOURCE
	else if (CONFIG_SYSCLK_SOURCE == SYSCLK_SRC_PLLACK) {
		pll_enable_source(CONFIG_PLL0_SOURCE);
  401c5c:	2006      	movs	r0, #6
  401c5e:	4b13      	ldr	r3, [pc, #76]	; (401cac <sysclk_init+0x5c>)
  401c60:	4798      	blx	r3
		pll_config_defaults(&pllcfg, 0);
  401c62:	1d38      	adds	r0, r7, #4
  401c64:	2319      	movs	r3, #25
  401c66:	2201      	movs	r2, #1
  401c68:	2106      	movs	r1, #6
  401c6a:	4c11      	ldr	r4, [pc, #68]	; (401cb0 <sysclk_init+0x60>)
  401c6c:	47a0      	blx	r4
		pll_enable(&pllcfg, 0);
  401c6e:	1d3b      	adds	r3, r7, #4
  401c70:	2100      	movs	r1, #0
  401c72:	4618      	mov	r0, r3
  401c74:	4b0f      	ldr	r3, [pc, #60]	; (401cb4 <sysclk_init+0x64>)
  401c76:	4798      	blx	r3
		pll_wait_for_lock(0);
  401c78:	2000      	movs	r0, #0
  401c7a:	4b0f      	ldr	r3, [pc, #60]	; (401cb8 <sysclk_init+0x68>)
  401c7c:	4798      	blx	r3
		pmc_mck_set_division(CONFIG_SYSCLK_DIV);
  401c7e:	2002      	movs	r0, #2
  401c80:	4b0e      	ldr	r3, [pc, #56]	; (401cbc <sysclk_init+0x6c>)
  401c82:	4798      	blx	r3
		pmc_switch_mck_to_pllack(CONFIG_SYSCLK_PRES);
  401c84:	2000      	movs	r0, #0
  401c86:	4b0e      	ldr	r3, [pc, #56]	; (401cc0 <sysclk_init+0x70>)
  401c88:	4798      	blx	r3
		pll_wait_for_lock(1);
		pmc_mck_set_division(CONFIG_SYSCLK_DIV);
		pmc_switch_mck_to_upllck(CONFIG_SYSCLK_PRES);
	}
	/* Update the SystemFrequency variable */
	SystemCoreClockUpdate();
  401c8a:	4b0e      	ldr	r3, [pc, #56]	; (401cc4 <sysclk_init+0x74>)
  401c8c:	4798      	blx	r3

	/* Set a flash wait state depending on the new cpu frequency */
	system_init_flash(sysclk_get_cpu_hz());
  401c8e:	4b0e      	ldr	r3, [pc, #56]	; (401cc8 <sysclk_init+0x78>)
  401c90:	4798      	blx	r3
  401c92:	4603      	mov	r3, r0
  401c94:	4618      	mov	r0, r3
  401c96:	4b04      	ldr	r3, [pc, #16]	; (401ca8 <sysclk_init+0x58>)
  401c98:	4798      	blx	r3

#if (defined CONFIG_SYSCLK_DEFAULT_RETURNS_SLOW_OSC)
	/* Signal that the internal frequencies are setup */
	sysclk_initialized = 1;
#endif
}
  401c9a:	bf00      	nop
  401c9c:	370c      	adds	r7, #12
  401c9e:	46bd      	mov	sp, r7
  401ca0:	bd90      	pop	{r4, r7, pc}
  401ca2:	bf00      	nop
  401ca4:	11e1a300 	.word	0x11e1a300
  401ca8:	00402d75 	.word	0x00402d75
  401cac:	00401bc1 	.word	0x00401bc1
  401cb0:	00401ae9 	.word	0x00401ae9
  401cb4:	00401b55 	.word	0x00401b55
  401cb8:	00401bf9 	.word	0x00401bf9
  401cbc:	00402785 	.word	0x00402785
  401cc0:	00402801 	.word	0x00402801
  401cc4:	00402c0d 	.word	0x00402c0d
  401cc8:	00401c3d 	.word	0x00401c3d

00401ccc <SCB_EnableICache>:
/** \brief Enable I-Cache

    The function turns on I-Cache
  */
__STATIC_INLINE void SCB_EnableICache(void)
{
  401ccc:	b480      	push	{r7}
  401cce:	af00      	add	r7, sp, #0
    This function acts as a special kind of Data Memory Barrier.
    It completes when all explicit memory accesses before this instruction complete.
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE void __DSB(void)
{
  __ASM volatile ("dsb");
  401cd0:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb");
  401cd4:	f3bf 8f6f 	isb	sy
  #if (__ICACHE_PRESENT == 1)
    __DSB();
    __ISB();
    SCB->ICIALLU = 0;                       // invalidate I-Cache
  401cd8:	4b09      	ldr	r3, [pc, #36]	; (401d00 <SCB_EnableICache+0x34>)
  401cda:	2200      	movs	r2, #0
  401cdc:	f8c3 2250 	str.w	r2, [r3, #592]	; 0x250
    SCB->CCR |=  SCB_CCR_IC_Msk;            // enable I-Cache
  401ce0:	4a07      	ldr	r2, [pc, #28]	; (401d00 <SCB_EnableICache+0x34>)
  401ce2:	4b07      	ldr	r3, [pc, #28]	; (401d00 <SCB_EnableICache+0x34>)
  401ce4:	695b      	ldr	r3, [r3, #20]
  401ce6:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
  401cea:	6153      	str	r3, [r2, #20]
  __ASM volatile ("dsb");
  401cec:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb");
  401cf0:	f3bf 8f6f 	isb	sy
    __DSB();
    __ISB();
  #endif
}
  401cf4:	bf00      	nop
  401cf6:	46bd      	mov	sp, r7
  401cf8:	f85d 7b04 	ldr.w	r7, [sp], #4
  401cfc:	4770      	bx	lr
  401cfe:	bf00      	nop
  401d00:	e000ed00 	.word	0xe000ed00

00401d04 <SCB_EnableDCache>:
/** \brief Enable D-Cache

    The function turns on D-Cache
  */
__STATIC_INLINE void SCB_EnableDCache(void)
{
  401d04:	b480      	push	{r7}
  401d06:	b08b      	sub	sp, #44	; 0x2c
  401d08:	af00      	add	r7, sp, #0
  #if (__DCACHE_PRESENT == 1)
    uint32_t ccsidr, sshift, wshift, sw;
    uint32_t sets, ways;

    ccsidr  = SCB->CCSIDR;
  401d0a:	4b26      	ldr	r3, [pc, #152]	; (401da4 <SCB_EnableDCache+0xa0>)
  401d0c:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
  401d10:	61fb      	str	r3, [r7, #28]
    sets    = CCSIDR_SETS(ccsidr);
  401d12:	69fb      	ldr	r3, [r7, #28]
  401d14:	0b5b      	lsrs	r3, r3, #13
  401d16:	f3c3 030e 	ubfx	r3, r3, #0, #15
  401d1a:	627b      	str	r3, [r7, #36]	; 0x24
    sshift  = CCSIDR_LSSHIFT(ccsidr) + 4;
  401d1c:	69fb      	ldr	r3, [r7, #28]
  401d1e:	f003 0307 	and.w	r3, r3, #7
  401d22:	3304      	adds	r3, #4
  401d24:	61bb      	str	r3, [r7, #24]
    ways    = CCSIDR_WAYS(ccsidr);
  401d26:	69fb      	ldr	r3, [r7, #28]
  401d28:	08db      	lsrs	r3, r3, #3
  401d2a:	f3c3 0309 	ubfx	r3, r3, #0, #10
  401d2e:	617b      	str	r3, [r7, #20]
  401d30:	697b      	ldr	r3, [r7, #20]
  401d32:	60bb      	str	r3, [r7, #8]
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE uint8_t __CLZ(uint32_t value)
{
  uint32_t result;

  __ASM volatile ("clz %0, %1" : "=r" (result) : "r" (value) );
  401d34:	68bb      	ldr	r3, [r7, #8]
  401d36:	fab3 f383 	clz	r3, r3
  401d3a:	607b      	str	r3, [r7, #4]
   return ((uint8_t) result);    /* Add explicit type cast here */
  401d3c:	687b      	ldr	r3, [r7, #4]
  401d3e:	b2db      	uxtb	r3, r3
    wshift  = __CLZ(ways) & 0x1f;
  401d40:	f003 031f 	and.w	r3, r3, #31
  401d44:	613b      	str	r3, [r7, #16]
  __ASM volatile ("dsb");
  401d46:	f3bf 8f4f 	dsb	sy

    __DSB();

    do {                                    // invalidate D-Cache
         int32_t tmpways = ways;
  401d4a:	697b      	ldr	r3, [r7, #20]
  401d4c:	623b      	str	r3, [r7, #32]
         do {
              sw = ((tmpways << wshift) | (sets << sshift));
  401d4e:	6a3a      	ldr	r2, [r7, #32]
  401d50:	693b      	ldr	r3, [r7, #16]
  401d52:	fa02 f303 	lsl.w	r3, r2, r3
  401d56:	4619      	mov	r1, r3
  401d58:	6a7a      	ldr	r2, [r7, #36]	; 0x24
  401d5a:	69bb      	ldr	r3, [r7, #24]
  401d5c:	fa02 f303 	lsl.w	r3, r2, r3
  401d60:	430b      	orrs	r3, r1
  401d62:	60fb      	str	r3, [r7, #12]
              SCB->DCISW = sw;
  401d64:	4a0f      	ldr	r2, [pc, #60]	; (401da4 <SCB_EnableDCache+0xa0>)
  401d66:	68fb      	ldr	r3, [r7, #12]
  401d68:	f8c2 3260 	str.w	r3, [r2, #608]	; 0x260
            } while(tmpways--);
  401d6c:	6a3b      	ldr	r3, [r7, #32]
  401d6e:	1e5a      	subs	r2, r3, #1
  401d70:	623a      	str	r2, [r7, #32]
  401d72:	2b00      	cmp	r3, #0
  401d74:	d1eb      	bne.n	401d4e <SCB_EnableDCache+0x4a>
        } while(sets--);
  401d76:	6a7b      	ldr	r3, [r7, #36]	; 0x24
  401d78:	1e5a      	subs	r2, r3, #1
  401d7a:	627a      	str	r2, [r7, #36]	; 0x24
  401d7c:	2b00      	cmp	r3, #0
  401d7e:	d1e4      	bne.n	401d4a <SCB_EnableDCache+0x46>
  401d80:	f3bf 8f4f 	dsb	sy
    __DSB();

    SCB->CCR |=  SCB_CCR_DC_Msk;            // enable D-Cache
  401d84:	4a07      	ldr	r2, [pc, #28]	; (401da4 <SCB_EnableDCache+0xa0>)
  401d86:	4b07      	ldr	r3, [pc, #28]	; (401da4 <SCB_EnableDCache+0xa0>)
  401d88:	695b      	ldr	r3, [r3, #20]
  401d8a:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
  401d8e:	6153      	str	r3, [r2, #20]
  401d90:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb");
  401d94:	f3bf 8f6f 	isb	sy

    __DSB();
    __ISB();
  #endif
}
  401d98:	bf00      	nop
  401d9a:	372c      	adds	r7, #44	; 0x2c
  401d9c:	46bd      	mov	sp, r7
  401d9e:	f85d 7b04 	ldr.w	r7, [sp], #4
  401da2:	4770      	bx	lr
  401da4:	e000ed00 	.word	0xe000ed00

00401da8 <sysclk_enable_peripheral_clock>:
{
  401da8:	b580      	push	{r7, lr}
  401daa:	b082      	sub	sp, #8
  401dac:	af00      	add	r7, sp, #0
  401dae:	6078      	str	r0, [r7, #4]
	pmc_enable_periph_clk(ul_id);
  401db0:	6878      	ldr	r0, [r7, #4]
  401db2:	4b03      	ldr	r3, [pc, #12]	; (401dc0 <sysclk_enable_peripheral_clock+0x18>)
  401db4:	4798      	blx	r3
}
  401db6:	bf00      	nop
  401db8:	3708      	adds	r7, #8
  401dba:	46bd      	mov	sp, r7
  401dbc:	bd80      	pop	{r7, pc}
  401dbe:	bf00      	nop
  401dc0:	00402a49 	.word	0x00402a49

00401dc4 <ioport_init>:
{
  401dc4:	b580      	push	{r7, lr}
  401dc6:	af00      	add	r7, sp, #0
	sysclk_enable_peripheral_clock(ID_PIOA);
  401dc8:	200a      	movs	r0, #10
  401dca:	4b08      	ldr	r3, [pc, #32]	; (401dec <ioport_init+0x28>)
  401dcc:	4798      	blx	r3
	sysclk_enable_peripheral_clock(ID_PIOB);
  401dce:	200b      	movs	r0, #11
  401dd0:	4b06      	ldr	r3, [pc, #24]	; (401dec <ioport_init+0x28>)
  401dd2:	4798      	blx	r3
	sysclk_enable_peripheral_clock(ID_PIOC);
  401dd4:	200c      	movs	r0, #12
  401dd6:	4b05      	ldr	r3, [pc, #20]	; (401dec <ioport_init+0x28>)
  401dd8:	4798      	blx	r3
	sysclk_enable_peripheral_clock(ID_PIOD);
  401dda:	2010      	movs	r0, #16
  401ddc:	4b03      	ldr	r3, [pc, #12]	; (401dec <ioport_init+0x28>)
  401dde:	4798      	blx	r3
	sysclk_enable_peripheral_clock(ID_PIOE);
  401de0:	2011      	movs	r0, #17
  401de2:	4b02      	ldr	r3, [pc, #8]	; (401dec <ioport_init+0x28>)
  401de4:	4798      	blx	r3
}
  401de6:	bf00      	nop
  401de8:	bd80      	pop	{r7, pc}
  401dea:	bf00      	nop
  401dec:	00401da9 	.word	0x00401da9

00401df0 <ioport_set_pin_mode>:
{
  401df0:	b480      	push	{r7}
  401df2:	b08d      	sub	sp, #52	; 0x34
  401df4:	af00      	add	r7, sp, #0
  401df6:	6078      	str	r0, [r7, #4]
  401df8:	6039      	str	r1, [r7, #0]
  401dfa:	687b      	ldr	r3, [r7, #4]
  401dfc:	62fb      	str	r3, [r7, #44]	; 0x2c
  401dfe:	683b      	ldr	r3, [r7, #0]
  401e00:	62bb      	str	r3, [r7, #40]	; 0x28
  401e02:	6afb      	ldr	r3, [r7, #44]	; 0x2c
  401e04:	627b      	str	r3, [r7, #36]	; 0x24
	return pin >> 5;
  401e06:	6a7b      	ldr	r3, [r7, #36]	; 0x24
  401e08:	095a      	lsrs	r2, r3, #5
  401e0a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
  401e0c:	623b      	str	r3, [r7, #32]
	return 1U << (pin & 0x1F);
  401e0e:	6a3b      	ldr	r3, [r7, #32]
  401e10:	f003 031f 	and.w	r3, r3, #31
  401e14:	2101      	movs	r1, #1
  401e16:	fa01 f303 	lsl.w	r3, r1, r3
  401e1a:	61fa      	str	r2, [r7, #28]
  401e1c:	61bb      	str	r3, [r7, #24]
  401e1e:	6abb      	ldr	r3, [r7, #40]	; 0x28
  401e20:	617b      	str	r3, [r7, #20]
  401e22:	69fb      	ldr	r3, [r7, #28]
  401e24:	613b      	str	r3, [r7, #16]
	return (Pio *)((uintptr_t)IOPORT_BASE_ADDRESS +
  401e26:	693a      	ldr	r2, [r7, #16]
  401e28:	4b37      	ldr	r3, [pc, #220]	; (401f08 <ioport_set_pin_mode+0x118>)
  401e2a:	4413      	add	r3, r2
  401e2c:	025b      	lsls	r3, r3, #9
	Pio *base = arch_ioport_port_to_base(port);
  401e2e:	60fb      	str	r3, [r7, #12]
	if (mode & IOPORT_MODE_PULLUP) {
  401e30:	697b      	ldr	r3, [r7, #20]
  401e32:	f003 0308 	and.w	r3, r3, #8
  401e36:	2b00      	cmp	r3, #0
  401e38:	d003      	beq.n	401e42 <ioport_set_pin_mode+0x52>
		base->PIO_PUER = mask;
  401e3a:	68fb      	ldr	r3, [r7, #12]
  401e3c:	69ba      	ldr	r2, [r7, #24]
  401e3e:	665a      	str	r2, [r3, #100]	; 0x64
  401e40:	e002      	b.n	401e48 <ioport_set_pin_mode+0x58>
		base->PIO_PUDR = mask;
  401e42:	68fb      	ldr	r3, [r7, #12]
  401e44:	69ba      	ldr	r2, [r7, #24]
  401e46:	661a      	str	r2, [r3, #96]	; 0x60
	if (mode & IOPORT_MODE_PULLDOWN) {
  401e48:	697b      	ldr	r3, [r7, #20]
  401e4a:	f003 0310 	and.w	r3, r3, #16
  401e4e:	2b00      	cmp	r3, #0
  401e50:	d004      	beq.n	401e5c <ioport_set_pin_mode+0x6c>
		base->PIO_PPDER = mask;
  401e52:	68fb      	ldr	r3, [r7, #12]
  401e54:	69ba      	ldr	r2, [r7, #24]
  401e56:	f8c3 2094 	str.w	r2, [r3, #148]	; 0x94
  401e5a:	e003      	b.n	401e64 <ioport_set_pin_mode+0x74>
		base->PIO_PPDDR = mask;
  401e5c:	68fb      	ldr	r3, [r7, #12]
  401e5e:	69ba      	ldr	r2, [r7, #24]
  401e60:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
	if (mode & IOPORT_MODE_OPEN_DRAIN) {
  401e64:	697b      	ldr	r3, [r7, #20]
  401e66:	f003 0320 	and.w	r3, r3, #32
  401e6a:	2b00      	cmp	r3, #0
  401e6c:	d003      	beq.n	401e76 <ioport_set_pin_mode+0x86>
		base->PIO_MDER = mask;
  401e6e:	68fb      	ldr	r3, [r7, #12]
  401e70:	69ba      	ldr	r2, [r7, #24]
  401e72:	651a      	str	r2, [r3, #80]	; 0x50
  401e74:	e002      	b.n	401e7c <ioport_set_pin_mode+0x8c>
		base->PIO_MDDR = mask;
  401e76:	68fb      	ldr	r3, [r7, #12]
  401e78:	69ba      	ldr	r2, [r7, #24]
  401e7a:	655a      	str	r2, [r3, #84]	; 0x54
	if (mode & (IOPORT_MODE_GLITCH_FILTER | IOPORT_MODE_DEBOUNCE)) {
  401e7c:	697b      	ldr	r3, [r7, #20]
  401e7e:	f003 03c0 	and.w	r3, r3, #192	; 0xc0
  401e82:	2b00      	cmp	r3, #0
  401e84:	d003      	beq.n	401e8e <ioport_set_pin_mode+0x9e>
		base->PIO_IFER = mask;
  401e86:	68fb      	ldr	r3, [r7, #12]
  401e88:	69ba      	ldr	r2, [r7, #24]
  401e8a:	621a      	str	r2, [r3, #32]
  401e8c:	e002      	b.n	401e94 <ioport_set_pin_mode+0xa4>
		base->PIO_IFDR = mask;
  401e8e:	68fb      	ldr	r3, [r7, #12]
  401e90:	69ba      	ldr	r2, [r7, #24]
  401e92:	625a      	str	r2, [r3, #36]	; 0x24
	if (mode & IOPORT_MODE_DEBOUNCE) {
  401e94:	697b      	ldr	r3, [r7, #20]
  401e96:	f003 0380 	and.w	r3, r3, #128	; 0x80
  401e9a:	2b00      	cmp	r3, #0
  401e9c:	d004      	beq.n	401ea8 <ioport_set_pin_mode+0xb8>
		base->PIO_IFSCER = mask;
  401e9e:	68fb      	ldr	r3, [r7, #12]
  401ea0:	69ba      	ldr	r2, [r7, #24]
  401ea2:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
  401ea6:	e003      	b.n	401eb0 <ioport_set_pin_mode+0xc0>
		base->PIO_IFSCDR = mask;
  401ea8:	68fb      	ldr	r3, [r7, #12]
  401eaa:	69ba      	ldr	r2, [r7, #24]
  401eac:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
	if (mode & IOPORT_MODE_MUX_BIT0) {
  401eb0:	697b      	ldr	r3, [r7, #20]
  401eb2:	f003 0301 	and.w	r3, r3, #1
  401eb6:	2b00      	cmp	r3, #0
  401eb8:	d006      	beq.n	401ec8 <ioport_set_pin_mode+0xd8>
		base->PIO_ABCDSR[0] |= mask;
  401eba:	68fb      	ldr	r3, [r7, #12]
  401ebc:	6f1a      	ldr	r2, [r3, #112]	; 0x70
  401ebe:	69bb      	ldr	r3, [r7, #24]
  401ec0:	431a      	orrs	r2, r3
  401ec2:	68fb      	ldr	r3, [r7, #12]
  401ec4:	671a      	str	r2, [r3, #112]	; 0x70
  401ec6:	e006      	b.n	401ed6 <ioport_set_pin_mode+0xe6>
		base->PIO_ABCDSR[0] &= ~mask;
  401ec8:	68fb      	ldr	r3, [r7, #12]
  401eca:	6f1a      	ldr	r2, [r3, #112]	; 0x70
  401ecc:	69bb      	ldr	r3, [r7, #24]
  401ece:	43db      	mvns	r3, r3
  401ed0:	401a      	ands	r2, r3
  401ed2:	68fb      	ldr	r3, [r7, #12]
  401ed4:	671a      	str	r2, [r3, #112]	; 0x70
	if (mode & IOPORT_MODE_MUX_BIT1) {
  401ed6:	697b      	ldr	r3, [r7, #20]
  401ed8:	f003 0302 	and.w	r3, r3, #2
  401edc:	2b00      	cmp	r3, #0
  401ede:	d006      	beq.n	401eee <ioport_set_pin_mode+0xfe>
		base->PIO_ABCDSR[1] |= mask;
  401ee0:	68fb      	ldr	r3, [r7, #12]
  401ee2:	6f5a      	ldr	r2, [r3, #116]	; 0x74
  401ee4:	69bb      	ldr	r3, [r7, #24]
  401ee6:	431a      	orrs	r2, r3
  401ee8:	68fb      	ldr	r3, [r7, #12]
  401eea:	675a      	str	r2, [r3, #116]	; 0x74
}
  401eec:	e006      	b.n	401efc <ioport_set_pin_mode+0x10c>
		base->PIO_ABCDSR[1] &= ~mask;
  401eee:	68fb      	ldr	r3, [r7, #12]
  401ef0:	6f5a      	ldr	r2, [r3, #116]	; 0x74
  401ef2:	69bb      	ldr	r3, [r7, #24]
  401ef4:	43db      	mvns	r3, r3
  401ef6:	401a      	ands	r2, r3
  401ef8:	68fb      	ldr	r3, [r7, #12]
  401efa:	675a      	str	r2, [r3, #116]	; 0x74
  401efc:	bf00      	nop
  401efe:	3734      	adds	r7, #52	; 0x34
  401f00:	46bd      	mov	sp, r7
  401f02:	f85d 7b04 	ldr.w	r7, [sp], #4
  401f06:	4770      	bx	lr
  401f08:	00200707 	.word	0x00200707

00401f0c <ioport_set_pin_dir>:
{
  401f0c:	b480      	push	{r7}
  401f0e:	b08d      	sub	sp, #52	; 0x34
  401f10:	af00      	add	r7, sp, #0
  401f12:	6078      	str	r0, [r7, #4]
  401f14:	460b      	mov	r3, r1
  401f16:	70fb      	strb	r3, [r7, #3]
  401f18:	687b      	ldr	r3, [r7, #4]
  401f1a:	62fb      	str	r3, [r7, #44]	; 0x2c
  401f1c:	78fb      	ldrb	r3, [r7, #3]
  401f1e:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
  401f22:	6afb      	ldr	r3, [r7, #44]	; 0x2c
  401f24:	627b      	str	r3, [r7, #36]	; 0x24
  401f26:	6a7b      	ldr	r3, [r7, #36]	; 0x24
  401f28:	623b      	str	r3, [r7, #32]
	return pin >> 5;
  401f2a:	6a3b      	ldr	r3, [r7, #32]
  401f2c:	095b      	lsrs	r3, r3, #5
  401f2e:	61fb      	str	r3, [r7, #28]
	return (Pio *)((uintptr_t)IOPORT_BASE_ADDRESS +
  401f30:	69fa      	ldr	r2, [r7, #28]
  401f32:	4b17      	ldr	r3, [pc, #92]	; (401f90 <ioport_set_pin_dir+0x84>)
  401f34:	4413      	add	r3, r2
  401f36:	025b      	lsls	r3, r3, #9
	Pio *base = arch_ioport_pin_to_base(pin);
  401f38:	61bb      	str	r3, [r7, #24]
	if (dir == IOPORT_DIR_OUTPUT) {
  401f3a:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
  401f3e:	2b01      	cmp	r3, #1
  401f40:	d109      	bne.n	401f56 <ioport_set_pin_dir+0x4a>
  401f42:	6afb      	ldr	r3, [r7, #44]	; 0x2c
  401f44:	617b      	str	r3, [r7, #20]
	return 1U << (pin & 0x1F);
  401f46:	697b      	ldr	r3, [r7, #20]
  401f48:	f003 031f 	and.w	r3, r3, #31
  401f4c:	2201      	movs	r2, #1
  401f4e:	409a      	lsls	r2, r3
		base->PIO_OER = arch_ioport_pin_to_mask(pin);
  401f50:	69bb      	ldr	r3, [r7, #24]
  401f52:	611a      	str	r2, [r3, #16]
  401f54:	e00c      	b.n	401f70 <ioport_set_pin_dir+0x64>
	} else if (dir == IOPORT_DIR_INPUT) {
  401f56:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
  401f5a:	2b00      	cmp	r3, #0
  401f5c:	d108      	bne.n	401f70 <ioport_set_pin_dir+0x64>
  401f5e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
  401f60:	613b      	str	r3, [r7, #16]
	return 1U << (pin & 0x1F);
  401f62:	693b      	ldr	r3, [r7, #16]
  401f64:	f003 031f 	and.w	r3, r3, #31
  401f68:	2201      	movs	r2, #1
  401f6a:	409a      	lsls	r2, r3
		base->PIO_ODR = arch_ioport_pin_to_mask(pin);
  401f6c:	69bb      	ldr	r3, [r7, #24]
  401f6e:	615a      	str	r2, [r3, #20]
  401f70:	6afb      	ldr	r3, [r7, #44]	; 0x2c
  401f72:	60fb      	str	r3, [r7, #12]
	return 1U << (pin & 0x1F);
  401f74:	68fb      	ldr	r3, [r7, #12]
  401f76:	f003 031f 	and.w	r3, r3, #31
  401f7a:	2201      	movs	r2, #1
  401f7c:	409a      	lsls	r2, r3
	base->PIO_OWER = arch_ioport_pin_to_mask(pin);
  401f7e:	69bb      	ldr	r3, [r7, #24]
  401f80:	f8c3 20a0 	str.w	r2, [r3, #160]	; 0xa0
}
  401f84:	bf00      	nop
  401f86:	3734      	adds	r7, #52	; 0x34
  401f88:	46bd      	mov	sp, r7
  401f8a:	f85d 7b04 	ldr.w	r7, [sp], #4
  401f8e:	4770      	bx	lr
  401f90:	00200707 	.word	0x00200707

00401f94 <ioport_set_pin_level>:
{
  401f94:	b480      	push	{r7}
  401f96:	b08b      	sub	sp, #44	; 0x2c
  401f98:	af00      	add	r7, sp, #0
  401f9a:	6078      	str	r0, [r7, #4]
  401f9c:	460b      	mov	r3, r1
  401f9e:	70fb      	strb	r3, [r7, #3]
  401fa0:	687b      	ldr	r3, [r7, #4]
  401fa2:	627b      	str	r3, [r7, #36]	; 0x24
  401fa4:	78fb      	ldrb	r3, [r7, #3]
  401fa6:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
  401faa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
  401fac:	61fb      	str	r3, [r7, #28]
  401fae:	69fb      	ldr	r3, [r7, #28]
  401fb0:	61bb      	str	r3, [r7, #24]
	return pin >> 5;
  401fb2:	69bb      	ldr	r3, [r7, #24]
  401fb4:	095b      	lsrs	r3, r3, #5
  401fb6:	617b      	str	r3, [r7, #20]
	return (Pio *)((uintptr_t)IOPORT_BASE_ADDRESS +
  401fb8:	697a      	ldr	r2, [r7, #20]
  401fba:	4b10      	ldr	r3, [pc, #64]	; (401ffc <ioport_set_pin_level+0x68>)
  401fbc:	4413      	add	r3, r2
  401fbe:	025b      	lsls	r3, r3, #9
	Pio *base = arch_ioport_pin_to_base(pin);
  401fc0:	613b      	str	r3, [r7, #16]
	if (level) {
  401fc2:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
  401fc6:	2b00      	cmp	r3, #0
  401fc8:	d009      	beq.n	401fde <ioport_set_pin_level+0x4a>
  401fca:	6a7b      	ldr	r3, [r7, #36]	; 0x24
  401fcc:	60fb      	str	r3, [r7, #12]
	return 1U << (pin & 0x1F);
  401fce:	68fb      	ldr	r3, [r7, #12]
  401fd0:	f003 031f 	and.w	r3, r3, #31
  401fd4:	2201      	movs	r2, #1
  401fd6:	409a      	lsls	r2, r3
		base->PIO_SODR = arch_ioport_pin_to_mask(pin);
  401fd8:	693b      	ldr	r3, [r7, #16]
  401fda:	631a      	str	r2, [r3, #48]	; 0x30
}
  401fdc:	e008      	b.n	401ff0 <ioport_set_pin_level+0x5c>
  401fde:	6a7b      	ldr	r3, [r7, #36]	; 0x24
  401fe0:	60bb      	str	r3, [r7, #8]
	return 1U << (pin & 0x1F);
  401fe2:	68bb      	ldr	r3, [r7, #8]
  401fe4:	f003 031f 	and.w	r3, r3, #31
  401fe8:	2201      	movs	r2, #1
  401fea:	409a      	lsls	r2, r3
		base->PIO_CODR = arch_ioport_pin_to_mask(pin);
  401fec:	693b      	ldr	r3, [r7, #16]
  401fee:	635a      	str	r2, [r3, #52]	; 0x34
  401ff0:	bf00      	nop
  401ff2:	372c      	adds	r7, #44	; 0x2c
  401ff4:	46bd      	mov	sp, r7
  401ff6:	f85d 7b04 	ldr.w	r7, [sp], #4
  401ffa:	4770      	bx	lr
  401ffc:	00200707 	.word	0x00200707

00402000 <ioport_set_pin_sense_mode>:
 * \param pin IOPORT pin to configure
 * \param pin_sense Edge to sense for the pin (\ref ioport_sense)
 */
static inline void ioport_set_pin_sense_mode(ioport_pin_t pin,
		enum ioport_sense pin_sense)
{
  402000:	b480      	push	{r7}
  402002:	b08d      	sub	sp, #52	; 0x34
  402004:	af00      	add	r7, sp, #0
  402006:	6078      	str	r0, [r7, #4]
  402008:	460b      	mov	r3, r1
  40200a:	70fb      	strb	r3, [r7, #3]
  40200c:	687b      	ldr	r3, [r7, #4]
  40200e:	62fb      	str	r3, [r7, #44]	; 0x2c
  402010:	78fb      	ldrb	r3, [r7, #3]
  402012:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
  402016:	6afb      	ldr	r3, [r7, #44]	; 0x2c
  402018:	627b      	str	r3, [r7, #36]	; 0x24
	return pin >> 5;
  40201a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
  40201c:	095a      	lsrs	r2, r3, #5
  40201e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
  402020:	623b      	str	r3, [r7, #32]
	return 1U << (pin & 0x1F);
  402022:	6a3b      	ldr	r3, [r7, #32]
  402024:	f003 031f 	and.w	r3, r3, #31
  402028:	2101      	movs	r1, #1
  40202a:	fa01 f303 	lsl.w	r3, r1, r3
  40202e:	61fa      	str	r2, [r7, #28]
  402030:	61bb      	str	r3, [r7, #24]
  402032:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
  402036:	75fb      	strb	r3, [r7, #23]
  402038:	69fb      	ldr	r3, [r7, #28]
  40203a:	613b      	str	r3, [r7, #16]
	return (Pio *)((uintptr_t)IOPORT_BASE_ADDRESS +
  40203c:	693a      	ldr	r2, [r7, #16]
  40203e:	4b23      	ldr	r3, [pc, #140]	; (4020cc <ioport_set_pin_sense_mode+0xcc>)
  402040:	4413      	add	r3, r2
  402042:	025b      	lsls	r3, r3, #9
}

__always_inline static void arch_ioport_set_port_sense_mode(ioport_port_t port,
		ioport_port_mask_t mask, enum ioport_sense pin_sense)
{
	Pio *base = arch_ioport_port_to_base(port);
  402044:	60fb      	str	r3, [r7, #12]
	 *       1       0         0    IOPORT_SENSE_FALLING
	 *       1       0         1    IOPORT_SENSE_RISING
	 *       1       1         0    IOPORT_SENSE_LEVEL_LOW
	 *       1       1         1    IOPORT_SENSE_LEVEL_HIGH
	 */
	switch(pin_sense) {
  402046:	7dfb      	ldrb	r3, [r7, #23]
  402048:	3b01      	subs	r3, #1
  40204a:	2b03      	cmp	r3, #3
  40204c:	d82e      	bhi.n	4020ac <ioport_set_pin_sense_mode+0xac>
  40204e:	a201      	add	r2, pc, #4	; (adr r2, 402054 <ioport_set_pin_sense_mode+0x54>)
  402050:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
  402054:	00402089 	.word	0x00402089
  402058:	0040209b 	.word	0x0040209b
  40205c:	00402065 	.word	0x00402065
  402060:	00402077 	.word	0x00402077
	case IOPORT_SENSE_LEVEL_LOW:
		base->PIO_LSR = mask;
  402064:	68fb      	ldr	r3, [r7, #12]
  402066:	69ba      	ldr	r2, [r7, #24]
  402068:	f8c3 20c4 	str.w	r2, [r3, #196]	; 0xc4
		base->PIO_FELLSR = mask;
  40206c:	68fb      	ldr	r3, [r7, #12]
  40206e:	69ba      	ldr	r2, [r7, #24]
  402070:	f8c3 20d0 	str.w	r2, [r3, #208]	; 0xd0
  402074:	e01f      	b.n	4020b6 <ioport_set_pin_sense_mode+0xb6>
		break;
	case IOPORT_SENSE_LEVEL_HIGH:
		base->PIO_LSR = mask;
  402076:	68fb      	ldr	r3, [r7, #12]
  402078:	69ba      	ldr	r2, [r7, #24]
  40207a:	f8c3 20c4 	str.w	r2, [r3, #196]	; 0xc4
		base->PIO_REHLSR = mask;
  40207e:	68fb      	ldr	r3, [r7, #12]
  402080:	69ba      	ldr	r2, [r7, #24]
  402082:	f8c3 20d4 	str.w	r2, [r3, #212]	; 0xd4
  402086:	e016      	b.n	4020b6 <ioport_set_pin_sense_mode+0xb6>
		break;
	case IOPORT_SENSE_FALLING:
		base->PIO_ESR = mask;
  402088:	68fb      	ldr	r3, [r7, #12]
  40208a:	69ba      	ldr	r2, [r7, #24]
  40208c:	f8c3 20c0 	str.w	r2, [r3, #192]	; 0xc0
		base->PIO_FELLSR = mask;
  402090:	68fb      	ldr	r3, [r7, #12]
  402092:	69ba      	ldr	r2, [r7, #24]
  402094:	f8c3 20d0 	str.w	r2, [r3, #208]	; 0xd0
  402098:	e00d      	b.n	4020b6 <ioport_set_pin_sense_mode+0xb6>
		break;
	case IOPORT_SENSE_RISING:
		base->PIO_ESR = mask;
  40209a:	68fb      	ldr	r3, [r7, #12]
  40209c:	69ba      	ldr	r2, [r7, #24]
  40209e:	f8c3 20c0 	str.w	r2, [r3, #192]	; 0xc0
		base->PIO_REHLSR = mask;
  4020a2:	68fb      	ldr	r3, [r7, #12]
  4020a4:	69ba      	ldr	r2, [r7, #24]
  4020a6:	f8c3 20d4 	str.w	r2, [r3, #212]	; 0xd4
  4020aa:	e004      	b.n	4020b6 <ioport_set_pin_sense_mode+0xb6>
		break;
	default:
		base->PIO_AIMDR = mask;
  4020ac:	68fb      	ldr	r3, [r7, #12]
  4020ae:	69ba      	ldr	r2, [r7, #24]
  4020b0:	f8c3 20b4 	str.w	r2, [r3, #180]	; 0xb4
	arch_ioport_set_pin_sense_mode(pin, pin_sense);
}
  4020b4:	e003      	b.n	4020be <ioport_set_pin_sense_mode+0xbe>
		return;
	}
	base->PIO_AIMER = mask;
  4020b6:	68fb      	ldr	r3, [r7, #12]
  4020b8:	69ba      	ldr	r2, [r7, #24]
  4020ba:	f8c3 20b0 	str.w	r2, [r3, #176]	; 0xb0
  4020be:	bf00      	nop
  4020c0:	3734      	adds	r7, #52	; 0x34
  4020c2:	46bd      	mov	sp, r7
  4020c4:	f85d 7b04 	ldr.w	r7, [sp], #4
  4020c8:	4770      	bx	lr
  4020ca:	bf00      	nop
  4020cc:	00200707 	.word	0x00200707

004020d0 <tcm_disable>:
/** \brief  TCM memory Disable

	The function enables TCM memories
 */
static inline void tcm_disable(void) 
{
  4020d0:	b480      	push	{r7}
  4020d2:	af00      	add	r7, sp, #0
  __ASM volatile ("dsb");
  4020d4:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb");
  4020d8:	f3bf 8f6f 	isb	sy

	__DSB();
	__ISB();
	SCB->ITCMCR &= ~(uint32_t)(1UL);
  4020dc:	4a0c      	ldr	r2, [pc, #48]	; (402110 <tcm_disable+0x40>)
  4020de:	4b0c      	ldr	r3, [pc, #48]	; (402110 <tcm_disable+0x40>)
  4020e0:	f8d3 3290 	ldr.w	r3, [r3, #656]	; 0x290
  4020e4:	f023 0301 	bic.w	r3, r3, #1
  4020e8:	f8c2 3290 	str.w	r3, [r2, #656]	; 0x290
	SCB->DTCMCR &= ~(uint32_t)SCB_DTCMCR_EN_Msk;
  4020ec:	4a08      	ldr	r2, [pc, #32]	; (402110 <tcm_disable+0x40>)
  4020ee:	4b08      	ldr	r3, [pc, #32]	; (402110 <tcm_disable+0x40>)
  4020f0:	f8d3 3294 	ldr.w	r3, [r3, #660]	; 0x294
  4020f4:	f023 0301 	bic.w	r3, r3, #1
  4020f8:	f8c2 3294 	str.w	r3, [r2, #660]	; 0x294
  __ASM volatile ("dsb");
  4020fc:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb");
  402100:	f3bf 8f6f 	isb	sy
	__DSB();
	__ISB();
}
  402104:	bf00      	nop
  402106:	46bd      	mov	sp, r7
  402108:	f85d 7b04 	ldr.w	r7, [sp], #4
  40210c:	4770      	bx	lr
  40210e:	bf00      	nop
  402110:	e000ed00 	.word	0xe000ed00

00402114 <board_init>:
#endif

void board_init(void)
{
  402114:	b580      	push	{r7, lr}
  402116:	af00      	add	r7, sp, #0
#ifndef CONF_BOARD_KEEP_WATCHDOG_AT_INIT
	/* Disable the watchdog */
	WDT->WDT_MR = WDT_MR_WDDIS;
  402118:	4b13      	ldr	r3, [pc, #76]	; (402168 <board_init+0x54>)
  40211a:	f44f 4200 	mov.w	r2, #32768	; 0x8000
  40211e:	605a      	str	r2, [r3, #4]
	_setup_memory_region();
#endif

#ifdef CONF_BOARD_ENABLE_CACHE
	/* Enabling the Cache */
	SCB_EnableICache(); 
  402120:	4b12      	ldr	r3, [pc, #72]	; (40216c <board_init+0x58>)
  402122:	4798      	blx	r3
	SCB_EnableDCache();
  402124:	4b12      	ldr	r3, [pc, #72]	; (402170 <board_init+0x5c>)
  402126:	4798      	blx	r3
		*dst++ = *src++;
	}
#endif
#else
	/* TCM Configuration */
	EFC->EEFC_FCR = (EEFC_FCR_FKEY_PASSWD | EEFC_FCR_FCMD_CGPB 
  402128:	4b12      	ldr	r3, [pc, #72]	; (402174 <board_init+0x60>)
  40212a:	4a13      	ldr	r2, [pc, #76]	; (402178 <board_init+0x64>)
  40212c:	605a      	str	r2, [r3, #4]
					| EEFC_FCR_FARG(8));
	EFC->EEFC_FCR = (EEFC_FCR_FKEY_PASSWD | EEFC_FCR_FCMD_CGPB 
  40212e:	4b11      	ldr	r3, [pc, #68]	; (402174 <board_init+0x60>)
  402130:	4a12      	ldr	r2, [pc, #72]	; (40217c <board_init+0x68>)
  402132:	605a      	str	r2, [r3, #4]
					| EEFC_FCR_FARG(7));
	
	tcm_disable();
  402134:	4b12      	ldr	r3, [pc, #72]	; (402180 <board_init+0x6c>)
  402136:	4798      	blx	r3
#endif

	/* Initialize IOPORTs */
	ioport_init();
  402138:	4b12      	ldr	r3, [pc, #72]	; (402184 <board_init+0x70>)
  40213a:	4798      	blx	r3

	/* Configure the pins connected to LED as output and set their
	 * default initial state to high (LED off).
	 */
	ioport_set_pin_dir(LED0_GPIO, IOPORT_DIR_OUTPUT);
  40213c:	2101      	movs	r1, #1
  40213e:	2048      	movs	r0, #72	; 0x48
  402140:	4b11      	ldr	r3, [pc, #68]	; (402188 <board_init+0x74>)
  402142:	4798      	blx	r3
	ioport_set_pin_level(LED0_GPIO, LED0_INACTIVE_LEVEL);
  402144:	2101      	movs	r1, #1
  402146:	2048      	movs	r0, #72	; 0x48
  402148:	4b10      	ldr	r3, [pc, #64]	; (40218c <board_init+0x78>)
  40214a:	4798      	blx	r3

	/* Configure Push Button pins */
	ioport_set_pin_input_mode(GPIO_PUSH_BUTTON_1, GPIO_PUSH_BUTTON_1_FLAGS,
  40214c:	2100      	movs	r1, #0
  40214e:	200b      	movs	r0, #11
  402150:	4b0d      	ldr	r3, [pc, #52]	; (402188 <board_init+0x74>)
  402152:	4798      	blx	r3
  402154:	2188      	movs	r1, #136	; 0x88
  402156:	200b      	movs	r0, #11
  402158:	4b0d      	ldr	r3, [pc, #52]	; (402190 <board_init+0x7c>)
  40215a:	4798      	blx	r3
  40215c:	2102      	movs	r1, #2
  40215e:	200b      	movs	r0, #11
  402160:	4b0c      	ldr	r3, [pc, #48]	; (402194 <board_init+0x80>)
  402162:	4798      	blx	r3
	pio_configure_pin(LCD_SPI_CDS_PIO, LCD_SPI_CDS_FLAGS);
	pio_configure_pin(LCD_SPI_BACKLIGHT_PIO, LCD_SPI_BACKLIGHT_FLAGS);
	pio_set_pin_high(LCD_SPI_BACKLIGHT_PIO);

#endif
}
  402164:	bf00      	nop
  402166:	bd80      	pop	{r7, pc}
  402168:	400e1850 	.word	0x400e1850
  40216c:	00401ccd 	.word	0x00401ccd
  402170:	00401d05 	.word	0x00401d05
  402174:	400e0c00 	.word	0x400e0c00
  402178:	5a00080c 	.word	0x5a00080c
  40217c:	5a00070c 	.word	0x5a00070c
  402180:	004020d1 	.word	0x004020d1
  402184:	00401dc5 	.word	0x00401dc5
  402188:	00401f0d 	.word	0x00401f0d
  40218c:	00401f95 	.word	0x00401f95
  402190:	00401df1 	.word	0x00401df1
  402194:	00402001 	.word	0x00402001

00402198 <pio_pull_up>:
 * \param ul_pull_up_enable Indicates if the pin(s) internal pull-up shall be
 * configured.
 */
void pio_pull_up(Pio *p_pio, const uint32_t ul_mask,
		const uint32_t ul_pull_up_enable)
{
  402198:	b480      	push	{r7}
  40219a:	b085      	sub	sp, #20
  40219c:	af00      	add	r7, sp, #0
  40219e:	60f8      	str	r0, [r7, #12]
  4021a0:	60b9      	str	r1, [r7, #8]
  4021a2:	607a      	str	r2, [r7, #4]
	/* Enable the pull-up(s) if necessary */
	if (ul_pull_up_enable) {
  4021a4:	687b      	ldr	r3, [r7, #4]
  4021a6:	2b00      	cmp	r3, #0
  4021a8:	d003      	beq.n	4021b2 <pio_pull_up+0x1a>
		p_pio->PIO_PUER = ul_mask;
  4021aa:	68fb      	ldr	r3, [r7, #12]
  4021ac:	68ba      	ldr	r2, [r7, #8]
  4021ae:	665a      	str	r2, [r3, #100]	; 0x64
	} else {
		p_pio->PIO_PUDR = ul_mask;
	}
}
  4021b0:	e002      	b.n	4021b8 <pio_pull_up+0x20>
		p_pio->PIO_PUDR = ul_mask;
  4021b2:	68fb      	ldr	r3, [r7, #12]
  4021b4:	68ba      	ldr	r2, [r7, #8]
  4021b6:	661a      	str	r2, [r3, #96]	; 0x60
}
  4021b8:	bf00      	nop
  4021ba:	3714      	adds	r7, #20
  4021bc:	46bd      	mov	sp, r7
  4021be:	f85d 7b04 	ldr.w	r7, [sp], #4
  4021c2:	4770      	bx	lr

004021c4 <pio_set>:
 *
 * \param p_pio Pointer to a PIO instance.
 * \param ul_mask Bitmask of one or more pin(s) to configure.
 */
void pio_set(Pio *p_pio, const uint32_t ul_mask)
{
  4021c4:	b480      	push	{r7}
  4021c6:	b083      	sub	sp, #12
  4021c8:	af00      	add	r7, sp, #0
  4021ca:	6078      	str	r0, [r7, #4]
  4021cc:	6039      	str	r1, [r7, #0]
	p_pio->PIO_SODR = ul_mask;
  4021ce:	687b      	ldr	r3, [r7, #4]
  4021d0:	683a      	ldr	r2, [r7, #0]
  4021d2:	631a      	str	r2, [r3, #48]	; 0x30
}
  4021d4:	bf00      	nop
  4021d6:	370c      	adds	r7, #12
  4021d8:	46bd      	mov	sp, r7
  4021da:	f85d 7b04 	ldr.w	r7, [sp], #4
  4021de:	4770      	bx	lr

004021e0 <pio_clear>:
 *
 * \param p_pio Pointer to a PIO instance.
 * \param ul_mask Bitmask of one or more pin(s) to configure.
 */
void pio_clear(Pio *p_pio, const uint32_t ul_mask)
{
  4021e0:	b480      	push	{r7}
  4021e2:	b083      	sub	sp, #12
  4021e4:	af00      	add	r7, sp, #0
  4021e6:	6078      	str	r0, [r7, #4]
  4021e8:	6039      	str	r1, [r7, #0]
	p_pio->PIO_CODR = ul_mask;
  4021ea:	687b      	ldr	r3, [r7, #4]
  4021ec:	683a      	ldr	r2, [r7, #0]
  4021ee:	635a      	str	r2, [r3, #52]	; 0x34
}
  4021f0:	bf00      	nop
  4021f2:	370c      	adds	r7, #12
  4021f4:	46bd      	mov	sp, r7
  4021f6:	f85d 7b04 	ldr.w	r7, [sp], #4
  4021fa:	4770      	bx	lr

004021fc <pio_set_peripheral>:
 * \param ul_type PIO type.
 * \param ul_mask Bitmask of one or more pin(s) to configure.
 */
void pio_set_peripheral(Pio *p_pio, const pio_type_t ul_type,
		const uint32_t ul_mask)
{
  4021fc:	b480      	push	{r7}
  4021fe:	b087      	sub	sp, #28
  402200:	af00      	add	r7, sp, #0
  402202:	60f8      	str	r0, [r7, #12]
  402204:	60b9      	str	r1, [r7, #8]
  402206:	607a      	str	r2, [r7, #4]
	uint32_t ul_sr;

	/* Disable interrupts on the pin(s) */
	p_pio->PIO_IDR = ul_mask;
  402208:	68fb      	ldr	r3, [r7, #12]
  40220a:	687a      	ldr	r2, [r7, #4]
  40220c:	645a      	str	r2, [r3, #68]	; 0x44

#if (SAM3S || SAM3N || SAM4S || SAM4E || SAM4N || SAM4C || SAMG || SAM4CP || SAM4CM || SAMV71 || SAMV70 || SAME70 || SAMS70)
	switch (ul_type) {
  40220e:	68bb      	ldr	r3, [r7, #8]
  402210:	f1b3 5fc0 	cmp.w	r3, #402653184	; 0x18000000
  402214:	d04a      	beq.n	4022ac <pio_set_peripheral+0xb0>
  402216:	f1b3 5fc0 	cmp.w	r3, #402653184	; 0x18000000
  40221a:	d808      	bhi.n	40222e <pio_set_peripheral+0x32>
  40221c:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
  402220:	d016      	beq.n	402250 <pio_set_peripheral+0x54>
  402222:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
  402226:	d02c      	beq.n	402282 <pio_set_peripheral+0x86>
  402228:	2b00      	cmp	r3, #0
  40222a:	d069      	beq.n	402300 <pio_set_peripheral+0x104>
  40222c:	e064      	b.n	4022f8 <pio_set_peripheral+0xfc>
  40222e:	f1b3 5f20 	cmp.w	r3, #671088640	; 0x28000000
  402232:	d065      	beq.n	402300 <pio_set_peripheral+0x104>
  402234:	f1b3 5f20 	cmp.w	r3, #671088640	; 0x28000000
  402238:	d803      	bhi.n	402242 <pio_set_peripheral+0x46>
  40223a:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
  40223e:	d04a      	beq.n	4022d6 <pio_set_peripheral+0xda>
  402240:	e05a      	b.n	4022f8 <pio_set_peripheral+0xfc>
  402242:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
  402246:	d05b      	beq.n	402300 <pio_set_peripheral+0x104>
  402248:	f1b3 5f60 	cmp.w	r3, #939524096	; 0x38000000
  40224c:	d058      	beq.n	402300 <pio_set_peripheral+0x104>
  40224e:	e053      	b.n	4022f8 <pio_set_peripheral+0xfc>
	case PIO_PERIPH_A:
		ul_sr = p_pio->PIO_ABCDSR[0];
  402250:	68fb      	ldr	r3, [r7, #12]
  402252:	6f1b      	ldr	r3, [r3, #112]	; 0x70
  402254:	617b      	str	r3, [r7, #20]
		p_pio->PIO_ABCDSR[0] &= (~ul_mask & ul_sr);
  402256:	68fb      	ldr	r3, [r7, #12]
  402258:	6f1a      	ldr	r2, [r3, #112]	; 0x70
  40225a:	687b      	ldr	r3, [r7, #4]
  40225c:	43d9      	mvns	r1, r3
  40225e:	697b      	ldr	r3, [r7, #20]
  402260:	400b      	ands	r3, r1
  402262:	401a      	ands	r2, r3
  402264:	68fb      	ldr	r3, [r7, #12]
  402266:	671a      	str	r2, [r3, #112]	; 0x70

		ul_sr = p_pio->PIO_ABCDSR[1];
  402268:	68fb      	ldr	r3, [r7, #12]
  40226a:	6f5b      	ldr	r3, [r3, #116]	; 0x74
  40226c:	617b      	str	r3, [r7, #20]
		p_pio->PIO_ABCDSR[1] &= (~ul_mask & ul_sr);
  40226e:	68fb      	ldr	r3, [r7, #12]
  402270:	6f5a      	ldr	r2, [r3, #116]	; 0x74
  402272:	687b      	ldr	r3, [r7, #4]
  402274:	43d9      	mvns	r1, r3
  402276:	697b      	ldr	r3, [r7, #20]
  402278:	400b      	ands	r3, r1
  40227a:	401a      	ands	r2, r3
  40227c:	68fb      	ldr	r3, [r7, #12]
  40227e:	675a      	str	r2, [r3, #116]	; 0x74
		break;
  402280:	e03a      	b.n	4022f8 <pio_set_peripheral+0xfc>
	case PIO_PERIPH_B:
		ul_sr = p_pio->PIO_ABCDSR[0];
  402282:	68fb      	ldr	r3, [r7, #12]
  402284:	6f1b      	ldr	r3, [r3, #112]	; 0x70
  402286:	617b      	str	r3, [r7, #20]
		p_pio->PIO_ABCDSR[0] = (ul_mask | ul_sr);
  402288:	687a      	ldr	r2, [r7, #4]
  40228a:	697b      	ldr	r3, [r7, #20]
  40228c:	431a      	orrs	r2, r3
  40228e:	68fb      	ldr	r3, [r7, #12]
  402290:	671a      	str	r2, [r3, #112]	; 0x70

		ul_sr = p_pio->PIO_ABCDSR[1];
  402292:	68fb      	ldr	r3, [r7, #12]
  402294:	6f5b      	ldr	r3, [r3, #116]	; 0x74
  402296:	617b      	str	r3, [r7, #20]
		p_pio->PIO_ABCDSR[1] &= (~ul_mask & ul_sr);
  402298:	68fb      	ldr	r3, [r7, #12]
  40229a:	6f5a      	ldr	r2, [r3, #116]	; 0x74
  40229c:	687b      	ldr	r3, [r7, #4]
  40229e:	43d9      	mvns	r1, r3
  4022a0:	697b      	ldr	r3, [r7, #20]
  4022a2:	400b      	ands	r3, r1
  4022a4:	401a      	ands	r2, r3
  4022a6:	68fb      	ldr	r3, [r7, #12]
  4022a8:	675a      	str	r2, [r3, #116]	; 0x74
		break;
  4022aa:	e025      	b.n	4022f8 <pio_set_peripheral+0xfc>
#if (!SAMG)
	case PIO_PERIPH_C:
		ul_sr = p_pio->PIO_ABCDSR[0];
  4022ac:	68fb      	ldr	r3, [r7, #12]
  4022ae:	6f1b      	ldr	r3, [r3, #112]	; 0x70
  4022b0:	617b      	str	r3, [r7, #20]
		p_pio->PIO_ABCDSR[0] &= (~ul_mask & ul_sr);
  4022b2:	68fb      	ldr	r3, [r7, #12]
  4022b4:	6f1a      	ldr	r2, [r3, #112]	; 0x70
  4022b6:	687b      	ldr	r3, [r7, #4]
  4022b8:	43d9      	mvns	r1, r3
  4022ba:	697b      	ldr	r3, [r7, #20]
  4022bc:	400b      	ands	r3, r1
  4022be:	401a      	ands	r2, r3
  4022c0:	68fb      	ldr	r3, [r7, #12]
  4022c2:	671a      	str	r2, [r3, #112]	; 0x70

		ul_sr = p_pio->PIO_ABCDSR[1];
  4022c4:	68fb      	ldr	r3, [r7, #12]
  4022c6:	6f5b      	ldr	r3, [r3, #116]	; 0x74
  4022c8:	617b      	str	r3, [r7, #20]
		p_pio->PIO_ABCDSR[1] = (ul_mask | ul_sr);
  4022ca:	687a      	ldr	r2, [r7, #4]
  4022cc:	697b      	ldr	r3, [r7, #20]
  4022ce:	431a      	orrs	r2, r3
  4022d0:	68fb      	ldr	r3, [r7, #12]
  4022d2:	675a      	str	r2, [r3, #116]	; 0x74
		break;
  4022d4:	e010      	b.n	4022f8 <pio_set_peripheral+0xfc>
	case PIO_PERIPH_D:
		ul_sr = p_pio->PIO_ABCDSR[0];
  4022d6:	68fb      	ldr	r3, [r7, #12]
  4022d8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
  4022da:	617b      	str	r3, [r7, #20]
		p_pio->PIO_ABCDSR[0] = (ul_mask | ul_sr);
  4022dc:	687a      	ldr	r2, [r7, #4]
  4022de:	697b      	ldr	r3, [r7, #20]
  4022e0:	431a      	orrs	r2, r3
  4022e2:	68fb      	ldr	r3, [r7, #12]
  4022e4:	671a      	str	r2, [r3, #112]	; 0x70

		ul_sr = p_pio->PIO_ABCDSR[1];
  4022e6:	68fb      	ldr	r3, [r7, #12]
  4022e8:	6f5b      	ldr	r3, [r3, #116]	; 0x74
  4022ea:	617b      	str	r3, [r7, #20]
		p_pio->PIO_ABCDSR[1] = (ul_mask | ul_sr);
  4022ec:	687a      	ldr	r2, [r7, #4]
  4022ee:	697b      	ldr	r3, [r7, #20]
  4022f0:	431a      	orrs	r2, r3
  4022f2:	68fb      	ldr	r3, [r7, #12]
  4022f4:	675a      	str	r2, [r3, #116]	; 0x74
		break;
  4022f6:	bf00      	nop
#else
#error "Unsupported device"
#endif

	/* Remove the pins from under the control of PIO */
	p_pio->PIO_PDR = ul_mask;
  4022f8:	68fb      	ldr	r3, [r7, #12]
  4022fa:	687a      	ldr	r2, [r7, #4]
  4022fc:	605a      	str	r2, [r3, #4]
  4022fe:	e000      	b.n	402302 <pio_set_peripheral+0x106>
		return;
  402300:	bf00      	nop
}
  402302:	371c      	adds	r7, #28
  402304:	46bd      	mov	sp, r7
  402306:	f85d 7b04 	ldr.w	r7, [sp], #4
  40230a:	4770      	bx	lr

0040230c <pio_set_input>:
 * \param ul_mask Bitmask indicating which pin(s) to configure as input(s).
 * \param ul_attribute PIO attribute(s).
 */
void pio_set_input(Pio *p_pio, const uint32_t ul_mask,
		const uint32_t ul_attribute)
{
  40230c:	b580      	push	{r7, lr}
  40230e:	b084      	sub	sp, #16
  402310:	af00      	add	r7, sp, #0
  402312:	60f8      	str	r0, [r7, #12]
  402314:	60b9      	str	r1, [r7, #8]
  402316:	607a      	str	r2, [r7, #4]
	pio_disable_interrupt(p_pio, ul_mask);
  402318:	68b9      	ldr	r1, [r7, #8]
  40231a:	68f8      	ldr	r0, [r7, #12]
  40231c:	4b19      	ldr	r3, [pc, #100]	; (402384 <pio_set_input+0x78>)
  40231e:	4798      	blx	r3
	pio_pull_up(p_pio, ul_mask, ul_attribute & PIO_PULLUP);
  402320:	687b      	ldr	r3, [r7, #4]
  402322:	f003 0301 	and.w	r3, r3, #1
  402326:	461a      	mov	r2, r3
  402328:	68b9      	ldr	r1, [r7, #8]
  40232a:	68f8      	ldr	r0, [r7, #12]
  40232c:	4b16      	ldr	r3, [pc, #88]	; (402388 <pio_set_input+0x7c>)
  40232e:	4798      	blx	r3

	/* Enable Input Filter if necessary */
	if (ul_attribute & (PIO_DEGLITCH | PIO_DEBOUNCE)) {
  402330:	687b      	ldr	r3, [r7, #4]
  402332:	f003 030a 	and.w	r3, r3, #10
  402336:	2b00      	cmp	r3, #0
  402338:	d003      	beq.n	402342 <pio_set_input+0x36>
		p_pio->PIO_IFER = ul_mask;
  40233a:	68fb      	ldr	r3, [r7, #12]
  40233c:	68ba      	ldr	r2, [r7, #8]
  40233e:	621a      	str	r2, [r3, #32]
  402340:	e002      	b.n	402348 <pio_set_input+0x3c>
	} else {
		p_pio->PIO_IFDR = ul_mask;
  402342:	68fb      	ldr	r3, [r7, #12]
  402344:	68ba      	ldr	r2, [r7, #8]
  402346:	625a      	str	r2, [r3, #36]	; 0x24
	}

#if (SAM3S || SAM3N || SAM4S || SAM4E || SAM4N || SAM4C || SAMG || SAM4CP || SAM4CM || SAMV71 || SAMV70 || SAME70 || SAMS70)
	/* Enable de-glitch or de-bounce if necessary */
	if (ul_attribute & PIO_DEGLITCH) {
  402348:	687b      	ldr	r3, [r7, #4]
  40234a:	f003 0302 	and.w	r3, r3, #2
  40234e:	2b00      	cmp	r3, #0
  402350:	d004      	beq.n	40235c <pio_set_input+0x50>
		p_pio->PIO_IFSCDR = ul_mask;
  402352:	68fb      	ldr	r3, [r7, #12]
  402354:	68ba      	ldr	r2, [r7, #8]
  402356:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
  40235a:	e008      	b.n	40236e <pio_set_input+0x62>
	} else {
		if (ul_attribute & PIO_DEBOUNCE) {
  40235c:	687b      	ldr	r3, [r7, #4]
  40235e:	f003 0308 	and.w	r3, r3, #8
  402362:	2b00      	cmp	r3, #0
  402364:	d003      	beq.n	40236e <pio_set_input+0x62>
			p_pio->PIO_IFSCER = ul_mask;
  402366:	68fb      	ldr	r3, [r7, #12]
  402368:	68ba      	ldr	r2, [r7, #8]
  40236a:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
#else
#error "Unsupported device"
#endif

	/* Configure pin as input */
	p_pio->PIO_ODR = ul_mask;
  40236e:	68fb      	ldr	r3, [r7, #12]
  402370:	68ba      	ldr	r2, [r7, #8]
  402372:	615a      	str	r2, [r3, #20]
	p_pio->PIO_PER = ul_mask;
  402374:	68fb      	ldr	r3, [r7, #12]
  402376:	68ba      	ldr	r2, [r7, #8]
  402378:	601a      	str	r2, [r3, #0]
}
  40237a:	bf00      	nop
  40237c:	3710      	adds	r7, #16
  40237e:	46bd      	mov	sp, r7
  402380:	bd80      	pop	{r7, pc}
  402382:	bf00      	nop
  402384:	0040256d 	.word	0x0040256d
  402388:	00402199 	.word	0x00402199

0040238c <pio_set_output>:
 */
void pio_set_output(Pio *p_pio, const uint32_t ul_mask,
		const uint32_t ul_default_level,
		const uint32_t ul_multidrive_enable,
		const uint32_t ul_pull_up_enable)
{
  40238c:	b580      	push	{r7, lr}
  40238e:	b084      	sub	sp, #16
  402390:	af00      	add	r7, sp, #0
  402392:	60f8      	str	r0, [r7, #12]
  402394:	60b9      	str	r1, [r7, #8]
  402396:	607a      	str	r2, [r7, #4]
  402398:	603b      	str	r3, [r7, #0]
	pio_disable_interrupt(p_pio, ul_mask);
  40239a:	68b9      	ldr	r1, [r7, #8]
  40239c:	68f8      	ldr	r0, [r7, #12]
  40239e:	4b12      	ldr	r3, [pc, #72]	; (4023e8 <pio_set_output+0x5c>)
  4023a0:	4798      	blx	r3
	pio_pull_up(p_pio, ul_mask, ul_pull_up_enable);
  4023a2:	69ba      	ldr	r2, [r7, #24]
  4023a4:	68b9      	ldr	r1, [r7, #8]
  4023a6:	68f8      	ldr	r0, [r7, #12]
  4023a8:	4b10      	ldr	r3, [pc, #64]	; (4023ec <pio_set_output+0x60>)
  4023aa:	4798      	blx	r3

	/* Enable multi-drive if necessary */
	if (ul_multidrive_enable) {
  4023ac:	683b      	ldr	r3, [r7, #0]
  4023ae:	2b00      	cmp	r3, #0
  4023b0:	d003      	beq.n	4023ba <pio_set_output+0x2e>
		p_pio->PIO_MDER = ul_mask;
  4023b2:	68fb      	ldr	r3, [r7, #12]
  4023b4:	68ba      	ldr	r2, [r7, #8]
  4023b6:	651a      	str	r2, [r3, #80]	; 0x50
  4023b8:	e002      	b.n	4023c0 <pio_set_output+0x34>
	} else {
		p_pio->PIO_MDDR = ul_mask;
  4023ba:	68fb      	ldr	r3, [r7, #12]
  4023bc:	68ba      	ldr	r2, [r7, #8]
  4023be:	655a      	str	r2, [r3, #84]	; 0x54
	}

	/* Set default value */
	if (ul_default_level) {
  4023c0:	687b      	ldr	r3, [r7, #4]
  4023c2:	2b00      	cmp	r3, #0
  4023c4:	d003      	beq.n	4023ce <pio_set_output+0x42>
		p_pio->PIO_SODR = ul_mask;
  4023c6:	68fb      	ldr	r3, [r7, #12]
  4023c8:	68ba      	ldr	r2, [r7, #8]
  4023ca:	631a      	str	r2, [r3, #48]	; 0x30
  4023cc:	e002      	b.n	4023d4 <pio_set_output+0x48>
	} else {
		p_pio->PIO_CODR = ul_mask;
  4023ce:	68fb      	ldr	r3, [r7, #12]
  4023d0:	68ba      	ldr	r2, [r7, #8]
  4023d2:	635a      	str	r2, [r3, #52]	; 0x34
	}

	/* Configure pin(s) as output(s) */
	p_pio->PIO_OER = ul_mask;
  4023d4:	68fb      	ldr	r3, [r7, #12]
  4023d6:	68ba      	ldr	r2, [r7, #8]
  4023d8:	611a      	str	r2, [r3, #16]
	p_pio->PIO_PER = ul_mask;
  4023da:	68fb      	ldr	r3, [r7, #12]
  4023dc:	68ba      	ldr	r2, [r7, #8]
  4023de:	601a      	str	r2, [r3, #0]
}
  4023e0:	bf00      	nop
  4023e2:	3710      	adds	r7, #16
  4023e4:	46bd      	mov	sp, r7
  4023e6:	bd80      	pop	{r7, pc}
  4023e8:	0040256d 	.word	0x0040256d
  4023ec:	00402199 	.word	0x00402199

004023f0 <pio_configure>:
 *
 * \return Whether the pin(s) have been configured properly.
 */
uint32_t pio_configure(Pio *p_pio, const pio_type_t ul_type,
		const uint32_t ul_mask, const uint32_t ul_attribute)
{
  4023f0:	b590      	push	{r4, r7, lr}
  4023f2:	b087      	sub	sp, #28
  4023f4:	af02      	add	r7, sp, #8
  4023f6:	60f8      	str	r0, [r7, #12]
  4023f8:	60b9      	str	r1, [r7, #8]
  4023fa:	607a      	str	r2, [r7, #4]
  4023fc:	603b      	str	r3, [r7, #0]
	/* Configure pins */
	switch (ul_type) {
  4023fe:	68bb      	ldr	r3, [r7, #8]
  402400:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
  402404:	d016      	beq.n	402434 <pio_configure+0x44>
  402406:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
  40240a:	d809      	bhi.n	402420 <pio_configure+0x30>
  40240c:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
  402410:	d010      	beq.n	402434 <pio_configure+0x44>
  402412:	f1b3 5fc0 	cmp.w	r3, #402653184	; 0x18000000
  402416:	d00d      	beq.n	402434 <pio_configure+0x44>
  402418:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
  40241c:	d00a      	beq.n	402434 <pio_configure+0x44>
  40241e:	e03d      	b.n	40249c <pio_configure+0xac>
  402420:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
  402424:	d01a      	beq.n	40245c <pio_configure+0x6c>
  402426:	f1b3 5f60 	cmp.w	r3, #939524096	; 0x38000000
  40242a:	d017      	beq.n	40245c <pio_configure+0x6c>
  40242c:	f1b3 5f20 	cmp.w	r3, #671088640	; 0x28000000
  402430:	d00e      	beq.n	402450 <pio_configure+0x60>
  402432:	e033      	b.n	40249c <pio_configure+0xac>
	case PIO_PERIPH_B:
#if (SAM3S || SAM3N || SAM4S || SAM4E || SAM4N || SAM4C || SAM4CP || SAM4CM || SAMV71 || SAMV70 || SAME70 || SAMS70)
	case PIO_PERIPH_C:
	case PIO_PERIPH_D:
#endif
		pio_set_peripheral(p_pio, ul_type, ul_mask);
  402434:	687a      	ldr	r2, [r7, #4]
  402436:	68b9      	ldr	r1, [r7, #8]
  402438:	68f8      	ldr	r0, [r7, #12]
  40243a:	4b1c      	ldr	r3, [pc, #112]	; (4024ac <pio_configure+0xbc>)
  40243c:	4798      	blx	r3
		pio_pull_up(p_pio, ul_mask, (ul_attribute & PIO_PULLUP));
  40243e:	683b      	ldr	r3, [r7, #0]
  402440:	f003 0301 	and.w	r3, r3, #1
  402444:	461a      	mov	r2, r3
  402446:	6879      	ldr	r1, [r7, #4]
  402448:	68f8      	ldr	r0, [r7, #12]
  40244a:	4b19      	ldr	r3, [pc, #100]	; (4024b0 <pio_configure+0xc0>)
  40244c:	4798      	blx	r3
		break;
  40244e:	e027      	b.n	4024a0 <pio_configure+0xb0>

	case PIO_INPUT:
		pio_set_input(p_pio, ul_mask, ul_attribute);
  402450:	683a      	ldr	r2, [r7, #0]
  402452:	6879      	ldr	r1, [r7, #4]
  402454:	68f8      	ldr	r0, [r7, #12]
  402456:	4b17      	ldr	r3, [pc, #92]	; (4024b4 <pio_configure+0xc4>)
  402458:	4798      	blx	r3
		break;
  40245a:	e021      	b.n	4024a0 <pio_configure+0xb0>

	case PIO_OUTPUT_0:
	case PIO_OUTPUT_1:
		pio_set_output(p_pio, ul_mask, (ul_type == PIO_OUTPUT_1),
  40245c:	68bb      	ldr	r3, [r7, #8]
  40245e:	f1b3 5f60 	cmp.w	r3, #939524096	; 0x38000000
  402462:	bf0c      	ite	eq
  402464:	2301      	moveq	r3, #1
  402466:	2300      	movne	r3, #0
  402468:	b2db      	uxtb	r3, r3
  40246a:	461a      	mov	r2, r3
				(ul_attribute & PIO_OPENDRAIN) ? 1 : 0,
  40246c:	683b      	ldr	r3, [r7, #0]
  40246e:	f003 0304 	and.w	r3, r3, #4
		pio_set_output(p_pio, ul_mask, (ul_type == PIO_OUTPUT_1),
  402472:	2b00      	cmp	r3, #0
  402474:	bf14      	ite	ne
  402476:	2301      	movne	r3, #1
  402478:	2300      	moveq	r3, #0
  40247a:	b2db      	uxtb	r3, r3
  40247c:	4619      	mov	r1, r3
				(ul_attribute & PIO_PULLUP) ? 1 : 0);
  40247e:	683b      	ldr	r3, [r7, #0]
  402480:	f003 0301 	and.w	r3, r3, #1
		pio_set_output(p_pio, ul_mask, (ul_type == PIO_OUTPUT_1),
  402484:	2b00      	cmp	r3, #0
  402486:	bf14      	ite	ne
  402488:	2301      	movne	r3, #1
  40248a:	2300      	moveq	r3, #0
  40248c:	b2db      	uxtb	r3, r3
  40248e:	9300      	str	r3, [sp, #0]
  402490:	460b      	mov	r3, r1
  402492:	6879      	ldr	r1, [r7, #4]
  402494:	68f8      	ldr	r0, [r7, #12]
  402496:	4c08      	ldr	r4, [pc, #32]	; (4024b8 <pio_configure+0xc8>)
  402498:	47a0      	blx	r4
		break;
  40249a:	e001      	b.n	4024a0 <pio_configure+0xb0>

	default:
		return 0;
  40249c:	2300      	movs	r3, #0
  40249e:	e000      	b.n	4024a2 <pio_configure+0xb2>
	}

	return 1;
  4024a0:	2301      	movs	r3, #1
}
  4024a2:	4618      	mov	r0, r3
  4024a4:	3714      	adds	r7, #20
  4024a6:	46bd      	mov	sp, r7
  4024a8:	bd90      	pop	{r4, r7, pc}
  4024aa:	bf00      	nop
  4024ac:	004021fd 	.word	0x004021fd
  4024b0:	00402199 	.word	0x00402199
  4024b4:	0040230d 	.word	0x0040230d
  4024b8:	0040238d 	.word	0x0040238d

004024bc <pio_get_output_data_status>:
 * \retval 1 At least one PIO is configured to output a high level.
 * \retval 0 All PIOs are configured to output a low level.
 */
uint32_t pio_get_output_data_status(const Pio *p_pio,
		const uint32_t ul_mask)
{
  4024bc:	b480      	push	{r7}
  4024be:	b083      	sub	sp, #12
  4024c0:	af00      	add	r7, sp, #0
  4024c2:	6078      	str	r0, [r7, #4]
  4024c4:	6039      	str	r1, [r7, #0]
	if ((p_pio->PIO_ODSR & ul_mask) == 0) {
  4024c6:	687b      	ldr	r3, [r7, #4]
  4024c8:	6b9a      	ldr	r2, [r3, #56]	; 0x38
  4024ca:	683b      	ldr	r3, [r7, #0]
  4024cc:	4013      	ands	r3, r2
  4024ce:	2b00      	cmp	r3, #0
  4024d0:	d101      	bne.n	4024d6 <pio_get_output_data_status+0x1a>
		return 0;
  4024d2:	2300      	movs	r3, #0
  4024d4:	e000      	b.n	4024d8 <pio_get_output_data_status+0x1c>
	} else {
		return 1;
  4024d6:	2301      	movs	r3, #1
	}
}
  4024d8:	4618      	mov	r0, r3
  4024da:	370c      	adds	r7, #12
  4024dc:	46bd      	mov	sp, r7
  4024de:	f85d 7b04 	ldr.w	r7, [sp], #4
  4024e2:	4770      	bx	lr

004024e4 <pio_configure_interrupt>:
 * \param ul_mask Interrupt source bit map.
 * \param ul_attr Interrupt source attributes.
 */
void pio_configure_interrupt(Pio *p_pio, const uint32_t ul_mask,
		const uint32_t ul_attr)
{
  4024e4:	b480      	push	{r7}
  4024e6:	b085      	sub	sp, #20
  4024e8:	af00      	add	r7, sp, #0
  4024ea:	60f8      	str	r0, [r7, #12]
  4024ec:	60b9      	str	r1, [r7, #8]
  4024ee:	607a      	str	r2, [r7, #4]
	/* Configure additional interrupt mode registers. */
	if (ul_attr & PIO_IT_AIME) {
  4024f0:	687b      	ldr	r3, [r7, #4]
  4024f2:	f003 0310 	and.w	r3, r3, #16
  4024f6:	2b00      	cmp	r3, #0
  4024f8:	d020      	beq.n	40253c <pio_configure_interrupt+0x58>
		/* Enable additional interrupt mode. */
		p_pio->PIO_AIMER = ul_mask;
  4024fa:	68fb      	ldr	r3, [r7, #12]
  4024fc:	68ba      	ldr	r2, [r7, #8]
  4024fe:	f8c3 20b0 	str.w	r2, [r3, #176]	; 0xb0

		/* If bit field of the selected pin is 1, set as
		   Rising Edge/High level detection event. */
		if (ul_attr & PIO_IT_RE_OR_HL) {
  402502:	687b      	ldr	r3, [r7, #4]
  402504:	f003 0320 	and.w	r3, r3, #32
  402508:	2b00      	cmp	r3, #0
  40250a:	d004      	beq.n	402516 <pio_configure_interrupt+0x32>
			/* Rising Edge or High Level */
			p_pio->PIO_REHLSR = ul_mask;
  40250c:	68fb      	ldr	r3, [r7, #12]
  40250e:	68ba      	ldr	r2, [r7, #8]
  402510:	f8c3 20d4 	str.w	r2, [r3, #212]	; 0xd4
  402514:	e003      	b.n	40251e <pio_configure_interrupt+0x3a>
		} else {
			/* Falling Edge or Low Level */
			p_pio->PIO_FELLSR = ul_mask;
  402516:	68fb      	ldr	r3, [r7, #12]
  402518:	68ba      	ldr	r2, [r7, #8]
  40251a:	f8c3 20d0 	str.w	r2, [r3, #208]	; 0xd0
		}

		/* If bit field of the selected pin is 1, set as
		   edge detection source. */
		if (ul_attr & PIO_IT_EDGE) {
  40251e:	687b      	ldr	r3, [r7, #4]
  402520:	f003 0340 	and.w	r3, r3, #64	; 0x40
  402524:	2b00      	cmp	r3, #0
  402526:	d004      	beq.n	402532 <pio_configure_interrupt+0x4e>
			/* Edge select */
			p_pio->PIO_ESR = ul_mask;
  402528:	68fb      	ldr	r3, [r7, #12]
  40252a:	68ba      	ldr	r2, [r7, #8]
  40252c:	f8c3 20c0 	str.w	r2, [r3, #192]	; 0xc0
		}
	} else {
		/* Disable additional interrupt mode. */
		p_pio->PIO_AIMDR = ul_mask;
	}
}
  402530:	e008      	b.n	402544 <pio_configure_interrupt+0x60>
			p_pio->PIO_LSR = ul_mask;
  402532:	68fb      	ldr	r3, [r7, #12]
  402534:	68ba      	ldr	r2, [r7, #8]
  402536:	f8c3 20c4 	str.w	r2, [r3, #196]	; 0xc4
}
  40253a:	e003      	b.n	402544 <pio_configure_interrupt+0x60>
		p_pio->PIO_AIMDR = ul_mask;
  40253c:	68fb      	ldr	r3, [r7, #12]
  40253e:	68ba      	ldr	r2, [r7, #8]
  402540:	f8c3 20b4 	str.w	r2, [r3, #180]	; 0xb4
}
  402544:	bf00      	nop
  402546:	3714      	adds	r7, #20
  402548:	46bd      	mov	sp, r7
  40254a:	f85d 7b04 	ldr.w	r7, [sp], #4
  40254e:	4770      	bx	lr

00402550 <pio_enable_interrupt>:
 *
 * \param p_pio Pointer to a PIO instance.
 * \param ul_mask Interrupt sources bit map.
 */
void pio_enable_interrupt(Pio *p_pio, const uint32_t ul_mask)
{
  402550:	b480      	push	{r7}
  402552:	b083      	sub	sp, #12
  402554:	af00      	add	r7, sp, #0
  402556:	6078      	str	r0, [r7, #4]
  402558:	6039      	str	r1, [r7, #0]
	p_pio->PIO_IER = ul_mask;
  40255a:	687b      	ldr	r3, [r7, #4]
  40255c:	683a      	ldr	r2, [r7, #0]
  40255e:	641a      	str	r2, [r3, #64]	; 0x40
}
  402560:	bf00      	nop
  402562:	370c      	adds	r7, #12
  402564:	46bd      	mov	sp, r7
  402566:	f85d 7b04 	ldr.w	r7, [sp], #4
  40256a:	4770      	bx	lr

0040256c <pio_disable_interrupt>:
 *
 * \param p_pio Pointer to a PIO instance.
 * \param ul_mask Interrupt sources bit map.
 */
void pio_disable_interrupt(Pio *p_pio, const uint32_t ul_mask)
{
  40256c:	b480      	push	{r7}
  40256e:	b083      	sub	sp, #12
  402570:	af00      	add	r7, sp, #0
  402572:	6078      	str	r0, [r7, #4]
  402574:	6039      	str	r1, [r7, #0]
	p_pio->PIO_IDR = ul_mask;
  402576:	687b      	ldr	r3, [r7, #4]
  402578:	683a      	ldr	r2, [r7, #0]
  40257a:	645a      	str	r2, [r3, #68]	; 0x44
}
  40257c:	bf00      	nop
  40257e:	370c      	adds	r7, #12
  402580:	46bd      	mov	sp, r7
  402582:	f85d 7b04 	ldr.w	r7, [sp], #4
  402586:	4770      	bx	lr

00402588 <pio_get_interrupt_status>:
 * \param p_pio Pointer to a PIO instance.
 *
 * \return The interrupt status value.
 */
uint32_t pio_get_interrupt_status(const Pio *p_pio)
{
  402588:	b480      	push	{r7}
  40258a:	b083      	sub	sp, #12
  40258c:	af00      	add	r7, sp, #0
  40258e:	6078      	str	r0, [r7, #4]
	return p_pio->PIO_ISR;
  402590:	687b      	ldr	r3, [r7, #4]
  402592:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
}
  402594:	4618      	mov	r0, r3
  402596:	370c      	adds	r7, #12
  402598:	46bd      	mov	sp, r7
  40259a:	f85d 7b04 	ldr.w	r7, [sp], #4
  40259e:	4770      	bx	lr

004025a0 <pio_get_interrupt_mask>:
 * \param p_pio Pointer to a PIO instance.
 *
 * \return The interrupt mask value.
 */
uint32_t pio_get_interrupt_mask(const Pio *p_pio)
{
  4025a0:	b480      	push	{r7}
  4025a2:	b083      	sub	sp, #12
  4025a4:	af00      	add	r7, sp, #0
  4025a6:	6078      	str	r0, [r7, #4]
	return p_pio->PIO_IMR;
  4025a8:	687b      	ldr	r3, [r7, #4]
  4025aa:	6c9b      	ldr	r3, [r3, #72]	; 0x48
}
  4025ac:	4618      	mov	r0, r3
  4025ae:	370c      	adds	r7, #12
  4025b0:	46bd      	mov	sp, r7
  4025b2:	f85d 7b04 	ldr.w	r7, [sp], #4
  4025b6:	4770      	bx	lr

004025b8 <pio_handler_process>:
 *
 * \param p_pio PIO controller base address.
 * \param ul_id PIO controller ID.
 */
void pio_handler_process(Pio *p_pio, uint32_t ul_id)
{
  4025b8:	b580      	push	{r7, lr}
  4025ba:	b084      	sub	sp, #16
  4025bc:	af00      	add	r7, sp, #0
  4025be:	6078      	str	r0, [r7, #4]
  4025c0:	6039      	str	r1, [r7, #0]
	uint32_t status;
	uint32_t i;

	/* Read PIO controller status */
	status = pio_get_interrupt_status(p_pio);
  4025c2:	6878      	ldr	r0, [r7, #4]
  4025c4:	4b26      	ldr	r3, [pc, #152]	; (402660 <pio_handler_process+0xa8>)
  4025c6:	4798      	blx	r3
  4025c8:	60f8      	str	r0, [r7, #12]
	status &= pio_get_interrupt_mask(p_pio);
  4025ca:	6878      	ldr	r0, [r7, #4]
  4025cc:	4b25      	ldr	r3, [pc, #148]	; (402664 <pio_handler_process+0xac>)
  4025ce:	4798      	blx	r3
  4025d0:	4602      	mov	r2, r0
  4025d2:	68fb      	ldr	r3, [r7, #12]
  4025d4:	4013      	ands	r3, r2
  4025d6:	60fb      	str	r3, [r7, #12]

	/* Check pending events */
	if (status != 0) {
  4025d8:	68fb      	ldr	r3, [r7, #12]
  4025da:	2b00      	cmp	r3, #0
  4025dc:	d03c      	beq.n	402658 <pio_handler_process+0xa0>
		/* Find triggering source */
		i = 0;
  4025de:	2300      	movs	r3, #0
  4025e0:	60bb      	str	r3, [r7, #8]
		while (status != 0) {
  4025e2:	e034      	b.n	40264e <pio_handler_process+0x96>
			/* Source is configured on the same controller */
			if (gs_interrupt_sources[i].id == ul_id) {
  4025e4:	4a20      	ldr	r2, [pc, #128]	; (402668 <pio_handler_process+0xb0>)
  4025e6:	68bb      	ldr	r3, [r7, #8]
  4025e8:	011b      	lsls	r3, r3, #4
  4025ea:	4413      	add	r3, r2
  4025ec:	681a      	ldr	r2, [r3, #0]
  4025ee:	683b      	ldr	r3, [r7, #0]
  4025f0:	429a      	cmp	r2, r3
  4025f2:	d126      	bne.n	402642 <pio_handler_process+0x8a>
				/* Source has PIOs whose statuses have changed */
				if ((status & gs_interrupt_sources[i].mask) != 0) {
  4025f4:	4a1c      	ldr	r2, [pc, #112]	; (402668 <pio_handler_process+0xb0>)
  4025f6:	68bb      	ldr	r3, [r7, #8]
  4025f8:	011b      	lsls	r3, r3, #4
  4025fa:	4413      	add	r3, r2
  4025fc:	3304      	adds	r3, #4
  4025fe:	681a      	ldr	r2, [r3, #0]
  402600:	68fb      	ldr	r3, [r7, #12]
  402602:	4013      	ands	r3, r2
  402604:	2b00      	cmp	r3, #0
  402606:	d01c      	beq.n	402642 <pio_handler_process+0x8a>
					gs_interrupt_sources[i].handler(gs_interrupt_sources[i].id,
  402608:	4a17      	ldr	r2, [pc, #92]	; (402668 <pio_handler_process+0xb0>)
  40260a:	68bb      	ldr	r3, [r7, #8]
  40260c:	011b      	lsls	r3, r3, #4
  40260e:	4413      	add	r3, r2
  402610:	330c      	adds	r3, #12
  402612:	681b      	ldr	r3, [r3, #0]
  402614:	4914      	ldr	r1, [pc, #80]	; (402668 <pio_handler_process+0xb0>)
  402616:	68ba      	ldr	r2, [r7, #8]
  402618:	0112      	lsls	r2, r2, #4
  40261a:	440a      	add	r2, r1
  40261c:	6810      	ldr	r0, [r2, #0]
  40261e:	4912      	ldr	r1, [pc, #72]	; (402668 <pio_handler_process+0xb0>)
  402620:	68ba      	ldr	r2, [r7, #8]
  402622:	0112      	lsls	r2, r2, #4
  402624:	440a      	add	r2, r1
  402626:	3204      	adds	r2, #4
  402628:	6812      	ldr	r2, [r2, #0]
  40262a:	4611      	mov	r1, r2
  40262c:	4798      	blx	r3
							gs_interrupt_sources[i].mask);
					status &= ~(gs_interrupt_sources[i].mask);
  40262e:	4a0e      	ldr	r2, [pc, #56]	; (402668 <pio_handler_process+0xb0>)
  402630:	68bb      	ldr	r3, [r7, #8]
  402632:	011b      	lsls	r3, r3, #4
  402634:	4413      	add	r3, r2
  402636:	3304      	adds	r3, #4
  402638:	681b      	ldr	r3, [r3, #0]
  40263a:	43db      	mvns	r3, r3
  40263c:	68fa      	ldr	r2, [r7, #12]
  40263e:	4013      	ands	r3, r2
  402640:	60fb      	str	r3, [r7, #12]
				}
			}
			i++;
  402642:	68bb      	ldr	r3, [r7, #8]
  402644:	3301      	adds	r3, #1
  402646:	60bb      	str	r3, [r7, #8]
			if (i >= MAX_INTERRUPT_SOURCES) {
  402648:	68bb      	ldr	r3, [r7, #8]
  40264a:	2b06      	cmp	r3, #6
  40264c:	d803      	bhi.n	402656 <pio_handler_process+0x9e>
		while (status != 0) {
  40264e:	68fb      	ldr	r3, [r7, #12]
  402650:	2b00      	cmp	r3, #0
  402652:	d1c7      	bne.n	4025e4 <pio_handler_process+0x2c>
		if (pio_capture_handler) {
			pio_capture_handler(p_pio);
		}
	}
#endif
}
  402654:	e000      	b.n	402658 <pio_handler_process+0xa0>
				break;
  402656:	bf00      	nop
}
  402658:	bf00      	nop
  40265a:	3710      	adds	r7, #16
  40265c:	46bd      	mov	sp, r7
  40265e:	bd80      	pop	{r7, pc}
  402660:	00402589 	.word	0x00402589
  402664:	004025a1 	.word	0x004025a1
  402668:	20400670 	.word	0x20400670

0040266c <pio_handler_set>:
 *
 * \return 0 if successful, 1 if the maximum number of sources has been defined.
 */
uint32_t pio_handler_set(Pio *p_pio, uint32_t ul_id, uint32_t ul_mask,
		uint32_t ul_attr, void (*p_handler) (uint32_t, uint32_t))
{
  40266c:	b580      	push	{r7, lr}
  40266e:	b086      	sub	sp, #24
  402670:	af00      	add	r7, sp, #0
  402672:	60f8      	str	r0, [r7, #12]
  402674:	60b9      	str	r1, [r7, #8]
  402676:	607a      	str	r2, [r7, #4]
  402678:	603b      	str	r3, [r7, #0]
    uint8_t i;
	struct s_interrupt_source *pSource;

	if (gs_ul_nb_sources >= MAX_INTERRUPT_SOURCES)
  40267a:	4b21      	ldr	r3, [pc, #132]	; (402700 <pio_handler_set+0x94>)
  40267c:	681b      	ldr	r3, [r3, #0]
  40267e:	2b06      	cmp	r3, #6
  402680:	d901      	bls.n	402686 <pio_handler_set+0x1a>
		return 1;
  402682:	2301      	movs	r3, #1
  402684:	e038      	b.n	4026f8 <pio_handler_set+0x8c>

    /* Check interrupt for this pin, if already defined, redefine it. */
	for (i = 0; i <= gs_ul_nb_sources; i++) {
  402686:	2300      	movs	r3, #0
  402688:	75fb      	strb	r3, [r7, #23]
  40268a:	e011      	b.n	4026b0 <pio_handler_set+0x44>
		pSource = &(gs_interrupt_sources[i]);
  40268c:	7dfb      	ldrb	r3, [r7, #23]
  40268e:	011b      	lsls	r3, r3, #4
  402690:	4a1c      	ldr	r2, [pc, #112]	; (402704 <pio_handler_set+0x98>)
  402692:	4413      	add	r3, r2
  402694:	613b      	str	r3, [r7, #16]
		if (pSource->id == ul_id && pSource->mask == ul_mask) {
  402696:	693b      	ldr	r3, [r7, #16]
  402698:	681a      	ldr	r2, [r3, #0]
  40269a:	68bb      	ldr	r3, [r7, #8]
  40269c:	429a      	cmp	r2, r3
  40269e:	d104      	bne.n	4026aa <pio_handler_set+0x3e>
  4026a0:	693b      	ldr	r3, [r7, #16]
  4026a2:	685a      	ldr	r2, [r3, #4]
  4026a4:	687b      	ldr	r3, [r7, #4]
  4026a6:	429a      	cmp	r2, r3
  4026a8:	d008      	beq.n	4026bc <pio_handler_set+0x50>
	for (i = 0; i <= gs_ul_nb_sources; i++) {
  4026aa:	7dfb      	ldrb	r3, [r7, #23]
  4026ac:	3301      	adds	r3, #1
  4026ae:	75fb      	strb	r3, [r7, #23]
  4026b0:	7dfa      	ldrb	r2, [r7, #23]
  4026b2:	4b13      	ldr	r3, [pc, #76]	; (402700 <pio_handler_set+0x94>)
  4026b4:	681b      	ldr	r3, [r3, #0]
  4026b6:	429a      	cmp	r2, r3
  4026b8:	d9e8      	bls.n	40268c <pio_handler_set+0x20>
  4026ba:	e000      	b.n	4026be <pio_handler_set+0x52>
			break;
  4026bc:	bf00      	nop
		}
	}

	/* Define new source */
	pSource->id = ul_id;
  4026be:	693b      	ldr	r3, [r7, #16]
  4026c0:	68ba      	ldr	r2, [r7, #8]
  4026c2:	601a      	str	r2, [r3, #0]
	pSource->mask = ul_mask;
  4026c4:	693b      	ldr	r3, [r7, #16]
  4026c6:	687a      	ldr	r2, [r7, #4]
  4026c8:	605a      	str	r2, [r3, #4]
	pSource->attr = ul_attr;
  4026ca:	693b      	ldr	r3, [r7, #16]
  4026cc:	683a      	ldr	r2, [r7, #0]
  4026ce:	609a      	str	r2, [r3, #8]
	pSource->handler = p_handler;
  4026d0:	693b      	ldr	r3, [r7, #16]
  4026d2:	6a3a      	ldr	r2, [r7, #32]
  4026d4:	60da      	str	r2, [r3, #12]
	if (i == gs_ul_nb_sources + 1) {
  4026d6:	7dfa      	ldrb	r2, [r7, #23]
  4026d8:	4b09      	ldr	r3, [pc, #36]	; (402700 <pio_handler_set+0x94>)
  4026da:	681b      	ldr	r3, [r3, #0]
  4026dc:	3301      	adds	r3, #1
  4026de:	429a      	cmp	r2, r3
  4026e0:	d104      	bne.n	4026ec <pio_handler_set+0x80>
		gs_ul_nb_sources++;
  4026e2:	4b07      	ldr	r3, [pc, #28]	; (402700 <pio_handler_set+0x94>)
  4026e4:	681b      	ldr	r3, [r3, #0]
  4026e6:	3301      	adds	r3, #1
  4026e8:	4a05      	ldr	r2, [pc, #20]	; (402700 <pio_handler_set+0x94>)
  4026ea:	6013      	str	r3, [r2, #0]
	}

	/* Configure interrupt mode */
	pio_configure_interrupt(p_pio, ul_mask, ul_attr);
  4026ec:	683a      	ldr	r2, [r7, #0]
  4026ee:	6879      	ldr	r1, [r7, #4]
  4026f0:	68f8      	ldr	r0, [r7, #12]
  4026f2:	4b05      	ldr	r3, [pc, #20]	; (402708 <pio_handler_set+0x9c>)
  4026f4:	4798      	blx	r3

	return 0;
  4026f6:	2300      	movs	r3, #0
}
  4026f8:	4618      	mov	r0, r3
  4026fa:	3718      	adds	r7, #24
  4026fc:	46bd      	mov	sp, r7
  4026fe:	bd80      	pop	{r7, pc}
  402700:	204006e0 	.word	0x204006e0
  402704:	20400670 	.word	0x20400670
  402708:	004024e5 	.word	0x004024e5

0040270c <PIOA_Handler>:
/**
 * \brief Parallel IO Controller A interrupt handler.
 * Redefined PIOA interrupt handler for NVIC interrupt table.
 */
void PIOA_Handler(void)
{
  40270c:	b580      	push	{r7, lr}
  40270e:	af00      	add	r7, sp, #0
	pio_handler_process(PIOA, ID_PIOA);
  402710:	210a      	movs	r1, #10
  402712:	4802      	ldr	r0, [pc, #8]	; (40271c <PIOA_Handler+0x10>)
  402714:	4b02      	ldr	r3, [pc, #8]	; (402720 <PIOA_Handler+0x14>)
  402716:	4798      	blx	r3
}
  402718:	bf00      	nop
  40271a:	bd80      	pop	{r7, pc}
  40271c:	400e0e00 	.word	0x400e0e00
  402720:	004025b9 	.word	0x004025b9

00402724 <PIOB_Handler>:
/**
 * \brief Parallel IO Controller B interrupt handler
 * Redefined PIOB interrupt handler for NVIC interrupt table.
 */
void PIOB_Handler(void)
{
  402724:	b580      	push	{r7, lr}
  402726:	af00      	add	r7, sp, #0
    pio_handler_process(PIOB, ID_PIOB);
  402728:	210b      	movs	r1, #11
  40272a:	4802      	ldr	r0, [pc, #8]	; (402734 <PIOB_Handler+0x10>)
  40272c:	4b02      	ldr	r3, [pc, #8]	; (402738 <PIOB_Handler+0x14>)
  40272e:	4798      	blx	r3
}
  402730:	bf00      	nop
  402732:	bd80      	pop	{r7, pc}
  402734:	400e1000 	.word	0x400e1000
  402738:	004025b9 	.word	0x004025b9

0040273c <PIOC_Handler>:
/**
 * \brief Parallel IO Controller C interrupt handler.
 * Redefined PIOC interrupt handler for NVIC interrupt table.
 */
void PIOC_Handler(void)
{
  40273c:	b580      	push	{r7, lr}
  40273e:	af00      	add	r7, sp, #0
	pio_handler_process(PIOC, ID_PIOC);
  402740:	210c      	movs	r1, #12
  402742:	4802      	ldr	r0, [pc, #8]	; (40274c <PIOC_Handler+0x10>)
  402744:	4b02      	ldr	r3, [pc, #8]	; (402750 <PIOC_Handler+0x14>)
  402746:	4798      	blx	r3
}
  402748:	bf00      	nop
  40274a:	bd80      	pop	{r7, pc}
  40274c:	400e1200 	.word	0x400e1200
  402750:	004025b9 	.word	0x004025b9

00402754 <PIOD_Handler>:
/**
 * \brief Parallel IO Controller D interrupt handler.
 * Redefined PIOD interrupt handler for NVIC interrupt table.
 */
void PIOD_Handler(void)
{
  402754:	b580      	push	{r7, lr}
  402756:	af00      	add	r7, sp, #0
	pio_handler_process(PIOD, ID_PIOD);
  402758:	2110      	movs	r1, #16
  40275a:	4802      	ldr	r0, [pc, #8]	; (402764 <PIOD_Handler+0x10>)
  40275c:	4b02      	ldr	r3, [pc, #8]	; (402768 <PIOD_Handler+0x14>)
  40275e:	4798      	blx	r3
}
  402760:	bf00      	nop
  402762:	bd80      	pop	{r7, pc}
  402764:	400e1400 	.word	0x400e1400
  402768:	004025b9 	.word	0x004025b9

0040276c <PIOE_Handler>:
/**
 * \brief Parallel IO Controller E interrupt handler.
 * Redefined PIOE interrupt handler for NVIC interrupt table.
 */
void PIOE_Handler(void)
{
  40276c:	b580      	push	{r7, lr}
  40276e:	af00      	add	r7, sp, #0
	pio_handler_process(PIOE, ID_PIOE);
  402770:	2111      	movs	r1, #17
  402772:	4802      	ldr	r0, [pc, #8]	; (40277c <PIOE_Handler+0x10>)
  402774:	4b02      	ldr	r3, [pc, #8]	; (402780 <PIOE_Handler+0x14>)
  402776:	4798      	blx	r3
}
  402778:	bf00      	nop
  40277a:	bd80      	pop	{r7, pc}
  40277c:	400e1600 	.word	0x400e1600
  402780:	004025b9 	.word	0x004025b9

00402784 <pmc_mck_set_division>:
 * \brief Set the division of the MCK.
 *
 * \param ul_div Division value.
 */
void pmc_mck_set_division(uint32_t ul_div)
{
  402784:	b480      	push	{r7}
  402786:	b083      	sub	sp, #12
  402788:	af00      	add	r7, sp, #0
  40278a:	6078      	str	r0, [r7, #4]
	switch (ul_div) {
  40278c:	687b      	ldr	r3, [r7, #4]
  40278e:	3b01      	subs	r3, #1
  402790:	2b03      	cmp	r3, #3
  402792:	d81a      	bhi.n	4027ca <pmc_mck_set_division+0x46>
  402794:	a201      	add	r2, pc, #4	; (adr r2, 40279c <pmc_mck_set_division+0x18>)
  402796:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
  40279a:	bf00      	nop
  40279c:	004027ad 	.word	0x004027ad
  4027a0:	004027b3 	.word	0x004027b3
  4027a4:	004027bb 	.word	0x004027bb
  4027a8:	004027c3 	.word	0x004027c3
		case 1:
			ul_div = PMC_MCKR_MDIV_EQ_PCK;
  4027ac:	2300      	movs	r3, #0
  4027ae:	607b      	str	r3, [r7, #4]
			break;
  4027b0:	e00e      	b.n	4027d0 <pmc_mck_set_division+0x4c>
		case 2:
			ul_div = PMC_MCKR_MDIV_PCK_DIV2;
  4027b2:	f44f 7380 	mov.w	r3, #256	; 0x100
  4027b6:	607b      	str	r3, [r7, #4]
			break;
  4027b8:	e00a      	b.n	4027d0 <pmc_mck_set_division+0x4c>
		case 3:
			ul_div = PMC_MCKR_MDIV_PCK_DIV3;
  4027ba:	f44f 7340 	mov.w	r3, #768	; 0x300
  4027be:	607b      	str	r3, [r7, #4]
			break;
  4027c0:	e006      	b.n	4027d0 <pmc_mck_set_division+0x4c>
		case 4:
			ul_div = PMC_MCKR_MDIV_PCK_DIV4;
  4027c2:	f44f 7300 	mov.w	r3, #512	; 0x200
  4027c6:	607b      	str	r3, [r7, #4]
			break;
  4027c8:	e002      	b.n	4027d0 <pmc_mck_set_division+0x4c>
		default:
			ul_div = PMC_MCKR_MDIV_EQ_PCK;
  4027ca:	2300      	movs	r3, #0
  4027cc:	607b      	str	r3, [r7, #4]
			break;
  4027ce:	bf00      	nop
	}
	PMC->PMC_MCKR =
  4027d0:	490a      	ldr	r1, [pc, #40]	; (4027fc <pmc_mck_set_division+0x78>)
			(PMC->PMC_MCKR & (~PMC_MCKR_MDIV_Msk)) | ul_div;
  4027d2:	4b0a      	ldr	r3, [pc, #40]	; (4027fc <pmc_mck_set_division+0x78>)
  4027d4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
  4027d6:	f423 7240 	bic.w	r2, r3, #768	; 0x300
  4027da:	687b      	ldr	r3, [r7, #4]
  4027dc:	4313      	orrs	r3, r2
	PMC->PMC_MCKR =
  4027de:	630b      	str	r3, [r1, #48]	; 0x30
	while (!(PMC->PMC_SR & PMC_SR_MCKRDY));
  4027e0:	bf00      	nop
  4027e2:	4b06      	ldr	r3, [pc, #24]	; (4027fc <pmc_mck_set_division+0x78>)
  4027e4:	6e9b      	ldr	r3, [r3, #104]	; 0x68
  4027e6:	f003 0308 	and.w	r3, r3, #8
  4027ea:	2b00      	cmp	r3, #0
  4027ec:	d0f9      	beq.n	4027e2 <pmc_mck_set_division+0x5e>
}
  4027ee:	bf00      	nop
  4027f0:	370c      	adds	r7, #12
  4027f2:	46bd      	mov	sp, r7
  4027f4:	f85d 7b04 	ldr.w	r7, [sp], #4
  4027f8:	4770      	bx	lr
  4027fa:	bf00      	nop
  4027fc:	400e0600 	.word	0x400e0600

00402800 <pmc_switch_mck_to_pllack>:
 *
 * \retval 0 Success.
 * \retval 1 Timeout error.
 */
uint32_t pmc_switch_mck_to_pllack(uint32_t ul_pres)
{
  402800:	b480      	push	{r7}
  402802:	b085      	sub	sp, #20
  402804:	af00      	add	r7, sp, #0
  402806:	6078      	str	r0, [r7, #4]
	uint32_t ul_timeout;

	PMC->PMC_MCKR = (PMC->PMC_MCKR & (~PMC_MCKR_PRES_Msk)) | ul_pres;
  402808:	491d      	ldr	r1, [pc, #116]	; (402880 <pmc_switch_mck_to_pllack+0x80>)
  40280a:	4b1d      	ldr	r3, [pc, #116]	; (402880 <pmc_switch_mck_to_pllack+0x80>)
  40280c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
  40280e:	f023 0270 	bic.w	r2, r3, #112	; 0x70
  402812:	687b      	ldr	r3, [r7, #4]
  402814:	4313      	orrs	r3, r2
  402816:	630b      	str	r3, [r1, #48]	; 0x30
	for (ul_timeout = PMC_TIMEOUT; !(PMC->PMC_SR & PMC_SR_MCKRDY);
  402818:	f44f 5380 	mov.w	r3, #4096	; 0x1000
  40281c:	60fb      	str	r3, [r7, #12]
  40281e:	e007      	b.n	402830 <pmc_switch_mck_to_pllack+0x30>
			--ul_timeout) {
		if (ul_timeout == 0) {
  402820:	68fb      	ldr	r3, [r7, #12]
  402822:	2b00      	cmp	r3, #0
  402824:	d101      	bne.n	40282a <pmc_switch_mck_to_pllack+0x2a>
			return 1;
  402826:	2301      	movs	r3, #1
  402828:	e023      	b.n	402872 <pmc_switch_mck_to_pllack+0x72>
			--ul_timeout) {
  40282a:	68fb      	ldr	r3, [r7, #12]
  40282c:	3b01      	subs	r3, #1
  40282e:	60fb      	str	r3, [r7, #12]
	for (ul_timeout = PMC_TIMEOUT; !(PMC->PMC_SR & PMC_SR_MCKRDY);
  402830:	4b13      	ldr	r3, [pc, #76]	; (402880 <pmc_switch_mck_to_pllack+0x80>)
  402832:	6e9b      	ldr	r3, [r3, #104]	; 0x68
  402834:	f003 0308 	and.w	r3, r3, #8
  402838:	2b00      	cmp	r3, #0
  40283a:	d0f1      	beq.n	402820 <pmc_switch_mck_to_pllack+0x20>
		}
	}

	PMC->PMC_MCKR = (PMC->PMC_MCKR & (~PMC_MCKR_CSS_Msk)) |
  40283c:	4a10      	ldr	r2, [pc, #64]	; (402880 <pmc_switch_mck_to_pllack+0x80>)
  40283e:	4b10      	ldr	r3, [pc, #64]	; (402880 <pmc_switch_mck_to_pllack+0x80>)
  402840:	6b1b      	ldr	r3, [r3, #48]	; 0x30
  402842:	f023 0303 	bic.w	r3, r3, #3
  402846:	f043 0302 	orr.w	r3, r3, #2
  40284a:	6313      	str	r3, [r2, #48]	; 0x30
			PMC_MCKR_CSS_PLLA_CLK;

	for (ul_timeout = PMC_TIMEOUT; !(PMC->PMC_SR & PMC_SR_MCKRDY);
  40284c:	f44f 5380 	mov.w	r3, #4096	; 0x1000
  402850:	60fb      	str	r3, [r7, #12]
  402852:	e007      	b.n	402864 <pmc_switch_mck_to_pllack+0x64>
			--ul_timeout) {
		if (ul_timeout == 0) {
  402854:	68fb      	ldr	r3, [r7, #12]
  402856:	2b00      	cmp	r3, #0
  402858:	d101      	bne.n	40285e <pmc_switch_mck_to_pllack+0x5e>
			return 1;
  40285a:	2301      	movs	r3, #1
  40285c:	e009      	b.n	402872 <pmc_switch_mck_to_pllack+0x72>
			--ul_timeout) {
  40285e:	68fb      	ldr	r3, [r7, #12]
  402860:	3b01      	subs	r3, #1
  402862:	60fb      	str	r3, [r7, #12]
	for (ul_timeout = PMC_TIMEOUT; !(PMC->PMC_SR & PMC_SR_MCKRDY);
  402864:	4b06      	ldr	r3, [pc, #24]	; (402880 <pmc_switch_mck_to_pllack+0x80>)
  402866:	6e9b      	ldr	r3, [r3, #104]	; 0x68
  402868:	f003 0308 	and.w	r3, r3, #8
  40286c:	2b00      	cmp	r3, #0
  40286e:	d0f1      	beq.n	402854 <pmc_switch_mck_to_pllack+0x54>
		}
	}

	return 0;
  402870:	2300      	movs	r3, #0
}
  402872:	4618      	mov	r0, r3
  402874:	3714      	adds	r7, #20
  402876:	46bd      	mov	sp, r7
  402878:	f85d 7b04 	ldr.w	r7, [sp], #4
  40287c:	4770      	bx	lr
  40287e:	bf00      	nop
  402880:	400e0600 	.word	0x400e0600

00402884 <pmc_switch_sclk_to_32kxtal>:
 *       VDDIO power supply.
 *
 * \param ul_bypass 0 for Xtal, 1 for bypass.
 */
void pmc_switch_sclk_to_32kxtal(uint32_t ul_bypass)
{
  402884:	b480      	push	{r7}
  402886:	b083      	sub	sp, #12
  402888:	af00      	add	r7, sp, #0
  40288a:	6078      	str	r0, [r7, #4]
	/* Set Bypass mode if required */
	if (ul_bypass == 1) {
  40288c:	687b      	ldr	r3, [r7, #4]
  40288e:	2b01      	cmp	r3, #1
  402890:	d105      	bne.n	40289e <pmc_switch_sclk_to_32kxtal+0x1a>
		SUPC->SUPC_MR |= SUPC_MR_KEY_PASSWD |
  402892:	4907      	ldr	r1, [pc, #28]	; (4028b0 <pmc_switch_sclk_to_32kxtal+0x2c>)
  402894:	4b06      	ldr	r3, [pc, #24]	; (4028b0 <pmc_switch_sclk_to_32kxtal+0x2c>)
  402896:	689a      	ldr	r2, [r3, #8]
  402898:	4b06      	ldr	r3, [pc, #24]	; (4028b4 <pmc_switch_sclk_to_32kxtal+0x30>)
  40289a:	4313      	orrs	r3, r2
  40289c:	608b      	str	r3, [r1, #8]
			SUPC_MR_OSCBYPASS;
	}

	SUPC->SUPC_CR = SUPC_CR_KEY_PASSWD | SUPC_CR_XTALSEL;
  40289e:	4b04      	ldr	r3, [pc, #16]	; (4028b0 <pmc_switch_sclk_to_32kxtal+0x2c>)
  4028a0:	4a05      	ldr	r2, [pc, #20]	; (4028b8 <pmc_switch_sclk_to_32kxtal+0x34>)
  4028a2:	601a      	str	r2, [r3, #0]
}
  4028a4:	bf00      	nop
  4028a6:	370c      	adds	r7, #12
  4028a8:	46bd      	mov	sp, r7
  4028aa:	f85d 7b04 	ldr.w	r7, [sp], #4
  4028ae:	4770      	bx	lr
  4028b0:	400e1810 	.word	0x400e1810
  4028b4:	a5100000 	.word	0xa5100000
  4028b8:	a5000008 	.word	0xa5000008

004028bc <pmc_osc_is_ready_32kxtal>:
 *
 * \retval 1 External 32k Xtal is ready.
 * \retval 0 External 32k Xtal is not ready.
 */
uint32_t pmc_osc_is_ready_32kxtal(void)
{
  4028bc:	b480      	push	{r7}
  4028be:	af00      	add	r7, sp, #0
	return ((SUPC->SUPC_SR & SUPC_SR_OSCSEL)
  4028c0:	4b09      	ldr	r3, [pc, #36]	; (4028e8 <pmc_osc_is_ready_32kxtal+0x2c>)
  4028c2:	695b      	ldr	r3, [r3, #20]
  4028c4:	f003 0380 	and.w	r3, r3, #128	; 0x80
			&& (PMC->PMC_SR & PMC_SR_OSCSELS));
  4028c8:	2b00      	cmp	r3, #0
  4028ca:	d007      	beq.n	4028dc <pmc_osc_is_ready_32kxtal+0x20>
  4028cc:	4b07      	ldr	r3, [pc, #28]	; (4028ec <pmc_osc_is_ready_32kxtal+0x30>)
  4028ce:	6e9b      	ldr	r3, [r3, #104]	; 0x68
  4028d0:	f003 0380 	and.w	r3, r3, #128	; 0x80
  4028d4:	2b00      	cmp	r3, #0
  4028d6:	d001      	beq.n	4028dc <pmc_osc_is_ready_32kxtal+0x20>
  4028d8:	2301      	movs	r3, #1
  4028da:	e000      	b.n	4028de <pmc_osc_is_ready_32kxtal+0x22>
  4028dc:	2300      	movs	r3, #0
}
  4028de:	4618      	mov	r0, r3
  4028e0:	46bd      	mov	sp, r7
  4028e2:	f85d 7b04 	ldr.w	r7, [sp], #4
  4028e6:	4770      	bx	lr
  4028e8:	400e1810 	.word	0x400e1810
  4028ec:	400e0600 	.word	0x400e0600

004028f0 <pmc_switch_mainck_to_fastrc>:
 * \retval 0 Success.
 * \retval 1 Timeout error.
 * \retval 2 Invalid frequency.
 */
void pmc_switch_mainck_to_fastrc(uint32_t ul_moscrcf)
{
  4028f0:	b480      	push	{r7}
  4028f2:	b083      	sub	sp, #12
  4028f4:	af00      	add	r7, sp, #0
  4028f6:	6078      	str	r0, [r7, #4]
	/* Enable Fast RC oscillator but DO NOT switch to RC now */
	PMC->CKGR_MOR |= (CKGR_MOR_KEY_PASSWD | CKGR_MOR_MOSCRCEN);
  4028f8:	4915      	ldr	r1, [pc, #84]	; (402950 <pmc_switch_mainck_to_fastrc+0x60>)
  4028fa:	4b15      	ldr	r3, [pc, #84]	; (402950 <pmc_switch_mainck_to_fastrc+0x60>)
  4028fc:	6a1a      	ldr	r2, [r3, #32]
  4028fe:	4b15      	ldr	r3, [pc, #84]	; (402954 <pmc_switch_mainck_to_fastrc+0x64>)
  402900:	4313      	orrs	r3, r2
  402902:	620b      	str	r3, [r1, #32]

	/* Wait the Fast RC to stabilize */
	while (!(PMC->PMC_SR & PMC_SR_MOSCRCS));
  402904:	bf00      	nop
  402906:	4b12      	ldr	r3, [pc, #72]	; (402950 <pmc_switch_mainck_to_fastrc+0x60>)
  402908:	6e9b      	ldr	r3, [r3, #104]	; 0x68
  40290a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
  40290e:	2b00      	cmp	r3, #0
  402910:	d0f9      	beq.n	402906 <pmc_switch_mainck_to_fastrc+0x16>

	/* Change Fast RC oscillator frequency */
	PMC->CKGR_MOR = (PMC->CKGR_MOR & ~CKGR_MOR_MOSCRCF_Msk) |
  402912:	490f      	ldr	r1, [pc, #60]	; (402950 <pmc_switch_mainck_to_fastrc+0x60>)
  402914:	4b0e      	ldr	r3, [pc, #56]	; (402950 <pmc_switch_mainck_to_fastrc+0x60>)
  402916:	6a1a      	ldr	r2, [r3, #32]
  402918:	4b0f      	ldr	r3, [pc, #60]	; (402958 <pmc_switch_mainck_to_fastrc+0x68>)
  40291a:	4013      	ands	r3, r2
			CKGR_MOR_KEY_PASSWD | ul_moscrcf;
  40291c:	687a      	ldr	r2, [r7, #4]
  40291e:	4313      	orrs	r3, r2
  402920:	f443 135c 	orr.w	r3, r3, #3604480	; 0x370000
	PMC->CKGR_MOR = (PMC->CKGR_MOR & ~CKGR_MOR_MOSCRCF_Msk) |
  402924:	620b      	str	r3, [r1, #32]

	/* Wait the Fast RC to stabilize */
	while (!(PMC->PMC_SR & PMC_SR_MOSCRCS));
  402926:	bf00      	nop
  402928:	4b09      	ldr	r3, [pc, #36]	; (402950 <pmc_switch_mainck_to_fastrc+0x60>)
  40292a:	6e9b      	ldr	r3, [r3, #104]	; 0x68
  40292c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
  402930:	2b00      	cmp	r3, #0
  402932:	d0f9      	beq.n	402928 <pmc_switch_mainck_to_fastrc+0x38>

	/* Switch to Fast RC */
	PMC->CKGR_MOR = (PMC->CKGR_MOR & ~CKGR_MOR_MOSCSEL) |
  402934:	4906      	ldr	r1, [pc, #24]	; (402950 <pmc_switch_mainck_to_fastrc+0x60>)
  402936:	4b06      	ldr	r3, [pc, #24]	; (402950 <pmc_switch_mainck_to_fastrc+0x60>)
  402938:	6a1a      	ldr	r2, [r3, #32]
  40293a:	4b08      	ldr	r3, [pc, #32]	; (40295c <pmc_switch_mainck_to_fastrc+0x6c>)
  40293c:	4013      	ands	r3, r2
  40293e:	f443 135c 	orr.w	r3, r3, #3604480	; 0x370000
  402942:	620b      	str	r3, [r1, #32]
			CKGR_MOR_KEY_PASSWD;
}
  402944:	bf00      	nop
  402946:	370c      	adds	r7, #12
  402948:	46bd      	mov	sp, r7
  40294a:	f85d 7b04 	ldr.w	r7, [sp], #4
  40294e:	4770      	bx	lr
  402950:	400e0600 	.word	0x400e0600
  402954:	00370008 	.word	0x00370008
  402958:	ffc8ff8f 	.word	0xffc8ff8f
  40295c:	fec8ffff 	.word	0xfec8ffff

00402960 <pmc_switch_mainck_to_xtal>:
 * \retval 0 Success.
 * \retval 1 Timeout error.
 */
void pmc_switch_mainck_to_xtal(uint32_t ul_bypass,
		uint32_t ul_xtal_startup_time)
{
  402960:	b480      	push	{r7}
  402962:	b083      	sub	sp, #12
  402964:	af00      	add	r7, sp, #0
  402966:	6078      	str	r0, [r7, #4]
  402968:	6039      	str	r1, [r7, #0]
	/* Enable Main Xtal oscillator */
	if (ul_bypass) {
  40296a:	687b      	ldr	r3, [r7, #4]
  40296c:	2b00      	cmp	r3, #0
  40296e:	d008      	beq.n	402982 <pmc_switch_mainck_to_xtal+0x22>
		PMC->CKGR_MOR = (PMC->CKGR_MOR & ~CKGR_MOR_MOSCXTEN) |
  402970:	4913      	ldr	r1, [pc, #76]	; (4029c0 <pmc_switch_mainck_to_xtal+0x60>)
  402972:	4b13      	ldr	r3, [pc, #76]	; (4029c0 <pmc_switch_mainck_to_xtal+0x60>)
  402974:	6a1b      	ldr	r3, [r3, #32]
				CKGR_MOR_KEY_PASSWD | CKGR_MOR_MOSCXTBY |
  402976:	4a13      	ldr	r2, [pc, #76]	; (4029c4 <pmc_switch_mainck_to_xtal+0x64>)
  402978:	401a      	ands	r2, r3
  40297a:	4b13      	ldr	r3, [pc, #76]	; (4029c8 <pmc_switch_mainck_to_xtal+0x68>)
  40297c:	4313      	orrs	r3, r2
		PMC->CKGR_MOR = (PMC->CKGR_MOR & ~CKGR_MOR_MOSCXTEN) |
  40297e:	620b      	str	r3, [r1, #32]
		/* Wait the Xtal to stabilize */
		while (!(PMC->PMC_SR & PMC_SR_MOSCXTS));

		PMC->CKGR_MOR |= CKGR_MOR_KEY_PASSWD | CKGR_MOR_MOSCSEL;
	}
}
  402980:	e018      	b.n	4029b4 <pmc_switch_mainck_to_xtal+0x54>
		PMC->CKGR_MOR = (PMC->CKGR_MOR & ~CKGR_MOR_MOSCXTBY) |
  402982:	490f      	ldr	r1, [pc, #60]	; (4029c0 <pmc_switch_mainck_to_xtal+0x60>)
  402984:	4b0e      	ldr	r3, [pc, #56]	; (4029c0 <pmc_switch_mainck_to_xtal+0x60>)
  402986:	6a1a      	ldr	r2, [r3, #32]
				CKGR_MOR_KEY_PASSWD | CKGR_MOR_MOSCXTEN |
  402988:	4b10      	ldr	r3, [pc, #64]	; (4029cc <pmc_switch_mainck_to_xtal+0x6c>)
  40298a:	4013      	ands	r3, r2
				CKGR_MOR_MOSCXTST(ul_xtal_startup_time);
  40298c:	683a      	ldr	r2, [r7, #0]
  40298e:	0212      	lsls	r2, r2, #8
  402990:	b292      	uxth	r2, r2
				CKGR_MOR_KEY_PASSWD | CKGR_MOR_MOSCXTEN |
  402992:	431a      	orrs	r2, r3
  402994:	4b0e      	ldr	r3, [pc, #56]	; (4029d0 <pmc_switch_mainck_to_xtal+0x70>)
  402996:	4313      	orrs	r3, r2
		PMC->CKGR_MOR = (PMC->CKGR_MOR & ~CKGR_MOR_MOSCXTBY) |
  402998:	620b      	str	r3, [r1, #32]
		while (!(PMC->PMC_SR & PMC_SR_MOSCXTS));
  40299a:	bf00      	nop
  40299c:	4b08      	ldr	r3, [pc, #32]	; (4029c0 <pmc_switch_mainck_to_xtal+0x60>)
  40299e:	6e9b      	ldr	r3, [r3, #104]	; 0x68
  4029a0:	f003 0301 	and.w	r3, r3, #1
  4029a4:	2b00      	cmp	r3, #0
  4029a6:	d0f9      	beq.n	40299c <pmc_switch_mainck_to_xtal+0x3c>
		PMC->CKGR_MOR |= CKGR_MOR_KEY_PASSWD | CKGR_MOR_MOSCSEL;
  4029a8:	4905      	ldr	r1, [pc, #20]	; (4029c0 <pmc_switch_mainck_to_xtal+0x60>)
  4029aa:	4b05      	ldr	r3, [pc, #20]	; (4029c0 <pmc_switch_mainck_to_xtal+0x60>)
  4029ac:	6a1a      	ldr	r2, [r3, #32]
  4029ae:	4b09      	ldr	r3, [pc, #36]	; (4029d4 <pmc_switch_mainck_to_xtal+0x74>)
  4029b0:	4313      	orrs	r3, r2
  4029b2:	620b      	str	r3, [r1, #32]
}
  4029b4:	bf00      	nop
  4029b6:	370c      	adds	r7, #12
  4029b8:	46bd      	mov	sp, r7
  4029ba:	f85d 7b04 	ldr.w	r7, [sp], #4
  4029be:	4770      	bx	lr
  4029c0:	400e0600 	.word	0x400e0600
  4029c4:	fec8fffc 	.word	0xfec8fffc
  4029c8:	01370002 	.word	0x01370002
  4029cc:	ffc8fffc 	.word	0xffc8fffc
  4029d0:	00370001 	.word	0x00370001
  4029d4:	01370000 	.word	0x01370000

004029d8 <pmc_osc_is_ready_mainck>:
 *
 * \retval 1 Xtal is ready.
 * \retval 0 Xtal is not ready.
 */
uint32_t pmc_osc_is_ready_mainck(void)
{
  4029d8:	b480      	push	{r7}
  4029da:	af00      	add	r7, sp, #0
	return PMC->PMC_SR & PMC_SR_MOSCSELS;
  4029dc:	4b04      	ldr	r3, [pc, #16]	; (4029f0 <pmc_osc_is_ready_mainck+0x18>)
  4029de:	6e9b      	ldr	r3, [r3, #104]	; 0x68
  4029e0:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
}
  4029e4:	4618      	mov	r0, r3
  4029e6:	46bd      	mov	sp, r7
  4029e8:	f85d 7b04 	ldr.w	r7, [sp], #4
  4029ec:	4770      	bx	lr
  4029ee:	bf00      	nop
  4029f0:	400e0600 	.word	0x400e0600

004029f4 <pmc_disable_pllack>:

/**
 * \brief Disable PLLA clock.
 */
void pmc_disable_pllack(void)
{
  4029f4:	b480      	push	{r7}
  4029f6:	af00      	add	r7, sp, #0
#if (SAM4C || SAM4CM || SAM4CP || SAMG)
	PMC->CKGR_PLLAR = CKGR_PLLAR_MULA(0);
#else
	PMC->CKGR_PLLAR = CKGR_PLLAR_ONE | CKGR_PLLAR_MULA(0);
  4029f8:	4b04      	ldr	r3, [pc, #16]	; (402a0c <pmc_disable_pllack+0x18>)
  4029fa:	f04f 5200 	mov.w	r2, #536870912	; 0x20000000
  4029fe:	629a      	str	r2, [r3, #40]	; 0x28
#endif
}
  402a00:	bf00      	nop
  402a02:	46bd      	mov	sp, r7
  402a04:	f85d 7b04 	ldr.w	r7, [sp], #4
  402a08:	4770      	bx	lr
  402a0a:	bf00      	nop
  402a0c:	400e0600 	.word	0x400e0600

00402a10 <pmc_is_locked_pllack>:
 *
 * \retval 0 Not locked.
 * \retval 1 Locked.
 */
uint32_t pmc_is_locked_pllack(void)
{
  402a10:	b480      	push	{r7}
  402a12:	af00      	add	r7, sp, #0
	return (PMC->PMC_SR & PMC_SR_LOCKA);
  402a14:	4b04      	ldr	r3, [pc, #16]	; (402a28 <pmc_is_locked_pllack+0x18>)
  402a16:	6e9b      	ldr	r3, [r3, #104]	; 0x68
  402a18:	f003 0302 	and.w	r3, r3, #2
}
  402a1c:	4618      	mov	r0, r3
  402a1e:	46bd      	mov	sp, r7
  402a20:	f85d 7b04 	ldr.w	r7, [sp], #4
  402a24:	4770      	bx	lr
  402a26:	bf00      	nop
  402a28:	400e0600 	.word	0x400e0600

00402a2c <pmc_is_locked_upll>:
 *
 * \retval 0 Not locked.
 * \retval 1 Locked.
 */
uint32_t pmc_is_locked_upll(void)
{
  402a2c:	b480      	push	{r7}
  402a2e:	af00      	add	r7, sp, #0
	return (PMC->PMC_SR & PMC_SR_LOCKU);
  402a30:	4b04      	ldr	r3, [pc, #16]	; (402a44 <pmc_is_locked_upll+0x18>)
  402a32:	6e9b      	ldr	r3, [r3, #104]	; 0x68
  402a34:	f003 0340 	and.w	r3, r3, #64	; 0x40
}
  402a38:	4618      	mov	r0, r3
  402a3a:	46bd      	mov	sp, r7
  402a3c:	f85d 7b04 	ldr.w	r7, [sp], #4
  402a40:	4770      	bx	lr
  402a42:	bf00      	nop
  402a44:	400e0600 	.word	0x400e0600

00402a48 <pmc_enable_periph_clk>:
 *
 * \retval 0 Success.
 * \retval 1 Invalid parameter.
 */
uint32_t pmc_enable_periph_clk(uint32_t ul_id)
{
  402a48:	b480      	push	{r7}
  402a4a:	b083      	sub	sp, #12
  402a4c:	af00      	add	r7, sp, #0
  402a4e:	6078      	str	r0, [r7, #4]
	if (ul_id > MAX_PERIPH_ID) {
  402a50:	687b      	ldr	r3, [r7, #4]
  402a52:	2b3f      	cmp	r3, #63	; 0x3f
  402a54:	d901      	bls.n	402a5a <pmc_enable_periph_clk+0x12>
		return 1;
  402a56:	2301      	movs	r3, #1
  402a58:	e02f      	b.n	402aba <pmc_enable_periph_clk+0x72>
	}

	if (ul_id < 32) {
  402a5a:	687b      	ldr	r3, [r7, #4]
  402a5c:	2b1f      	cmp	r3, #31
  402a5e:	d813      	bhi.n	402a88 <pmc_enable_periph_clk+0x40>
		if ((PMC->PMC_PCSR0 & (1u << ul_id)) != (1u << ul_id)) {
  402a60:	4b19      	ldr	r3, [pc, #100]	; (402ac8 <pmc_enable_periph_clk+0x80>)
  402a62:	699a      	ldr	r2, [r3, #24]
  402a64:	2101      	movs	r1, #1
  402a66:	687b      	ldr	r3, [r7, #4]
  402a68:	fa01 f303 	lsl.w	r3, r1, r3
  402a6c:	401a      	ands	r2, r3
  402a6e:	2101      	movs	r1, #1
  402a70:	687b      	ldr	r3, [r7, #4]
  402a72:	fa01 f303 	lsl.w	r3, r1, r3
  402a76:	429a      	cmp	r2, r3
  402a78:	d01e      	beq.n	402ab8 <pmc_enable_periph_clk+0x70>
			PMC->PMC_PCER0 = 1 << ul_id;
  402a7a:	4a13      	ldr	r2, [pc, #76]	; (402ac8 <pmc_enable_periph_clk+0x80>)
  402a7c:	2101      	movs	r1, #1
  402a7e:	687b      	ldr	r3, [r7, #4]
  402a80:	fa01 f303 	lsl.w	r3, r1, r3
  402a84:	6113      	str	r3, [r2, #16]
  402a86:	e017      	b.n	402ab8 <pmc_enable_periph_clk+0x70>
		}
#if (SAM3S || SAM3XA || SAM4S || SAM4E || SAM4C || SAM4CM || SAM4CP || SAMG55 || SAMV71 || SAMV70 || SAME70 || SAMS70)
	} else {
		ul_id -= 32;
  402a88:	687b      	ldr	r3, [r7, #4]
  402a8a:	3b20      	subs	r3, #32
  402a8c:	607b      	str	r3, [r7, #4]
		if ((PMC->PMC_PCSR1 & (1u << ul_id)) != (1u << ul_id)) {
  402a8e:	4b0e      	ldr	r3, [pc, #56]	; (402ac8 <pmc_enable_periph_clk+0x80>)
  402a90:	f8d3 2108 	ldr.w	r2, [r3, #264]	; 0x108
  402a94:	2101      	movs	r1, #1
  402a96:	687b      	ldr	r3, [r7, #4]
  402a98:	fa01 f303 	lsl.w	r3, r1, r3
  402a9c:	401a      	ands	r2, r3
  402a9e:	2101      	movs	r1, #1
  402aa0:	687b      	ldr	r3, [r7, #4]
  402aa2:	fa01 f303 	lsl.w	r3, r1, r3
  402aa6:	429a      	cmp	r2, r3
  402aa8:	d006      	beq.n	402ab8 <pmc_enable_periph_clk+0x70>
			PMC->PMC_PCER1 = 1 << ul_id;
  402aaa:	4a07      	ldr	r2, [pc, #28]	; (402ac8 <pmc_enable_periph_clk+0x80>)
  402aac:	2101      	movs	r1, #1
  402aae:	687b      	ldr	r3, [r7, #4]
  402ab0:	fa01 f303 	lsl.w	r3, r1, r3
  402ab4:	f8c2 3100 	str.w	r3, [r2, #256]	; 0x100
		}
#endif
	}

	return 0;
  402ab8:	2300      	movs	r3, #0
}
  402aba:	4618      	mov	r0, r3
  402abc:	370c      	adds	r7, #12
  402abe:	46bd      	mov	sp, r7
  402ac0:	f85d 7b04 	ldr.w	r7, [sp], #4
  402ac4:	4770      	bx	lr
  402ac6:	bf00      	nop
  402ac8:	400e0600 	.word	0x400e0600

00402acc <cpu_irq_save>:

static volatile uint32_t cpu_irq_critical_section_counter;
static volatile bool     cpu_irq_prev_interrupt_state;

static inline irqflags_t cpu_irq_save(void)
{
  402acc:	b480      	push	{r7}
  402ace:	b083      	sub	sp, #12
  402ad0:	af00      	add	r7, sp, #0
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE uint32_t __get_PRIMASK(void)
{
  uint32_t result;

  __ASM volatile ("MRS %0, primask" : "=r" (result) );
  402ad2:	f3ef 8310 	mrs	r3, PRIMASK
  402ad6:	607b      	str	r3, [r7, #4]
  return(result);
  402ad8:	687b      	ldr	r3, [r7, #4]
	volatile irqflags_t flags = cpu_irq_is_enabled();
  402ada:	2b00      	cmp	r3, #0
  402adc:	bf0c      	ite	eq
  402ade:	2301      	moveq	r3, #1
  402ae0:	2300      	movne	r3, #0
  402ae2:	b2db      	uxtb	r3, r3
  402ae4:	603b      	str	r3, [r7, #0]
  __ASM volatile ("cpsid i" : : : "memory");
  402ae6:	b672      	cpsid	i
  __ASM volatile ("dmb");
  402ae8:	f3bf 8f5f 	dmb	sy
	cpu_irq_disable();
  402aec:	4b04      	ldr	r3, [pc, #16]	; (402b00 <cpu_irq_save+0x34>)
  402aee:	2200      	movs	r2, #0
  402af0:	701a      	strb	r2, [r3, #0]
	return flags;
  402af2:	683b      	ldr	r3, [r7, #0]
}
  402af4:	4618      	mov	r0, r3
  402af6:	370c      	adds	r7, #12
  402af8:	46bd      	mov	sp, r7
  402afa:	f85d 7b04 	ldr.w	r7, [sp], #4
  402afe:	4770      	bx	lr
  402b00:	20400018 	.word	0x20400018

00402b04 <cpu_irq_is_enabled_flags>:

static inline bool cpu_irq_is_enabled_flags(irqflags_t flags)
{
  402b04:	b480      	push	{r7}
  402b06:	b083      	sub	sp, #12
  402b08:	af00      	add	r7, sp, #0
  402b0a:	6078      	str	r0, [r7, #4]
	return (flags);
  402b0c:	687b      	ldr	r3, [r7, #4]
  402b0e:	2b00      	cmp	r3, #0
  402b10:	bf14      	ite	ne
  402b12:	2301      	movne	r3, #1
  402b14:	2300      	moveq	r3, #0
  402b16:	b2db      	uxtb	r3, r3
}
  402b18:	4618      	mov	r0, r3
  402b1a:	370c      	adds	r7, #12
  402b1c:	46bd      	mov	sp, r7
  402b1e:	f85d 7b04 	ldr.w	r7, [sp], #4
  402b22:	4770      	bx	lr

00402b24 <cpu_irq_restore>:

static inline void cpu_irq_restore(irqflags_t flags)
{
  402b24:	b580      	push	{r7, lr}
  402b26:	b082      	sub	sp, #8
  402b28:	af00      	add	r7, sp, #0
  402b2a:	6078      	str	r0, [r7, #4]
	if (cpu_irq_is_enabled_flags(flags))
  402b2c:	6878      	ldr	r0, [r7, #4]
  402b2e:	4b07      	ldr	r3, [pc, #28]	; (402b4c <cpu_irq_restore+0x28>)
  402b30:	4798      	blx	r3
  402b32:	4603      	mov	r3, r0
  402b34:	2b00      	cmp	r3, #0
  402b36:	d005      	beq.n	402b44 <cpu_irq_restore+0x20>
		cpu_irq_enable();
  402b38:	4b05      	ldr	r3, [pc, #20]	; (402b50 <cpu_irq_restore+0x2c>)
  402b3a:	2201      	movs	r2, #1
  402b3c:	701a      	strb	r2, [r3, #0]
  402b3e:	f3bf 8f5f 	dmb	sy
  __ASM volatile ("cpsie i" : : : "memory");
  402b42:	b662      	cpsie	i
}
  402b44:	bf00      	nop
  402b46:	3708      	adds	r7, #8
  402b48:	46bd      	mov	sp, r7
  402b4a:	bd80      	pop	{r7, pc}
  402b4c:	00402b05 	.word	0x00402b05
  402b50:	20400018 	.word	0x20400018

00402b54 <Reset_Handler>:
/**
 * \brief This is the code that gets called on processor reset.
 * To initialize the device, and call the main() routine.
 */
void Reset_Handler(void)
{
  402b54:	b580      	push	{r7, lr}
  402b56:	b084      	sub	sp, #16
  402b58:	af00      	add	r7, sp, #0
        uint32_t *pSrc, *pDest;

        /* Initialize the relocate segment */
        pSrc = &_etext;
  402b5a:	4b1e      	ldr	r3, [pc, #120]	; (402bd4 <Reset_Handler+0x80>)
  402b5c:	60fb      	str	r3, [r7, #12]
        pDest = &_srelocate;
  402b5e:	4b1e      	ldr	r3, [pc, #120]	; (402bd8 <Reset_Handler+0x84>)
  402b60:	60bb      	str	r3, [r7, #8]

        if (pSrc != pDest) {
  402b62:	68fa      	ldr	r2, [r7, #12]
  402b64:	68bb      	ldr	r3, [r7, #8]
  402b66:	429a      	cmp	r2, r3
  402b68:	d00c      	beq.n	402b84 <Reset_Handler+0x30>
                for (; pDest < &_erelocate;) {
  402b6a:	e007      	b.n	402b7c <Reset_Handler+0x28>
                        *pDest++ = *pSrc++;
  402b6c:	68bb      	ldr	r3, [r7, #8]
  402b6e:	1d1a      	adds	r2, r3, #4
  402b70:	60ba      	str	r2, [r7, #8]
  402b72:	68fa      	ldr	r2, [r7, #12]
  402b74:	1d11      	adds	r1, r2, #4
  402b76:	60f9      	str	r1, [r7, #12]
  402b78:	6812      	ldr	r2, [r2, #0]
  402b7a:	601a      	str	r2, [r3, #0]
                for (; pDest < &_erelocate;) {
  402b7c:	68bb      	ldr	r3, [r7, #8]
  402b7e:	4a17      	ldr	r2, [pc, #92]	; (402bdc <Reset_Handler+0x88>)
  402b80:	4293      	cmp	r3, r2
  402b82:	d3f3      	bcc.n	402b6c <Reset_Handler+0x18>
                }
        }

        /* Clear the zero segment */
        for (pDest = &_szero; pDest < &_ezero;) {
  402b84:	4b16      	ldr	r3, [pc, #88]	; (402be0 <Reset_Handler+0x8c>)
  402b86:	60bb      	str	r3, [r7, #8]
  402b88:	e004      	b.n	402b94 <Reset_Handler+0x40>
                *pDest++ = 0;
  402b8a:	68bb      	ldr	r3, [r7, #8]
  402b8c:	1d1a      	adds	r2, r3, #4
  402b8e:	60ba      	str	r2, [r7, #8]
  402b90:	2200      	movs	r2, #0
  402b92:	601a      	str	r2, [r3, #0]
        for (pDest = &_szero; pDest < &_ezero;) {
  402b94:	68bb      	ldr	r3, [r7, #8]
  402b96:	4a13      	ldr	r2, [pc, #76]	; (402be4 <Reset_Handler+0x90>)
  402b98:	4293      	cmp	r3, r2
  402b9a:	d3f6      	bcc.n	402b8a <Reset_Handler+0x36>
        }

        /* Set the vector table base address */
        pSrc = (uint32_t *) & _sfixed;
  402b9c:	4b12      	ldr	r3, [pc, #72]	; (402be8 <Reset_Handler+0x94>)
  402b9e:	60fb      	str	r3, [r7, #12]
        SCB->VTOR = ((uint32_t) pSrc & SCB_VTOR_TBLOFF_Msk);
  402ba0:	4a12      	ldr	r2, [pc, #72]	; (402bec <Reset_Handler+0x98>)
  402ba2:	68fb      	ldr	r3, [r7, #12]
  402ba4:	f023 037f 	bic.w	r3, r3, #127	; 0x7f
  402ba8:	6093      	str	r3, [r2, #8]
 * \brief Enable FPU
 */
__always_inline static void fpu_enable(void)
{
	irqflags_t flags;
	flags = cpu_irq_save();
  402baa:	4b11      	ldr	r3, [pc, #68]	; (402bf0 <Reset_Handler+0x9c>)
  402bac:	4798      	blx	r3
  402bae:	6078      	str	r0, [r7, #4]
	REG_CPACR |=  (0xFu << 20);
  402bb0:	4a10      	ldr	r2, [pc, #64]	; (402bf4 <Reset_Handler+0xa0>)
  402bb2:	4b10      	ldr	r3, [pc, #64]	; (402bf4 <Reset_Handler+0xa0>)
  402bb4:	681b      	ldr	r3, [r3, #0]
  402bb6:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
  402bba:	6013      	str	r3, [r2, #0]
  __ASM volatile ("dsb");
  402bbc:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb");
  402bc0:	f3bf 8f6f 	isb	sy
	__DSB();
	__ISB();
	cpu_irq_restore(flags);
  402bc4:	6878      	ldr	r0, [r7, #4]
  402bc6:	4b0c      	ldr	r3, [pc, #48]	; (402bf8 <Reset_Handler+0xa4>)
  402bc8:	4798      	blx	r3
#if __FPU_USED
	fpu_enable();
#endif

        /* Initialize the C library */
        __libc_init_array();
  402bca:	4b0c      	ldr	r3, [pc, #48]	; (402bfc <Reset_Handler+0xa8>)
  402bcc:	4798      	blx	r3

        /* Branch to main function */
        main();
  402bce:	4b0c      	ldr	r3, [pc, #48]	; (402c00 <Reset_Handler+0xac>)
  402bd0:	4798      	blx	r3

        /* Infinite loop */
        while (1);
  402bd2:	e7fe      	b.n	402bd2 <Reset_Handler+0x7e>
  402bd4:	00404540 	.word	0x00404540
  402bd8:	20400000 	.word	0x20400000
  402bdc:	2040044c 	.word	0x2040044c
  402be0:	2040044c 	.word	0x2040044c
  402be4:	2040070c 	.word	0x2040070c
  402be8:	00400000 	.word	0x00400000
  402bec:	e000ed00 	.word	0xe000ed00
  402bf0:	00402acd 	.word	0x00402acd
  402bf4:	e000ed88 	.word	0xe000ed88
  402bf8:	00402b25 	.word	0x00402b25
  402bfc:	00403919 	.word	0x00403919
  402c00:	00403305 	.word	0x00403305

00402c04 <Dummy_Handler>:

/**
 * \brief Default interrupt handler for unused IRQs.
 */
void Dummy_Handler(void)
{
  402c04:	b480      	push	{r7}
  402c06:	af00      	add	r7, sp, #0
        while (1) {
  402c08:	e7fe      	b.n	402c08 <Dummy_Handler+0x4>
	...

00402c0c <SystemCoreClockUpdate>:

  SystemCoreClock = CHIP_FREQ_CPU_MAX;
}

void SystemCoreClockUpdate( void )
{
  402c0c:	b480      	push	{r7}
  402c0e:	af00      	add	r7, sp, #0
  /* Determine clock frequency according to clock register values */
  switch (PMC->PMC_MCKR & (uint32_t) PMC_MCKR_CSS_Msk)
  402c10:	4b52      	ldr	r3, [pc, #328]	; (402d5c <SystemCoreClockUpdate+0x150>)
  402c12:	6b1b      	ldr	r3, [r3, #48]	; 0x30
  402c14:	f003 0303 	and.w	r3, r3, #3
  402c18:	2b01      	cmp	r3, #1
  402c1a:	d014      	beq.n	402c46 <SystemCoreClockUpdate+0x3a>
  402c1c:	2b01      	cmp	r3, #1
  402c1e:	d302      	bcc.n	402c26 <SystemCoreClockUpdate+0x1a>
  402c20:	2b02      	cmp	r3, #2
  402c22:	d038      	beq.n	402c96 <SystemCoreClockUpdate+0x8a>
        SystemCoreClock /= ((((PMC->CKGR_PLLAR) & CKGR_PLLAR_DIVA_Msk) >> CKGR_PLLAR_DIVA_Pos));
      }
    break;

    default:
    break;
  402c24:	e07a      	b.n	402d1c <SystemCoreClockUpdate+0x110>
      if ( SUPC->SUPC_SR & SUPC_SR_OSCSEL )
  402c26:	4b4e      	ldr	r3, [pc, #312]	; (402d60 <SystemCoreClockUpdate+0x154>)
  402c28:	695b      	ldr	r3, [r3, #20]
  402c2a:	f003 0380 	and.w	r3, r3, #128	; 0x80
  402c2e:	2b00      	cmp	r3, #0
  402c30:	d004      	beq.n	402c3c <SystemCoreClockUpdate+0x30>
        SystemCoreClock = CHIP_FREQ_XTAL_32K;
  402c32:	4b4c      	ldr	r3, [pc, #304]	; (402d64 <SystemCoreClockUpdate+0x158>)
  402c34:	f44f 4200 	mov.w	r2, #32768	; 0x8000
  402c38:	601a      	str	r2, [r3, #0]
    break;
  402c3a:	e06f      	b.n	402d1c <SystemCoreClockUpdate+0x110>
        SystemCoreClock = CHIP_FREQ_SLCK_RC;
  402c3c:	4b49      	ldr	r3, [pc, #292]	; (402d64 <SystemCoreClockUpdate+0x158>)
  402c3e:	f44f 42fa 	mov.w	r2, #32000	; 0x7d00
  402c42:	601a      	str	r2, [r3, #0]
    break;
  402c44:	e06a      	b.n	402d1c <SystemCoreClockUpdate+0x110>
      if ( PMC->CKGR_MOR & CKGR_MOR_MOSCSEL )
  402c46:	4b45      	ldr	r3, [pc, #276]	; (402d5c <SystemCoreClockUpdate+0x150>)
  402c48:	6a1b      	ldr	r3, [r3, #32]
  402c4a:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
  402c4e:	2b00      	cmp	r3, #0
  402c50:	d003      	beq.n	402c5a <SystemCoreClockUpdate+0x4e>
        SystemCoreClock = CHIP_FREQ_XTAL_12M;
  402c52:	4b44      	ldr	r3, [pc, #272]	; (402d64 <SystemCoreClockUpdate+0x158>)
  402c54:	4a44      	ldr	r2, [pc, #272]	; (402d68 <SystemCoreClockUpdate+0x15c>)
  402c56:	601a      	str	r2, [r3, #0]
    break;
  402c58:	e060      	b.n	402d1c <SystemCoreClockUpdate+0x110>
        SystemCoreClock = CHIP_FREQ_MAINCK_RC_4MHZ;
  402c5a:	4b42      	ldr	r3, [pc, #264]	; (402d64 <SystemCoreClockUpdate+0x158>)
  402c5c:	4a43      	ldr	r2, [pc, #268]	; (402d6c <SystemCoreClockUpdate+0x160>)
  402c5e:	601a      	str	r2, [r3, #0]
        switch ( PMC->CKGR_MOR & CKGR_MOR_MOSCRCF_Msk )
  402c60:	4b3e      	ldr	r3, [pc, #248]	; (402d5c <SystemCoreClockUpdate+0x150>)
  402c62:	6a1b      	ldr	r3, [r3, #32]
  402c64:	f003 0370 	and.w	r3, r3, #112	; 0x70
  402c68:	2b10      	cmp	r3, #16
  402c6a:	d004      	beq.n	402c76 <SystemCoreClockUpdate+0x6a>
  402c6c:	2b20      	cmp	r3, #32
  402c6e:	d008      	beq.n	402c82 <SystemCoreClockUpdate+0x76>
  402c70:	2b00      	cmp	r3, #0
  402c72:	d00e      	beq.n	402c92 <SystemCoreClockUpdate+0x86>
          break;
  402c74:	e00e      	b.n	402c94 <SystemCoreClockUpdate+0x88>
            SystemCoreClock *= 2U;
  402c76:	4b3b      	ldr	r3, [pc, #236]	; (402d64 <SystemCoreClockUpdate+0x158>)
  402c78:	681b      	ldr	r3, [r3, #0]
  402c7a:	005b      	lsls	r3, r3, #1
  402c7c:	4a39      	ldr	r2, [pc, #228]	; (402d64 <SystemCoreClockUpdate+0x158>)
  402c7e:	6013      	str	r3, [r2, #0]
          break;
  402c80:	e008      	b.n	402c94 <SystemCoreClockUpdate+0x88>
            SystemCoreClock *= 3U;
  402c82:	4b38      	ldr	r3, [pc, #224]	; (402d64 <SystemCoreClockUpdate+0x158>)
  402c84:	681a      	ldr	r2, [r3, #0]
  402c86:	4613      	mov	r3, r2
  402c88:	005b      	lsls	r3, r3, #1
  402c8a:	4413      	add	r3, r2
  402c8c:	4a35      	ldr	r2, [pc, #212]	; (402d64 <SystemCoreClockUpdate+0x158>)
  402c8e:	6013      	str	r3, [r2, #0]
          break;
  402c90:	e000      	b.n	402c94 <SystemCoreClockUpdate+0x88>
          break;
  402c92:	bf00      	nop
    break;
  402c94:	e042      	b.n	402d1c <SystemCoreClockUpdate+0x110>
      if ( PMC->CKGR_MOR & CKGR_MOR_MOSCSEL )
  402c96:	4b31      	ldr	r3, [pc, #196]	; (402d5c <SystemCoreClockUpdate+0x150>)
  402c98:	6a1b      	ldr	r3, [r3, #32]
  402c9a:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
  402c9e:	2b00      	cmp	r3, #0
  402ca0:	d003      	beq.n	402caa <SystemCoreClockUpdate+0x9e>
        SystemCoreClock = CHIP_FREQ_XTAL_12M ;
  402ca2:	4b30      	ldr	r3, [pc, #192]	; (402d64 <SystemCoreClockUpdate+0x158>)
  402ca4:	4a30      	ldr	r2, [pc, #192]	; (402d68 <SystemCoreClockUpdate+0x15c>)
  402ca6:	601a      	str	r2, [r3, #0]
  402ca8:	e01c      	b.n	402ce4 <SystemCoreClockUpdate+0xd8>
        SystemCoreClock = CHIP_FREQ_MAINCK_RC_4MHZ;
  402caa:	4b2e      	ldr	r3, [pc, #184]	; (402d64 <SystemCoreClockUpdate+0x158>)
  402cac:	4a2f      	ldr	r2, [pc, #188]	; (402d6c <SystemCoreClockUpdate+0x160>)
  402cae:	601a      	str	r2, [r3, #0]
        switch ( PMC->CKGR_MOR & CKGR_MOR_MOSCRCF_Msk )
  402cb0:	4b2a      	ldr	r3, [pc, #168]	; (402d5c <SystemCoreClockUpdate+0x150>)
  402cb2:	6a1b      	ldr	r3, [r3, #32]
  402cb4:	f003 0370 	and.w	r3, r3, #112	; 0x70
  402cb8:	2b10      	cmp	r3, #16
  402cba:	d004      	beq.n	402cc6 <SystemCoreClockUpdate+0xba>
  402cbc:	2b20      	cmp	r3, #32
  402cbe:	d008      	beq.n	402cd2 <SystemCoreClockUpdate+0xc6>
  402cc0:	2b00      	cmp	r3, #0
  402cc2:	d00e      	beq.n	402ce2 <SystemCoreClockUpdate+0xd6>
          break;
  402cc4:	e00e      	b.n	402ce4 <SystemCoreClockUpdate+0xd8>
            SystemCoreClock *= 2U;
  402cc6:	4b27      	ldr	r3, [pc, #156]	; (402d64 <SystemCoreClockUpdate+0x158>)
  402cc8:	681b      	ldr	r3, [r3, #0]
  402cca:	005b      	lsls	r3, r3, #1
  402ccc:	4a25      	ldr	r2, [pc, #148]	; (402d64 <SystemCoreClockUpdate+0x158>)
  402cce:	6013      	str	r3, [r2, #0]
          break;
  402cd0:	e008      	b.n	402ce4 <SystemCoreClockUpdate+0xd8>
            SystemCoreClock *= 3U;
  402cd2:	4b24      	ldr	r3, [pc, #144]	; (402d64 <SystemCoreClockUpdate+0x158>)
  402cd4:	681a      	ldr	r2, [r3, #0]
  402cd6:	4613      	mov	r3, r2
  402cd8:	005b      	lsls	r3, r3, #1
  402cda:	4413      	add	r3, r2
  402cdc:	4a21      	ldr	r2, [pc, #132]	; (402d64 <SystemCoreClockUpdate+0x158>)
  402cde:	6013      	str	r3, [r2, #0]
          break;
  402ce0:	e000      	b.n	402ce4 <SystemCoreClockUpdate+0xd8>
          break;
  402ce2:	bf00      	nop
      if ( (uint32_t) (PMC->PMC_MCKR & (uint32_t) PMC_MCKR_CSS_Msk) == PMC_MCKR_CSS_PLLA_CLK )
  402ce4:	4b1d      	ldr	r3, [pc, #116]	; (402d5c <SystemCoreClockUpdate+0x150>)
  402ce6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
  402ce8:	f003 0303 	and.w	r3, r3, #3
  402cec:	2b02      	cmp	r3, #2
  402cee:	d114      	bne.n	402d1a <SystemCoreClockUpdate+0x10e>
        SystemCoreClock *= ((((PMC->CKGR_PLLAR) & CKGR_PLLAR_MULA_Msk) >> CKGR_PLLAR_MULA_Pos) + 1U);
  402cf0:	4b1a      	ldr	r3, [pc, #104]	; (402d5c <SystemCoreClockUpdate+0x150>)
  402cf2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
  402cf4:	0c1b      	lsrs	r3, r3, #16
  402cf6:	f3c3 030a 	ubfx	r3, r3, #0, #11
  402cfa:	3301      	adds	r3, #1
  402cfc:	4a19      	ldr	r2, [pc, #100]	; (402d64 <SystemCoreClockUpdate+0x158>)
  402cfe:	6812      	ldr	r2, [r2, #0]
  402d00:	fb02 f303 	mul.w	r3, r2, r3
  402d04:	4a17      	ldr	r2, [pc, #92]	; (402d64 <SystemCoreClockUpdate+0x158>)
  402d06:	6013      	str	r3, [r2, #0]
        SystemCoreClock /= ((((PMC->CKGR_PLLAR) & CKGR_PLLAR_DIVA_Msk) >> CKGR_PLLAR_DIVA_Pos));
  402d08:	4b14      	ldr	r3, [pc, #80]	; (402d5c <SystemCoreClockUpdate+0x150>)
  402d0a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
  402d0c:	b2db      	uxtb	r3, r3
  402d0e:	4a15      	ldr	r2, [pc, #84]	; (402d64 <SystemCoreClockUpdate+0x158>)
  402d10:	6812      	ldr	r2, [r2, #0]
  402d12:	fbb2 f3f3 	udiv	r3, r2, r3
  402d16:	4a13      	ldr	r2, [pc, #76]	; (402d64 <SystemCoreClockUpdate+0x158>)
  402d18:	6013      	str	r3, [r2, #0]
    break;
  402d1a:	bf00      	nop
  }

  if ( (PMC->PMC_MCKR & PMC_MCKR_PRES_Msk) == PMC_MCKR_PRES_CLK_3 )
  402d1c:	4b0f      	ldr	r3, [pc, #60]	; (402d5c <SystemCoreClockUpdate+0x150>)
  402d1e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
  402d20:	f003 0370 	and.w	r3, r3, #112	; 0x70
  402d24:	2b70      	cmp	r3, #112	; 0x70
  402d26:	d108      	bne.n	402d3a <SystemCoreClockUpdate+0x12e>
  {
    SystemCoreClock /= 3U;
  402d28:	4b0e      	ldr	r3, [pc, #56]	; (402d64 <SystemCoreClockUpdate+0x158>)
  402d2a:	681b      	ldr	r3, [r3, #0]
  402d2c:	4a10      	ldr	r2, [pc, #64]	; (402d70 <SystemCoreClockUpdate+0x164>)
  402d2e:	fba2 2303 	umull	r2, r3, r2, r3
  402d32:	085b      	lsrs	r3, r3, #1
  402d34:	4a0b      	ldr	r2, [pc, #44]	; (402d64 <SystemCoreClockUpdate+0x158>)
  402d36:	6013      	str	r3, [r2, #0]
  }
  else
  {
    SystemCoreClock >>= ((PMC->PMC_MCKR & PMC_MCKR_PRES_Msk) >> PMC_MCKR_PRES_Pos);
  }
}
  402d38:	e00a      	b.n	402d50 <SystemCoreClockUpdate+0x144>
    SystemCoreClock >>= ((PMC->PMC_MCKR & PMC_MCKR_PRES_Msk) >> PMC_MCKR_PRES_Pos);
  402d3a:	4b08      	ldr	r3, [pc, #32]	; (402d5c <SystemCoreClockUpdate+0x150>)
  402d3c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
  402d3e:	091b      	lsrs	r3, r3, #4
  402d40:	f003 0307 	and.w	r3, r3, #7
  402d44:	4a07      	ldr	r2, [pc, #28]	; (402d64 <SystemCoreClockUpdate+0x158>)
  402d46:	6812      	ldr	r2, [r2, #0]
  402d48:	fa22 f303 	lsr.w	r3, r2, r3
  402d4c:	4a05      	ldr	r2, [pc, #20]	; (402d64 <SystemCoreClockUpdate+0x158>)
  402d4e:	6013      	str	r3, [r2, #0]
}
  402d50:	bf00      	nop
  402d52:	46bd      	mov	sp, r7
  402d54:	f85d 7b04 	ldr.w	r7, [sp], #4
  402d58:	4770      	bx	lr
  402d5a:	bf00      	nop
  402d5c:	400e0600 	.word	0x400e0600
  402d60:	400e1810 	.word	0x400e1810
  402d64:	2040001c 	.word	0x2040001c
  402d68:	00b71b00 	.word	0x00b71b00
  402d6c:	003d0900 	.word	0x003d0900
  402d70:	aaaaaaab 	.word	0xaaaaaaab

00402d74 <system_init_flash>:
/**
 * Initialize flash.
 */
void system_init_flash( uint32_t ul_clk )
{
  402d74:	b480      	push	{r7}
  402d76:	b083      	sub	sp, #12
  402d78:	af00      	add	r7, sp, #0
  402d7a:	6078      	str	r0, [r7, #4]
  /* Set FWS for embedded Flash access according to operating frequency */
  if ( ul_clk < CHIP_FREQ_FWS_0 )
  402d7c:	687b      	ldr	r3, [r7, #4]
  402d7e:	4a1d      	ldr	r2, [pc, #116]	; (402df4 <system_init_flash+0x80>)
  402d80:	4293      	cmp	r3, r2
  402d82:	d804      	bhi.n	402d8e <system_init_flash+0x1a>
  {
    EFC->EEFC_FMR = EEFC_FMR_FWS(0)|EEFC_FMR_CLOE;
  402d84:	4b1c      	ldr	r3, [pc, #112]	; (402df8 <system_init_flash+0x84>)
  402d86:	f04f 6280 	mov.w	r2, #67108864	; 0x4000000
  402d8a:	601a      	str	r2, [r3, #0]
          }
        }
      }
    }
  }
}
  402d8c:	e02b      	b.n	402de6 <system_init_flash+0x72>
    if (ul_clk < CHIP_FREQ_FWS_1)
  402d8e:	687b      	ldr	r3, [r7, #4]
  402d90:	4a1a      	ldr	r2, [pc, #104]	; (402dfc <system_init_flash+0x88>)
  402d92:	4293      	cmp	r3, r2
  402d94:	d803      	bhi.n	402d9e <system_init_flash+0x2a>
      EFC->EEFC_FMR = EEFC_FMR_FWS(1)|EEFC_FMR_CLOE;
  402d96:	4b18      	ldr	r3, [pc, #96]	; (402df8 <system_init_flash+0x84>)
  402d98:	4a19      	ldr	r2, [pc, #100]	; (402e00 <system_init_flash+0x8c>)
  402d9a:	601a      	str	r2, [r3, #0]
}
  402d9c:	e023      	b.n	402de6 <system_init_flash+0x72>
      if (ul_clk < CHIP_FREQ_FWS_2)
  402d9e:	687b      	ldr	r3, [r7, #4]
  402da0:	4a18      	ldr	r2, [pc, #96]	; (402e04 <system_init_flash+0x90>)
  402da2:	4293      	cmp	r3, r2
  402da4:	d803      	bhi.n	402dae <system_init_flash+0x3a>
        EFC->EEFC_FMR = EEFC_FMR_FWS(2)|EEFC_FMR_CLOE;
  402da6:	4b14      	ldr	r3, [pc, #80]	; (402df8 <system_init_flash+0x84>)
  402da8:	4a17      	ldr	r2, [pc, #92]	; (402e08 <system_init_flash+0x94>)
  402daa:	601a      	str	r2, [r3, #0]
}
  402dac:	e01b      	b.n	402de6 <system_init_flash+0x72>
        if ( ul_clk < CHIP_FREQ_FWS_3 )
  402dae:	687b      	ldr	r3, [r7, #4]
  402db0:	4a16      	ldr	r2, [pc, #88]	; (402e0c <system_init_flash+0x98>)
  402db2:	4293      	cmp	r3, r2
  402db4:	d803      	bhi.n	402dbe <system_init_flash+0x4a>
          EFC->EEFC_FMR = EEFC_FMR_FWS(3)|EEFC_FMR_CLOE;
  402db6:	4b10      	ldr	r3, [pc, #64]	; (402df8 <system_init_flash+0x84>)
  402db8:	4a15      	ldr	r2, [pc, #84]	; (402e10 <system_init_flash+0x9c>)
  402dba:	601a      	str	r2, [r3, #0]
}
  402dbc:	e013      	b.n	402de6 <system_init_flash+0x72>
          if ( ul_clk < CHIP_FREQ_FWS_4 )
  402dbe:	687b      	ldr	r3, [r7, #4]
  402dc0:	4a14      	ldr	r2, [pc, #80]	; (402e14 <system_init_flash+0xa0>)
  402dc2:	4293      	cmp	r3, r2
  402dc4:	d804      	bhi.n	402dd0 <system_init_flash+0x5c>
            EFC->EEFC_FMR = EEFC_FMR_FWS(4)|EEFC_FMR_CLOE;
  402dc6:	4b0c      	ldr	r3, [pc, #48]	; (402df8 <system_init_flash+0x84>)
  402dc8:	f04f 2204 	mov.w	r2, #67109888	; 0x4000400
  402dcc:	601a      	str	r2, [r3, #0]
}
  402dce:	e00a      	b.n	402de6 <system_init_flash+0x72>
            if ( ul_clk < CHIP_FREQ_FWS_5 )
  402dd0:	687b      	ldr	r3, [r7, #4]
  402dd2:	4a11      	ldr	r2, [pc, #68]	; (402e18 <system_init_flash+0xa4>)
  402dd4:	4293      	cmp	r3, r2
  402dd6:	d803      	bhi.n	402de0 <system_init_flash+0x6c>
              EFC->EEFC_FMR = EEFC_FMR_FWS(5)|EEFC_FMR_CLOE;
  402dd8:	4b07      	ldr	r3, [pc, #28]	; (402df8 <system_init_flash+0x84>)
  402dda:	4a10      	ldr	r2, [pc, #64]	; (402e1c <system_init_flash+0xa8>)
  402ddc:	601a      	str	r2, [r3, #0]
}
  402dde:	e002      	b.n	402de6 <system_init_flash+0x72>
              EFC->EEFC_FMR = EEFC_FMR_FWS(6)|EEFC_FMR_CLOE;
  402de0:	4b05      	ldr	r3, [pc, #20]	; (402df8 <system_init_flash+0x84>)
  402de2:	4a0f      	ldr	r2, [pc, #60]	; (402e20 <system_init_flash+0xac>)
  402de4:	601a      	str	r2, [r3, #0]
}
  402de6:	bf00      	nop
  402de8:	370c      	adds	r7, #12
  402dea:	46bd      	mov	sp, r7
  402dec:	f85d 7b04 	ldr.w	r7, [sp], #4
  402df0:	4770      	bx	lr
  402df2:	bf00      	nop
  402df4:	015ef3bf 	.word	0x015ef3bf
  402df8:	400e0c00 	.word	0x400e0c00
  402dfc:	02bde77f 	.word	0x02bde77f
  402e00:	04000100 	.word	0x04000100
  402e04:	041cdb3f 	.word	0x041cdb3f
  402e08:	04000200 	.word	0x04000200
  402e0c:	057bceff 	.word	0x057bceff
  402e10:	04000300 	.word	0x04000300
  402e14:	06dac2bf 	.word	0x06dac2bf
  402e18:	0839b67f 	.word	0x0839b67f
  402e1c:	04000500 	.word	0x04000500
  402e20:	04000600 	.word	0x04000600

00402e24 <NVIC_EnableIRQ>:
{
  402e24:	b480      	push	{r7}
  402e26:	b083      	sub	sp, #12
  402e28:	af00      	add	r7, sp, #0
  402e2a:	4603      	mov	r3, r0
  402e2c:	71fb      	strb	r3, [r7, #7]
  NVIC->ISER[(uint32_t)((int32_t)IRQn) >> 5] = (uint32_t)(1 << ((uint32_t)((int32_t)IRQn) & (uint32_t)0x1F)); /* enable interrupt */
  402e2e:	4909      	ldr	r1, [pc, #36]	; (402e54 <NVIC_EnableIRQ+0x30>)
  402e30:	f997 3007 	ldrsb.w	r3, [r7, #7]
  402e34:	095b      	lsrs	r3, r3, #5
  402e36:	79fa      	ldrb	r2, [r7, #7]
  402e38:	f002 021f 	and.w	r2, r2, #31
  402e3c:	2001      	movs	r0, #1
  402e3e:	fa00 f202 	lsl.w	r2, r0, r2
  402e42:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
  402e46:	bf00      	nop
  402e48:	370c      	adds	r7, #12
  402e4a:	46bd      	mov	sp, r7
  402e4c:	f85d 7b04 	ldr.w	r7, [sp], #4
  402e50:	4770      	bx	lr
  402e52:	bf00      	nop
  402e54:	e000e100 	.word	0xe000e100

00402e58 <NVIC_SetPriority>:
{
  402e58:	b480      	push	{r7}
  402e5a:	b083      	sub	sp, #12
  402e5c:	af00      	add	r7, sp, #0
  402e5e:	4603      	mov	r3, r0
  402e60:	6039      	str	r1, [r7, #0]
  402e62:	71fb      	strb	r3, [r7, #7]
  if(IRQn < 0) {
  402e64:	f997 3007 	ldrsb.w	r3, [r7, #7]
  402e68:	2b00      	cmp	r3, #0
  402e6a:	da0b      	bge.n	402e84 <NVIC_SetPriority+0x2c>
    SCB->SHPR[((uint32_t)(IRQn) & 0xF)-4] = ((priority << (8 - __NVIC_PRIO_BITS)) & 0xff); } /* set Priority for Cortex-M  System Interrupts */
  402e6c:	490d      	ldr	r1, [pc, #52]	; (402ea4 <NVIC_SetPriority+0x4c>)
  402e6e:	79fb      	ldrb	r3, [r7, #7]
  402e70:	f003 030f 	and.w	r3, r3, #15
  402e74:	3b04      	subs	r3, #4
  402e76:	683a      	ldr	r2, [r7, #0]
  402e78:	b2d2      	uxtb	r2, r2
  402e7a:	0152      	lsls	r2, r2, #5
  402e7c:	b2d2      	uxtb	r2, r2
  402e7e:	440b      	add	r3, r1
  402e80:	761a      	strb	r2, [r3, #24]
}
  402e82:	e009      	b.n	402e98 <NVIC_SetPriority+0x40>
    NVIC->IP[(uint32_t)(IRQn)]            = ((priority << (8 - __NVIC_PRIO_BITS)) & 0xff); } /* set Priority for device specific Interrupts  */
  402e84:	4908      	ldr	r1, [pc, #32]	; (402ea8 <NVIC_SetPriority+0x50>)
  402e86:	f997 3007 	ldrsb.w	r3, [r7, #7]
  402e8a:	683a      	ldr	r2, [r7, #0]
  402e8c:	b2d2      	uxtb	r2, r2
  402e8e:	0152      	lsls	r2, r2, #5
  402e90:	b2d2      	uxtb	r2, r2
  402e92:	440b      	add	r3, r1
  402e94:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
}
  402e98:	bf00      	nop
  402e9a:	370c      	adds	r7, #12
  402e9c:	46bd      	mov	sp, r7
  402e9e:	f85d 7b04 	ldr.w	r7, [sp], #4
  402ea2:	4770      	bx	lr
  402ea4:	e000ed00 	.word	0xe000ed00
  402ea8:	e000e100 	.word	0xe000e100

00402eac <all_flags_zero>:
volatile char but1_flag;
volatile char but2_flag;
volatile char but3_flag;
volatile char alarm_rtt = 0;

void all_flags_zero() {
  402eac:	b480      	push	{r7}
  402eae:	af00      	add	r7, sp, #0
	but1_flag = 0;
  402eb0:	4b06      	ldr	r3, [pc, #24]	; (402ecc <all_flags_zero+0x20>)
  402eb2:	2200      	movs	r2, #0
  402eb4:	701a      	strb	r2, [r3, #0]
	but2_flag = 0;
  402eb6:	4b06      	ldr	r3, [pc, #24]	; (402ed0 <all_flags_zero+0x24>)
  402eb8:	2200      	movs	r2, #0
  402eba:	701a      	strb	r2, [r3, #0]
	but3_flag = 0;
  402ebc:	4b05      	ldr	r3, [pc, #20]	; (402ed4 <all_flags_zero+0x28>)
  402ebe:	2200      	movs	r2, #0
  402ec0:	701a      	strb	r2, [r3, #0]
}
  402ec2:	bf00      	nop
  402ec4:	46bd      	mov	sp, r7
  402ec6:	f85d 7b04 	ldr.w	r7, [sp], #4
  402eca:	4770      	bx	lr
  402ecc:	204006e5 	.word	0x204006e5
  402ed0:	204006e7 	.word	0x204006e7
  402ed4:	204006e6 	.word	0x204006e6

00402ed8 <erase_oled>:


void erase_oled() {
  402ed8:	b598      	push	{r3, r4, r7, lr}
  402eda:	af00      	add	r7, sp, #0
	gfx_mono_draw_string("             ", 0, 5, &sysfont);
  402edc:	4b06      	ldr	r3, [pc, #24]	; (402ef8 <erase_oled+0x20>)
  402ede:	2205      	movs	r2, #5
  402ee0:	2100      	movs	r1, #0
  402ee2:	4806      	ldr	r0, [pc, #24]	; (402efc <erase_oled+0x24>)
  402ee4:	4c06      	ldr	r4, [pc, #24]	; (402f00 <erase_oled+0x28>)
  402ee6:	47a0      	blx	r4
	gfx_mono_draw_string("             ", 0, 16, &sysfont);
  402ee8:	4b03      	ldr	r3, [pc, #12]	; (402ef8 <erase_oled+0x20>)
  402eea:	2210      	movs	r2, #16
  402eec:	2100      	movs	r1, #0
  402eee:	4803      	ldr	r0, [pc, #12]	; (402efc <erase_oled+0x24>)
  402ef0:	4c03      	ldr	r4, [pc, #12]	; (402f00 <erase_oled+0x28>)
  402ef2:	47a0      	blx	r4
}
  402ef4:	bf00      	nop
  402ef6:	bd98      	pop	{r3, r4, r7, pc}
  402ef8:	2040000c 	.word	0x2040000c
  402efc:	004044d0 	.word	0x004044d0
  402f00:	00400e99 	.word	0x00400e99

00402f04 <draw_oled>:

void draw_oled(char str[10]) {
  402f04:	b590      	push	{r4, r7, lr}
  402f06:	b083      	sub	sp, #12
  402f08:	af00      	add	r7, sp, #0
  402f0a:	6078      	str	r0, [r7, #4]
	gfx_mono_draw_string(str, 0, 16, &sysfont);
  402f0c:	4b04      	ldr	r3, [pc, #16]	; (402f20 <draw_oled+0x1c>)
  402f0e:	2210      	movs	r2, #16
  402f10:	2100      	movs	r1, #0
  402f12:	6878      	ldr	r0, [r7, #4]
  402f14:	4c03      	ldr	r4, [pc, #12]	; (402f24 <draw_oled+0x20>)
  402f16:	47a0      	blx	r4
}
  402f18:	bf00      	nop
  402f1a:	370c      	adds	r7, #12
  402f1c:	46bd      	mov	sp, r7
  402f1e:	bd90      	pop	{r4, r7, pc}
  402f20:	2040000c 	.word	0x2040000c
  402f24:	00400e99 	.word	0x00400e99

00402f28 <pin_toggle>:

void pin_toggle(Pio *pio, uint32_t mask) {
  402f28:	b580      	push	{r7, lr}
  402f2a:	b082      	sub	sp, #8
  402f2c:	af00      	add	r7, sp, #0
  402f2e:	6078      	str	r0, [r7, #4]
  402f30:	6039      	str	r1, [r7, #0]
	pio_get_output_data_status(pio, mask) ? pio_clear(pio, mask) : pio_set(pio,mask);
  402f32:	6839      	ldr	r1, [r7, #0]
  402f34:	6878      	ldr	r0, [r7, #4]
  402f36:	4b09      	ldr	r3, [pc, #36]	; (402f5c <pin_toggle+0x34>)
  402f38:	4798      	blx	r3
  402f3a:	4603      	mov	r3, r0
  402f3c:	2b00      	cmp	r3, #0
  402f3e:	d004      	beq.n	402f4a <pin_toggle+0x22>
  402f40:	6839      	ldr	r1, [r7, #0]
  402f42:	6878      	ldr	r0, [r7, #4]
  402f44:	4b06      	ldr	r3, [pc, #24]	; (402f60 <pin_toggle+0x38>)
  402f46:	4798      	blx	r3
}
  402f48:	e003      	b.n	402f52 <pin_toggle+0x2a>
	pio_get_output_data_status(pio, mask) ? pio_clear(pio, mask) : pio_set(pio,mask);
  402f4a:	6839      	ldr	r1, [r7, #0]
  402f4c:	6878      	ldr	r0, [r7, #4]
  402f4e:	4b05      	ldr	r3, [pc, #20]	; (402f64 <pin_toggle+0x3c>)
  402f50:	4798      	blx	r3
}
  402f52:	bf00      	nop
  402f54:	3708      	adds	r7, #8
  402f56:	46bd      	mov	sp, r7
  402f58:	bd80      	pop	{r7, pc}
  402f5a:	bf00      	nop
  402f5c:	004024bd 	.word	0x004024bd
  402f60:	004021e1 	.word	0x004021e1
  402f64:	004021c5 	.word	0x004021c5

00402f68 <toggle_all>:

void toggle_all() {
  402f68:	b580      	push	{r7, lr}
  402f6a:	af00      	add	r7, sp, #0
	pin_toggle(LED_1_PIO, LED_1_IDX_MASK);
  402f6c:	2101      	movs	r1, #1
  402f6e:	4807      	ldr	r0, [pc, #28]	; (402f8c <toggle_all+0x24>)
  402f70:	4b07      	ldr	r3, [pc, #28]	; (402f90 <toggle_all+0x28>)
  402f72:	4798      	blx	r3
	pin_toggle(LED_2_PIO, LED_2_IDX_MASK);
  402f74:	f04f 4180 	mov.w	r1, #1073741824	; 0x40000000
  402f78:	4806      	ldr	r0, [pc, #24]	; (402f94 <toggle_all+0x2c>)
  402f7a:	4b05      	ldr	r3, [pc, #20]	; (402f90 <toggle_all+0x28>)
  402f7c:	4798      	blx	r3
	pin_toggle(LED_3_PIO, LED_3_IDX_MASK);
  402f7e:	2104      	movs	r1, #4
  402f80:	4805      	ldr	r0, [pc, #20]	; (402f98 <toggle_all+0x30>)
  402f82:	4b03      	ldr	r3, [pc, #12]	; (402f90 <toggle_all+0x28>)
  402f84:	4798      	blx	r3
}
  402f86:	bf00      	nop
  402f88:	bd80      	pop	{r7, pc}
  402f8a:	bf00      	nop
  402f8c:	400e0e00 	.word	0x400e0e00
  402f90:	00402f29 	.word	0x00402f29
  402f94:	400e1200 	.word	0x400e1200
  402f98:	400e1000 	.word	0x400e1000

00402f9c <all_leds_on>:

void all_leds_on() {
  402f9c:	b580      	push	{r7, lr}
  402f9e:	af00      	add	r7, sp, #0
	pio_clear(LED_1_PIO, LED_1_IDX_MASK);
  402fa0:	2101      	movs	r1, #1
  402fa2:	4807      	ldr	r0, [pc, #28]	; (402fc0 <all_leds_on+0x24>)
  402fa4:	4b07      	ldr	r3, [pc, #28]	; (402fc4 <all_leds_on+0x28>)
  402fa6:	4798      	blx	r3
	pio_clear(LED_2_PIO, LED_2_IDX_MASK);
  402fa8:	f04f 4180 	mov.w	r1, #1073741824	; 0x40000000
  402fac:	4806      	ldr	r0, [pc, #24]	; (402fc8 <all_leds_on+0x2c>)
  402fae:	4b05      	ldr	r3, [pc, #20]	; (402fc4 <all_leds_on+0x28>)
  402fb0:	4798      	blx	r3
	pio_clear(LED_3_PIO, LED_3_IDX_MASK);
  402fb2:	2104      	movs	r1, #4
  402fb4:	4805      	ldr	r0, [pc, #20]	; (402fcc <all_leds_on+0x30>)
  402fb6:	4b03      	ldr	r3, [pc, #12]	; (402fc4 <all_leds_on+0x28>)
  402fb8:	4798      	blx	r3
}
  402fba:	bf00      	nop
  402fbc:	bd80      	pop	{r7, pc}
  402fbe:	bf00      	nop
  402fc0:	400e0e00 	.word	0x400e0e00
  402fc4:	004021e1 	.word	0x004021e1
  402fc8:	400e1200 	.word	0x400e1200
  402fcc:	400e1000 	.word	0x400e1000

00402fd0 <but1_callback>:

void but1_callback(void) {
  402fd0:	b480      	push	{r7}
  402fd2:	af00      	add	r7, sp, #0
	but1_flag = 1;
  402fd4:	4b03      	ldr	r3, [pc, #12]	; (402fe4 <but1_callback+0x14>)
  402fd6:	2201      	movs	r2, #1
  402fd8:	701a      	strb	r2, [r3, #0]
}
  402fda:	bf00      	nop
  402fdc:	46bd      	mov	sp, r7
  402fde:	f85d 7b04 	ldr.w	r7, [sp], #4
  402fe2:	4770      	bx	lr
  402fe4:	204006e5 	.word	0x204006e5

00402fe8 <but2_callback>:

void but2_callback(void) {
  402fe8:	b480      	push	{r7}
  402fea:	af00      	add	r7, sp, #0
	but2_flag = 1;
  402fec:	4b03      	ldr	r3, [pc, #12]	; (402ffc <but2_callback+0x14>)
  402fee:	2201      	movs	r2, #1
  402ff0:	701a      	strb	r2, [r3, #0]
}
  402ff2:	bf00      	nop
  402ff4:	46bd      	mov	sp, r7
  402ff6:	f85d 7b04 	ldr.w	r7, [sp], #4
  402ffa:	4770      	bx	lr
  402ffc:	204006e7 	.word	0x204006e7

00403000 <but3_callback>:

void but3_callback(void) {
  403000:	b480      	push	{r7}
  403002:	af00      	add	r7, sp, #0
	but3_flag = 1;
  403004:	4b03      	ldr	r3, [pc, #12]	; (403014 <but3_callback+0x14>)
  403006:	2201      	movs	r2, #1
  403008:	701a      	strb	r2, [r3, #0]
}
  40300a:	bf00      	nop
  40300c:	46bd      	mov	sp, r7
  40300e:	f85d 7b04 	ldr.w	r7, [sp], #4
  403012:	4770      	bx	lr
  403014:	204006e6 	.word	0x204006e6

00403018 <handle_passwd>:

int handle_passwd(int passwd[], int *p_n) {
  403018:	b480      	push	{r7}
  40301a:	b085      	sub	sp, #20
  40301c:	af00      	add	r7, sp, #0
  40301e:	6078      	str	r0, [r7, #4]
  403020:	6039      	str	r1, [r7, #0]
	int n = *p_n;
  403022:	683b      	ldr	r3, [r7, #0]
  403024:	681b      	ldr	r3, [r3, #0]
  403026:	60fb      	str	r3, [r7, #12]
	if(but1_flag) {
  403028:	4b21      	ldr	r3, [pc, #132]	; (4030b0 <handle_passwd+0x98>)
  40302a:	781b      	ldrb	r3, [r3, #0]
  40302c:	b2db      	uxtb	r3, r3
  40302e:	2b00      	cmp	r3, #0
  403030:	d00b      	beq.n	40304a <handle_passwd+0x32>
		passwd[n] = 1;
  403032:	68fb      	ldr	r3, [r7, #12]
  403034:	009b      	lsls	r3, r3, #2
  403036:	687a      	ldr	r2, [r7, #4]
  403038:	4413      	add	r3, r2
  40303a:	2201      	movs	r2, #1
  40303c:	601a      	str	r2, [r3, #0]
		n++;
  40303e:	68fb      	ldr	r3, [r7, #12]
  403040:	3301      	adds	r3, #1
  403042:	60fb      	str	r3, [r7, #12]
		but1_flag = 0;
  403044:	4b1a      	ldr	r3, [pc, #104]	; (4030b0 <handle_passwd+0x98>)
  403046:	2200      	movs	r2, #0
  403048:	701a      	strb	r2, [r3, #0]
	}
	if(but2_flag) {
  40304a:	4b1a      	ldr	r3, [pc, #104]	; (4030b4 <handle_passwd+0x9c>)
  40304c:	781b      	ldrb	r3, [r3, #0]
  40304e:	b2db      	uxtb	r3, r3
  403050:	2b00      	cmp	r3, #0
  403052:	d00b      	beq.n	40306c <handle_passwd+0x54>
		passwd[n] = 2;
  403054:	68fb      	ldr	r3, [r7, #12]
  403056:	009b      	lsls	r3, r3, #2
  403058:	687a      	ldr	r2, [r7, #4]
  40305a:	4413      	add	r3, r2
  40305c:	2202      	movs	r2, #2
  40305e:	601a      	str	r2, [r3, #0]
		n++;
  403060:	68fb      	ldr	r3, [r7, #12]
  403062:	3301      	adds	r3, #1
  403064:	60fb      	str	r3, [r7, #12]
		but2_flag = 0;
  403066:	4b13      	ldr	r3, [pc, #76]	; (4030b4 <handle_passwd+0x9c>)
  403068:	2200      	movs	r2, #0
  40306a:	701a      	strb	r2, [r3, #0]
	}
	if(but3_flag) {
  40306c:	4b12      	ldr	r3, [pc, #72]	; (4030b8 <handle_passwd+0xa0>)
  40306e:	781b      	ldrb	r3, [r3, #0]
  403070:	b2db      	uxtb	r3, r3
  403072:	2b00      	cmp	r3, #0
  403074:	d00b      	beq.n	40308e <handle_passwd+0x76>
		passwd[n] = 3;
  403076:	68fb      	ldr	r3, [r7, #12]
  403078:	009b      	lsls	r3, r3, #2
  40307a:	687a      	ldr	r2, [r7, #4]
  40307c:	4413      	add	r3, r2
  40307e:	2203      	movs	r2, #3
  403080:	601a      	str	r2, [r3, #0]
		n++;
  403082:	68fb      	ldr	r3, [r7, #12]
  403084:	3301      	adds	r3, #1
  403086:	60fb      	str	r3, [r7, #12]
		but3_flag = 0;
  403088:	4b0b      	ldr	r3, [pc, #44]	; (4030b8 <handle_passwd+0xa0>)
  40308a:	2200      	movs	r2, #0
  40308c:	701a      	strb	r2, [r3, #0]
	}
	
	if (n != *p_n) {
  40308e:	683b      	ldr	r3, [r7, #0]
  403090:	681a      	ldr	r2, [r3, #0]
  403092:	68fb      	ldr	r3, [r7, #12]
  403094:	429a      	cmp	r2, r3
  403096:	d004      	beq.n	4030a2 <handle_passwd+0x8a>
		*p_n = n;
  403098:	683b      	ldr	r3, [r7, #0]
  40309a:	68fa      	ldr	r2, [r7, #12]
  40309c:	601a      	str	r2, [r3, #0]
		return 1;
  40309e:	2301      	movs	r3, #1
  4030a0:	e000      	b.n	4030a4 <handle_passwd+0x8c>
	}
	
	return 0;
  4030a2:	2300      	movs	r3, #0
}
  4030a4:	4618      	mov	r0, r3
  4030a6:	3714      	adds	r7, #20
  4030a8:	46bd      	mov	sp, r7
  4030aa:	f85d 7b04 	ldr.w	r7, [sp], #4
  4030ae:	4770      	bx	lr
  4030b0:	204006e5 	.word	0x204006e5
  4030b4:	204006e7 	.word	0x204006e7
  4030b8:	204006e6 	.word	0x204006e6

004030bc <check_passwd>:

int check_passwd(int passwd[], int input[], int n) {
  4030bc:	b480      	push	{r7}
  4030be:	b089      	sub	sp, #36	; 0x24
  4030c0:	af00      	add	r7, sp, #0
  4030c2:	60f8      	str	r0, [r7, #12]
  4030c4:	60b9      	str	r1, [r7, #8]
  4030c6:	607a      	str	r2, [r7, #4]
	for (int i = 0; i < n; i++) {
  4030c8:	2300      	movs	r3, #0
  4030ca:	61fb      	str	r3, [r7, #28]
  4030cc:	e01c      	b.n	403108 <check_passwd+0x4c>
		int a = passwd[i];
  4030ce:	69fb      	ldr	r3, [r7, #28]
  4030d0:	009b      	lsls	r3, r3, #2
  4030d2:	68fa      	ldr	r2, [r7, #12]
  4030d4:	4413      	add	r3, r2
  4030d6:	681b      	ldr	r3, [r3, #0]
  4030d8:	61bb      	str	r3, [r7, #24]
		int b = input[i];
  4030da:	69fb      	ldr	r3, [r7, #28]
  4030dc:	009b      	lsls	r3, r3, #2
  4030de:	68ba      	ldr	r2, [r7, #8]
  4030e0:	4413      	add	r3, r2
  4030e2:	681b      	ldr	r3, [r3, #0]
  4030e4:	617b      	str	r3, [r7, #20]
		if(passwd[i] != input[i]) {
  4030e6:	69fb      	ldr	r3, [r7, #28]
  4030e8:	009b      	lsls	r3, r3, #2
  4030ea:	68fa      	ldr	r2, [r7, #12]
  4030ec:	4413      	add	r3, r2
  4030ee:	681a      	ldr	r2, [r3, #0]
  4030f0:	69fb      	ldr	r3, [r7, #28]
  4030f2:	009b      	lsls	r3, r3, #2
  4030f4:	68b9      	ldr	r1, [r7, #8]
  4030f6:	440b      	add	r3, r1
  4030f8:	681b      	ldr	r3, [r3, #0]
  4030fa:	429a      	cmp	r2, r3
  4030fc:	d001      	beq.n	403102 <check_passwd+0x46>
			return 0;
  4030fe:	2300      	movs	r3, #0
  403100:	e007      	b.n	403112 <check_passwd+0x56>
	for (int i = 0; i < n; i++) {
  403102:	69fb      	ldr	r3, [r7, #28]
  403104:	3301      	adds	r3, #1
  403106:	61fb      	str	r3, [r7, #28]
  403108:	69fa      	ldr	r2, [r7, #28]
  40310a:	687b      	ldr	r3, [r7, #4]
  40310c:	429a      	cmp	r2, r3
  40310e:	dbde      	blt.n	4030ce <check_passwd+0x12>
		}
	}
	return 1;
  403110:	2301      	movs	r3, #1
}
  403112:	4618      	mov	r0, r3
  403114:	3724      	adds	r7, #36	; 0x24
  403116:	46bd      	mov	sp, r7
  403118:	f85d 7b04 	ldr.w	r7, [sp], #4
  40311c:	4770      	bx	lr
	...

00403120 <RTT_Handler>:

/************************************************************************/
/* handlers                                                              */
/************************************************************************/

void RTT_Handler(void) {
  403120:	b580      	push	{r7, lr}
  403122:	b082      	sub	sp, #8
  403124:	af00      	add	r7, sp, #0
	uint32_t ul_status;

	ul_status = rtt_get_status(RTT);
  403126:	4808      	ldr	r0, [pc, #32]	; (403148 <RTT_Handler+0x28>)
  403128:	4b08      	ldr	r3, [pc, #32]	; (40314c <RTT_Handler+0x2c>)
  40312a:	4798      	blx	r3
  40312c:	6078      	str	r0, [r7, #4]
	
	//alarm
	if ((ul_status & RTT_SR_ALMS) == RTT_SR_ALMS) {
  40312e:	687b      	ldr	r3, [r7, #4]
  403130:	f003 0301 	and.w	r3, r3, #1
  403134:	2b00      	cmp	r3, #0
  403136:	d002      	beq.n	40313e <RTT_Handler+0x1e>
		alarm_rtt = 1;
  403138:	4b05      	ldr	r3, [pc, #20]	; (403150 <RTT_Handler+0x30>)
  40313a:	2201      	movs	r2, #1
  40313c:	701a      	strb	r2, [r3, #0]
	//time
	if ((ul_status & RTT_SR_RTTINC) == RTT_SR_RTTINC) {
		//TODO
	}

}
  40313e:	bf00      	nop
  403140:	3708      	adds	r7, #8
  403142:	46bd      	mov	sp, r7
  403144:	bd80      	pop	{r7, pc}
  403146:	bf00      	nop
  403148:	400e1830 	.word	0x400e1830
  40314c:	004002db 	.word	0x004002db
  403150:	204006e4 	.word	0x204006e4

00403154 <TC0_Handler>:

void TC0_Handler(void) {
  403154:	b580      	push	{r7, lr}
  403156:	b082      	sub	sp, #8
  403158:	af00      	add	r7, sp, #0
	
	volatile uint32_t status = tc_get_status(TC0, 0);
  40315a:	2100      	movs	r1, #0
  40315c:	4805      	ldr	r0, [pc, #20]	; (403174 <TC0_Handler+0x20>)
  40315e:	4b06      	ldr	r3, [pc, #24]	; (403178 <TC0_Handler+0x24>)
  403160:	4798      	blx	r3
  403162:	4603      	mov	r3, r0
  403164:	607b      	str	r3, [r7, #4]
	toggle_all();
  403166:	4b05      	ldr	r3, [pc, #20]	; (40317c <TC0_Handler+0x28>)
  403168:	4798      	blx	r3
}
  40316a:	bf00      	nop
  40316c:	3708      	adds	r7, #8
  40316e:	46bd      	mov	sp, r7
  403170:	bd80      	pop	{r7, pc}
  403172:	bf00      	nop
  403174:	4000c000 	.word	0x4000c000
  403178:	0040077b 	.word	0x0040077b
  40317c:	00402f69 	.word	0x00402f69

00403180 <TC1_Handler>:

void TC1_Handler(void) {
  403180:	b580      	push	{r7, lr}
  403182:	b082      	sub	sp, #8
  403184:	af00      	add	r7, sp, #0
	
	volatile uint32_t status = tc_get_status(TC0, 1);
  403186:	2101      	movs	r1, #1
  403188:	4805      	ldr	r0, [pc, #20]	; (4031a0 <TC1_Handler+0x20>)
  40318a:	4b06      	ldr	r3, [pc, #24]	; (4031a4 <TC1_Handler+0x24>)
  40318c:	4798      	blx	r3
  40318e:	4603      	mov	r3, r0
  403190:	607b      	str	r3, [r7, #4]
	toggle_all();
  403192:	4b05      	ldr	r3, [pc, #20]	; (4031a8 <TC1_Handler+0x28>)
  403194:	4798      	blx	r3
}
  403196:	bf00      	nop
  403198:	3708      	adds	r7, #8
  40319a:	46bd      	mov	sp, r7
  40319c:	bd80      	pop	{r7, pc}
  40319e:	bf00      	nop
  4031a0:	4000c000 	.word	0x4000c000
  4031a4:	0040077b 	.word	0x0040077b
  4031a8:	00402f69 	.word	0x00402f69

004031ac <io_init>:

/************************************************************************/
/* init                                                              */
/************************************************************************/

void io_init(void) {
  4031ac:	b590      	push	{r4, r7, lr}
  4031ae:	b083      	sub	sp, #12
  4031b0:	af02      	add	r7, sp, #8
  pmc_enable_periph_clk(LED_1_PIO_ID);
  4031b2:	200a      	movs	r0, #10
  4031b4:	4b45      	ldr	r3, [pc, #276]	; (4032cc <io_init+0x120>)
  4031b6:	4798      	blx	r3
  pmc_enable_periph_clk(LED_2_PIO_ID);
  4031b8:	200c      	movs	r0, #12
  4031ba:	4b44      	ldr	r3, [pc, #272]	; (4032cc <io_init+0x120>)
  4031bc:	4798      	blx	r3
  pmc_enable_periph_clk(LED_3_PIO_ID);
  4031be:	200b      	movs	r0, #11
  4031c0:	4b42      	ldr	r3, [pc, #264]	; (4032cc <io_init+0x120>)
  4031c2:	4798      	blx	r3
  pmc_enable_periph_clk(BUT1_PIO_ID);
  4031c4:	2010      	movs	r0, #16
  4031c6:	4b41      	ldr	r3, [pc, #260]	; (4032cc <io_init+0x120>)
  4031c8:	4798      	blx	r3
  pmc_enable_periph_clk(BUT2_PIO_ID);
  4031ca:	200c      	movs	r0, #12
  4031cc:	4b3f      	ldr	r3, [pc, #252]	; (4032cc <io_init+0x120>)
  4031ce:	4798      	blx	r3
  pmc_enable_periph_clk(BUT3_PIO_ID);
  4031d0:	200a      	movs	r0, #10
  4031d2:	4b3e      	ldr	r3, [pc, #248]	; (4032cc <io_init+0x120>)
  4031d4:	4798      	blx	r3

  pio_configure(LED_1_PIO, PIO_OUTPUT_1, LED_1_IDX_MASK, PIO_DEFAULT);
  4031d6:	2300      	movs	r3, #0
  4031d8:	2201      	movs	r2, #1
  4031da:	f04f 5160 	mov.w	r1, #939524096	; 0x38000000
  4031de:	483c      	ldr	r0, [pc, #240]	; (4032d0 <io_init+0x124>)
  4031e0:	4c3c      	ldr	r4, [pc, #240]	; (4032d4 <io_init+0x128>)
  4031e2:	47a0      	blx	r4
  pio_configure(LED_2_PIO, PIO_OUTPUT_1, LED_2_IDX_MASK, PIO_DEFAULT);
  4031e4:	2300      	movs	r3, #0
  4031e6:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
  4031ea:	f04f 5160 	mov.w	r1, #939524096	; 0x38000000
  4031ee:	483a      	ldr	r0, [pc, #232]	; (4032d8 <io_init+0x12c>)
  4031f0:	4c38      	ldr	r4, [pc, #224]	; (4032d4 <io_init+0x128>)
  4031f2:	47a0      	blx	r4
  pio_configure(LED_3_PIO, PIO_OUTPUT_1, LED_3_IDX_MASK, PIO_DEFAULT);
  4031f4:	2300      	movs	r3, #0
  4031f6:	2204      	movs	r2, #4
  4031f8:	f04f 5160 	mov.w	r1, #939524096	; 0x38000000
  4031fc:	4837      	ldr	r0, [pc, #220]	; (4032dc <io_init+0x130>)
  4031fe:	4c35      	ldr	r4, [pc, #212]	; (4032d4 <io_init+0x128>)
  403200:	47a0      	blx	r4

  pio_configure(BUT1_PIO, PIO_INPUT, BUT1_IDX_MASK, PIO_PULLUP| PIO_DEBOUNCE);
  403202:	2309      	movs	r3, #9
  403204:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
  403208:	f04f 5120 	mov.w	r1, #671088640	; 0x28000000
  40320c:	4834      	ldr	r0, [pc, #208]	; (4032e0 <io_init+0x134>)
  40320e:	4c31      	ldr	r4, [pc, #196]	; (4032d4 <io_init+0x128>)
  403210:	47a0      	blx	r4
  pio_configure(BUT2_PIO, PIO_INPUT, BUT2_IDX_MASK, PIO_PULLUP| PIO_DEBOUNCE);
  403212:	2309      	movs	r3, #9
  403214:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
  403218:	f04f 5120 	mov.w	r1, #671088640	; 0x28000000
  40321c:	482e      	ldr	r0, [pc, #184]	; (4032d8 <io_init+0x12c>)
  40321e:	4c2d      	ldr	r4, [pc, #180]	; (4032d4 <io_init+0x128>)
  403220:	47a0      	blx	r4
  pio_configure(BUT3_PIO, PIO_INPUT, BUT3_IDX_MASK, PIO_PULLUP| PIO_DEBOUNCE);
  403222:	2309      	movs	r3, #9
  403224:	f44f 2200 	mov.w	r2, #524288	; 0x80000
  403228:	f04f 5120 	mov.w	r1, #671088640	; 0x28000000
  40322c:	4828      	ldr	r0, [pc, #160]	; (4032d0 <io_init+0x124>)
  40322e:	4c29      	ldr	r4, [pc, #164]	; (4032d4 <io_init+0x128>)
  403230:	47a0      	blx	r4

  pio_handler_set(BUT1_PIO, BUT1_PIO_ID, BUT1_IDX_MASK, PIO_IT_FALL_EDGE,
  403232:	4b2c      	ldr	r3, [pc, #176]	; (4032e4 <io_init+0x138>)
  403234:	9300      	str	r3, [sp, #0]
  403236:	2350      	movs	r3, #80	; 0x50
  403238:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
  40323c:	2110      	movs	r1, #16
  40323e:	4828      	ldr	r0, [pc, #160]	; (4032e0 <io_init+0x134>)
  403240:	4c29      	ldr	r4, [pc, #164]	; (4032e8 <io_init+0x13c>)
  403242:	47a0      	blx	r4
  but1_callback);
  pio_handler_set(BUT2_PIO, BUT2_PIO_ID, BUT2_IDX_MASK, PIO_IT_FALL_EDGE,
  403244:	4b29      	ldr	r3, [pc, #164]	; (4032ec <io_init+0x140>)
  403246:	9300      	str	r3, [sp, #0]
  403248:	2350      	movs	r3, #80	; 0x50
  40324a:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
  40324e:	210c      	movs	r1, #12
  403250:	4821      	ldr	r0, [pc, #132]	; (4032d8 <io_init+0x12c>)
  403252:	4c25      	ldr	r4, [pc, #148]	; (4032e8 <io_init+0x13c>)
  403254:	47a0      	blx	r4
  but2_callback);
  pio_handler_set(BUT3_PIO, BUT3_PIO_ID, BUT3_IDX_MASK, PIO_IT_FALL_EDGE,
  403256:	4b26      	ldr	r3, [pc, #152]	; (4032f0 <io_init+0x144>)
  403258:	9300      	str	r3, [sp, #0]
  40325a:	2350      	movs	r3, #80	; 0x50
  40325c:	f44f 2200 	mov.w	r2, #524288	; 0x80000
  403260:	210a      	movs	r1, #10
  403262:	481b      	ldr	r0, [pc, #108]	; (4032d0 <io_init+0x124>)
  403264:	4c20      	ldr	r4, [pc, #128]	; (4032e8 <io_init+0x13c>)
  403266:	47a0      	blx	r4
  but3_callback);

  pio_enable_interrupt(BUT1_PIO, BUT1_IDX_MASK);
  403268:	f04f 5180 	mov.w	r1, #268435456	; 0x10000000
  40326c:	481c      	ldr	r0, [pc, #112]	; (4032e0 <io_init+0x134>)
  40326e:	4b21      	ldr	r3, [pc, #132]	; (4032f4 <io_init+0x148>)
  403270:	4798      	blx	r3
  pio_enable_interrupt(BUT2_PIO, BUT2_IDX_MASK);
  403272:	f04f 4100 	mov.w	r1, #2147483648	; 0x80000000
  403276:	4818      	ldr	r0, [pc, #96]	; (4032d8 <io_init+0x12c>)
  403278:	4b1e      	ldr	r3, [pc, #120]	; (4032f4 <io_init+0x148>)
  40327a:	4798      	blx	r3
  pio_enable_interrupt(BUT3_PIO, BUT3_IDX_MASK);
  40327c:	f44f 2100 	mov.w	r1, #524288	; 0x80000
  403280:	4813      	ldr	r0, [pc, #76]	; (4032d0 <io_init+0x124>)
  403282:	4b1c      	ldr	r3, [pc, #112]	; (4032f4 <io_init+0x148>)
  403284:	4798      	blx	r3

  pio_get_interrupt_status(BUT1_PIO);
  403286:	4816      	ldr	r0, [pc, #88]	; (4032e0 <io_init+0x134>)
  403288:	4b1b      	ldr	r3, [pc, #108]	; (4032f8 <io_init+0x14c>)
  40328a:	4798      	blx	r3
  pio_get_interrupt_status(BUT2_PIO);
  40328c:	4812      	ldr	r0, [pc, #72]	; (4032d8 <io_init+0x12c>)
  40328e:	4b1a      	ldr	r3, [pc, #104]	; (4032f8 <io_init+0x14c>)
  403290:	4798      	blx	r3
  pio_get_interrupt_status(BUT3_PIO);
  403292:	480f      	ldr	r0, [pc, #60]	; (4032d0 <io_init+0x124>)
  403294:	4b18      	ldr	r3, [pc, #96]	; (4032f8 <io_init+0x14c>)
  403296:	4798      	blx	r3

  NVIC_EnableIRQ(BUT1_PIO_ID);
  403298:	2010      	movs	r0, #16
  40329a:	4b18      	ldr	r3, [pc, #96]	; (4032fc <io_init+0x150>)
  40329c:	4798      	blx	r3
  NVIC_SetPriority(BUT1_PIO_ID, 4);
  40329e:	2104      	movs	r1, #4
  4032a0:	2010      	movs	r0, #16
  4032a2:	4b17      	ldr	r3, [pc, #92]	; (403300 <io_init+0x154>)
  4032a4:	4798      	blx	r3

  NVIC_EnableIRQ(BUT2_PIO_ID);
  4032a6:	200c      	movs	r0, #12
  4032a8:	4b14      	ldr	r3, [pc, #80]	; (4032fc <io_init+0x150>)
  4032aa:	4798      	blx	r3
  NVIC_SetPriority(BUT2_PIO_ID, 4);
  4032ac:	2104      	movs	r1, #4
  4032ae:	200c      	movs	r0, #12
  4032b0:	4b13      	ldr	r3, [pc, #76]	; (403300 <io_init+0x154>)
  4032b2:	4798      	blx	r3

  NVIC_EnableIRQ(BUT3_PIO_ID);
  4032b4:	200a      	movs	r0, #10
  4032b6:	4b11      	ldr	r3, [pc, #68]	; (4032fc <io_init+0x150>)
  4032b8:	4798      	blx	r3
  NVIC_SetPriority(BUT3_PIO_ID, 4);
  4032ba:	2104      	movs	r1, #4
  4032bc:	200a      	movs	r0, #10
  4032be:	4b10      	ldr	r3, [pc, #64]	; (403300 <io_init+0x154>)
  4032c0:	4798      	blx	r3
}
  4032c2:	bf00      	nop
  4032c4:	3704      	adds	r7, #4
  4032c6:	46bd      	mov	sp, r7
  4032c8:	bd90      	pop	{r4, r7, pc}
  4032ca:	bf00      	nop
  4032cc:	00402a49 	.word	0x00402a49
  4032d0:	400e0e00 	.word	0x400e0e00
  4032d4:	004023f1 	.word	0x004023f1
  4032d8:	400e1200 	.word	0x400e1200
  4032dc:	400e1000 	.word	0x400e1000
  4032e0:	400e1400 	.word	0x400e1400
  4032e4:	00402fd1 	.word	0x00402fd1
  4032e8:	0040266d 	.word	0x0040266d
  4032ec:	00402fe9 	.word	0x00402fe9
  4032f0:	00403001 	.word	0x00403001
  4032f4:	00402551 	.word	0x00402551
  4032f8:	00402589 	.word	0x00402589
  4032fc:	00402e25 	.word	0x00402e25
  403300:	00402e59 	.word	0x00402e59

00403304 <main>:

int main(void) {
  403304:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
  403308:	b08d      	sub	sp, #52	; 0x34
  40330a:	af00      	add	r7, sp, #0
	
  board_init();
  40330c:	4ba4      	ldr	r3, [pc, #656]	; (4035a0 <main+0x29c>)
  40330e:	4798      	blx	r3
  sysclk_init();
  403310:	4ba4      	ldr	r3, [pc, #656]	; (4035a4 <main+0x2a0>)
  403312:	4798      	blx	r3
  delay_init();
  io_init();
  403314:	4ba4      	ldr	r3, [pc, #656]	; (4035a8 <main+0x2a4>)
  403316:	4798      	blx	r3
  gfx_mono_ssd1306_init();
  403318:	4ba4      	ldr	r3, [pc, #656]	; (4035ac <main+0x2a8>)
  40331a:	4798      	blx	r3
	
	TC_init(TC0, ID_TC0, 0, 5);
  40331c:	2305      	movs	r3, #5
  40331e:	2200      	movs	r2, #0
  403320:	2117      	movs	r1, #23
  403322:	48a3      	ldr	r0, [pc, #652]	; (4035b0 <main+0x2ac>)
  403324:	4ca3      	ldr	r4, [pc, #652]	; (4035b4 <main+0x2b0>)
  403326:	47a0      	blx	r4
	TC_init(TC0, ID_TC1, 1, 2);
  403328:	2302      	movs	r3, #2
  40332a:	2201      	movs	r2, #1
  40332c:	2118      	movs	r1, #24
  40332e:	48a0      	ldr	r0, [pc, #640]	; (4035b0 <main+0x2ac>)
  403330:	4ca0      	ldr	r4, [pc, #640]	; (4035b4 <main+0x2b0>)
  403332:	47a0      	blx	r4
	
	int total_length = 6;
  403334:	2306      	movs	r3, #6
  403336:	627b      	str	r3, [r7, #36]	; 0x24
	int passwd[total_length];
  403338:	6a7a      	ldr	r2, [r7, #36]	; 0x24
  40333a:	1e53      	subs	r3, r2, #1
  40333c:	623b      	str	r3, [r7, #32]
  40333e:	4613      	mov	r3, r2
  403340:	f04f 0400 	mov.w	r4, #0
  403344:	0161      	lsls	r1, r4, #5
  403346:	6079      	str	r1, [r7, #4]
  403348:	6879      	ldr	r1, [r7, #4]
  40334a:	ea41 61d3 	orr.w	r1, r1, r3, lsr #27
  40334e:	6079      	str	r1, [r7, #4]
  403350:	015b      	lsls	r3, r3, #5
  403352:	603b      	str	r3, [r7, #0]
  403354:	4613      	mov	r3, r2
  403356:	f04f 0400 	mov.w	r4, #0
  40335a:	ea4f 1b44 	mov.w	fp, r4, lsl #5
  40335e:	ea4b 6bd3 	orr.w	fp, fp, r3, lsr #27
  403362:	ea4f 1a43 	mov.w	sl, r3, lsl #5
  403366:	4613      	mov	r3, r2
  403368:	009b      	lsls	r3, r3, #2
  40336a:	3303      	adds	r3, #3
  40336c:	3307      	adds	r3, #7
  40336e:	08db      	lsrs	r3, r3, #3
  403370:	00db      	lsls	r3, r3, #3
  403372:	ebad 0d03 	sub.w	sp, sp, r3
  403376:	466b      	mov	r3, sp
  403378:	3303      	adds	r3, #3
  40337a:	089b      	lsrs	r3, r3, #2
  40337c:	009b      	lsls	r3, r3, #2
  40337e:	61fb      	str	r3, [r7, #28]
	int input_passwd[total_length];
  403380:	6a7a      	ldr	r2, [r7, #36]	; 0x24
  403382:	1e53      	subs	r3, r2, #1
  403384:	61bb      	str	r3, [r7, #24]
  403386:	4613      	mov	r3, r2
  403388:	f04f 0400 	mov.w	r4, #0
  40338c:	ea4f 1944 	mov.w	r9, r4, lsl #5
  403390:	ea49 69d3 	orr.w	r9, r9, r3, lsr #27
  403394:	ea4f 1843 	mov.w	r8, r3, lsl #5
  403398:	4613      	mov	r3, r2
  40339a:	f04f 0400 	mov.w	r4, #0
  40339e:	0166      	lsls	r6, r4, #5
  4033a0:	ea46 66d3 	orr.w	r6, r6, r3, lsr #27
  4033a4:	015d      	lsls	r5, r3, #5
  4033a6:	4613      	mov	r3, r2
  4033a8:	009b      	lsls	r3, r3, #2
  4033aa:	3303      	adds	r3, #3
  4033ac:	3307      	adds	r3, #7
  4033ae:	08db      	lsrs	r3, r3, #3
  4033b0:	00db      	lsls	r3, r3, #3
  4033b2:	ebad 0d03 	sub.w	sp, sp, r3
  4033b6:	466b      	mov	r3, sp
  4033b8:	3303      	adds	r3, #3
  4033ba:	089b      	lsrs	r3, r3, #2
  4033bc:	009b      	lsls	r3, r3, #2
  4033be:	617b      	str	r3, [r7, #20]
	int n = 0;
  4033c0:	2300      	movs	r3, #0
  4033c2:	60bb      	str	r3, [r7, #8]
	
	int update_display = 0;
  4033c4:	2300      	movs	r3, #0
  4033c6:	613b      	str	r3, [r7, #16]
	int blocked = 0;
  4033c8:	2300      	movs	r3, #0
  4033ca:	62fb      	str	r3, [r7, #44]	; 0x2c
	
	
	enum states cur_state = set;
  4033cc:	2301      	movs	r3, #1
  4033ce:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
	draw_oled("set passwd");
  4033d2:	4879      	ldr	r0, [pc, #484]	; (4035b8 <main+0x2b4>)
  4033d4:	4b79      	ldr	r3, [pc, #484]	; (4035bc <main+0x2b8>)
  4033d6:	4798      	blx	r3
  
  while (1) {
    switch(cur_state) {
  4033d8:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
  4033dc:	3b01      	subs	r3, #1
  4033de:	2b03      	cmp	r3, #3
  4033e0:	d8fa      	bhi.n	4033d8 <main+0xd4>
  4033e2:	a201      	add	r2, pc, #4	; (adr r2, 4033e8 <main+0xe4>)
  4033e4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
  4033e8:	004033f9 	.word	0x004033f9
  4033ec:	00403455 	.word	0x00403455
  4033f0:	00403539 	.word	0x00403539
  4033f4:	00403561 	.word	0x00403561
			case(set):
				if (n > 5) {
  4033f8:	68bb      	ldr	r3, [r7, #8]
  4033fa:	2b05      	cmp	r3, #5
  4033fc:	dd0c      	ble.n	403418 <main+0x114>
					n = 0;
  4033fe:	2300      	movs	r3, #0
  403400:	60bb      	str	r3, [r7, #8]
					erase_oled();
  403402:	4b6f      	ldr	r3, [pc, #444]	; (4035c0 <main+0x2bc>)
  403404:	4798      	blx	r3
					all_leds_on();
  403406:	4b6f      	ldr	r3, [pc, #444]	; (4035c4 <main+0x2c0>)
  403408:	4798      	blx	r3
					cur_state = lock;
  40340a:	2302      	movs	r3, #2
  40340c:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
					draw_oled("locked");
  403410:	486d      	ldr	r0, [pc, #436]	; (4035c8 <main+0x2c4>)
  403412:	4b6a      	ldr	r3, [pc, #424]	; (4035bc <main+0x2b8>)
  403414:	4798      	blx	r3
						}
						gfx_mono_draw_string("*", n * 10, 16, &sysfont);
					}

				}
				break;
  403416:	e0ba      	b.n	40358e <main+0x28a>
					update_display = handle_passwd(passwd, &n);
  403418:	69fb      	ldr	r3, [r7, #28]
  40341a:	f107 0208 	add.w	r2, r7, #8
  40341e:	4611      	mov	r1, r2
  403420:	4618      	mov	r0, r3
  403422:	4b6a      	ldr	r3, [pc, #424]	; (4035cc <main+0x2c8>)
  403424:	4798      	blx	r3
  403426:	6138      	str	r0, [r7, #16]
					if (update_display) {
  403428:	693b      	ldr	r3, [r7, #16]
  40342a:	2b00      	cmp	r3, #0
  40342c:	f000 80af 	beq.w	40358e <main+0x28a>
						if (n == 1) {
  403430:	68bb      	ldr	r3, [r7, #8]
  403432:	2b01      	cmp	r3, #1
  403434:	d101      	bne.n	40343a <main+0x136>
							erase_oled();
  403436:	4b62      	ldr	r3, [pc, #392]	; (4035c0 <main+0x2bc>)
  403438:	4798      	blx	r3
						gfx_mono_draw_string("*", n * 10, 16, &sysfont);
  40343a:	68bb      	ldr	r3, [r7, #8]
  40343c:	b2db      	uxtb	r3, r3
  40343e:	461a      	mov	r2, r3
  403440:	0092      	lsls	r2, r2, #2
  403442:	4413      	add	r3, r2
  403444:	005b      	lsls	r3, r3, #1
  403446:	b2d9      	uxtb	r1, r3
  403448:	4b61      	ldr	r3, [pc, #388]	; (4035d0 <main+0x2cc>)
  40344a:	2210      	movs	r2, #16
  40344c:	4861      	ldr	r0, [pc, #388]	; (4035d4 <main+0x2d0>)
  40344e:	4c62      	ldr	r4, [pc, #392]	; (4035d8 <main+0x2d4>)
  403450:	47a0      	blx	r4
				break;
  403452:	e09c      	b.n	40358e <main+0x28a>
			case(lock):
				if(alarm_rtt) {
  403454:	4b61      	ldr	r3, [pc, #388]	; (4035dc <main+0x2d8>)
  403456:	781b      	ldrb	r3, [r3, #0]
  403458:	b2db      	uxtb	r3, r3
  40345a:	2b00      	cmp	r3, #0
  40345c:	d009      	beq.n	403472 <main+0x16e>
					n = 0;
  40345e:	2300      	movs	r3, #0
  403460:	60bb      	str	r3, [r7, #8]
					erase_oled();
  403462:	4b57      	ldr	r3, [pc, #348]	; (4035c0 <main+0x2bc>)
  403464:	4798      	blx	r3
					draw_oled("lock");
  403466:	485e      	ldr	r0, [pc, #376]	; (4035e0 <main+0x2dc>)
  403468:	4b54      	ldr	r3, [pc, #336]	; (4035bc <main+0x2b8>)
  40346a:	4798      	blx	r3
					alarm_rtt = 0;
  40346c:	4b5b      	ldr	r3, [pc, #364]	; (4035dc <main+0x2d8>)
  40346e:	2200      	movs	r2, #0
  403470:	701a      	strb	r2, [r3, #0]
				}	
				if (n > 5) {
  403472:	68bb      	ldr	r3, [r7, #8]
  403474:	2b05      	cmp	r3, #5
  403476:	dd3b      	ble.n	4034f0 <main+0x1ec>
					n = 0;
  403478:	2300      	movs	r3, #0
  40347a:	60bb      	str	r3, [r7, #8]
					erase_oled();
  40347c:	4b50      	ldr	r3, [pc, #320]	; (4035c0 <main+0x2bc>)
  40347e:	4798      	blx	r3
					int check = check_passwd(passwd, input_passwd, total_length);
  403480:	69fb      	ldr	r3, [r7, #28]
  403482:	6979      	ldr	r1, [r7, #20]
  403484:	6a7a      	ldr	r2, [r7, #36]	; 0x24
  403486:	4618      	mov	r0, r3
  403488:	4b56      	ldr	r3, [pc, #344]	; (4035e4 <main+0x2e0>)
  40348a:	4798      	blx	r3
  40348c:	60f8      	str	r0, [r7, #12]
					if(check) {
  40348e:	68fb      	ldr	r3, [r7, #12]
  403490:	2b00      	cmp	r3, #0
  403492:	d00c      	beq.n	4034ae <main+0x1aa>
						cur_state = open;
  403494:	2303      	movs	r3, #3
  403496:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
						draw_oled("open");
  40349a:	4853      	ldr	r0, [pc, #332]	; (4035e8 <main+0x2e4>)
  40349c:	4b47      	ldr	r3, [pc, #284]	; (4035bc <main+0x2b8>)
  40349e:	4798      	blx	r3
						toggle_all();
  4034a0:	4b52      	ldr	r3, [pc, #328]	; (4035ec <main+0x2e8>)
  4034a2:	4798      	blx	r3
						tc_start(TC0,0);
  4034a4:	2100      	movs	r1, #0
  4034a6:	4842      	ldr	r0, [pc, #264]	; (4035b0 <main+0x2ac>)
  4034a8:	4b51      	ldr	r3, [pc, #324]	; (4035f0 <main+0x2ec>)
  4034aa:	4798      	blx	r3
							erase_oled();
						}
						gfx_mono_draw_string("*", n * 10, 16, &sysfont);
					}
				}
				break;
  4034ac:	e071      	b.n	403592 <main+0x28e>
						cur_state = block;
  4034ae:	2304      	movs	r3, #4
  4034b0:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
						if(blocked) {
  4034b4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
  4034b6:	2b00      	cmp	r3, #0
  4034b8:	d009      	beq.n	4034ce <main+0x1ca>
							RTT_init(4, 32, RTT_MR_ALMIEN);
  4034ba:	f44f 3280 	mov.w	r2, #65536	; 0x10000
  4034be:	2120      	movs	r1, #32
  4034c0:	f04f 4081 	mov.w	r0, #1082130432	; 0x40800000
  4034c4:	4b4b      	ldr	r3, [pc, #300]	; (4035f4 <main+0x2f0>)
  4034c6:	4798      	blx	r3
							blocked = 0;
  4034c8:	2300      	movs	r3, #0
  4034ca:	62fb      	str	r3, [r7, #44]	; 0x2c
  4034cc:	e008      	b.n	4034e0 <main+0x1dc>
								RTT_init(4, 16, RTT_MR_ALMIEN);
  4034ce:	f44f 3280 	mov.w	r2, #65536	; 0x10000
  4034d2:	2110      	movs	r1, #16
  4034d4:	f04f 4081 	mov.w	r0, #1082130432	; 0x40800000
  4034d8:	4b46      	ldr	r3, [pc, #280]	; (4035f4 <main+0x2f0>)
  4034da:	4798      	blx	r3
								blocked = 1;
  4034dc:	2301      	movs	r3, #1
  4034de:	62fb      	str	r3, [r7, #44]	; 0x2c
						tc_start(TC0, 1);
  4034e0:	2101      	movs	r1, #1
  4034e2:	4833      	ldr	r0, [pc, #204]	; (4035b0 <main+0x2ac>)
  4034e4:	4b42      	ldr	r3, [pc, #264]	; (4035f0 <main+0x2ec>)
  4034e6:	4798      	blx	r3
						draw_oled("block");
  4034e8:	4843      	ldr	r0, [pc, #268]	; (4035f8 <main+0x2f4>)
  4034ea:	4b34      	ldr	r3, [pc, #208]	; (4035bc <main+0x2b8>)
  4034ec:	4798      	blx	r3
				break;
  4034ee:	e050      	b.n	403592 <main+0x28e>
					update_display = handle_passwd(input_passwd, &n);
  4034f0:	697b      	ldr	r3, [r7, #20]
  4034f2:	f107 0208 	add.w	r2, r7, #8
  4034f6:	4611      	mov	r1, r2
  4034f8:	4618      	mov	r0, r3
  4034fa:	4b34      	ldr	r3, [pc, #208]	; (4035cc <main+0x2c8>)
  4034fc:	4798      	blx	r3
  4034fe:	6138      	str	r0, [r7, #16]
					if (update_display) {
  403500:	693b      	ldr	r3, [r7, #16]
  403502:	2b00      	cmp	r3, #0
  403504:	d045      	beq.n	403592 <main+0x28e>
						RTT_init(4, 16, RTT_MR_ALMIEN);
  403506:	f44f 3280 	mov.w	r2, #65536	; 0x10000
  40350a:	2110      	movs	r1, #16
  40350c:	f04f 4081 	mov.w	r0, #1082130432	; 0x40800000
  403510:	4b38      	ldr	r3, [pc, #224]	; (4035f4 <main+0x2f0>)
  403512:	4798      	blx	r3
						if (n == 1) {
  403514:	68bb      	ldr	r3, [r7, #8]
  403516:	2b01      	cmp	r3, #1
  403518:	d101      	bne.n	40351e <main+0x21a>
							erase_oled();
  40351a:	4b29      	ldr	r3, [pc, #164]	; (4035c0 <main+0x2bc>)
  40351c:	4798      	blx	r3
						gfx_mono_draw_string("*", n * 10, 16, &sysfont);
  40351e:	68bb      	ldr	r3, [r7, #8]
  403520:	b2db      	uxtb	r3, r3
  403522:	461a      	mov	r2, r3
  403524:	0092      	lsls	r2, r2, #2
  403526:	4413      	add	r3, r2
  403528:	005b      	lsls	r3, r3, #1
  40352a:	b2d9      	uxtb	r1, r3
  40352c:	4b28      	ldr	r3, [pc, #160]	; (4035d0 <main+0x2cc>)
  40352e:	2210      	movs	r2, #16
  403530:	4828      	ldr	r0, [pc, #160]	; (4035d4 <main+0x2d0>)
  403532:	4c29      	ldr	r4, [pc, #164]	; (4035d8 <main+0x2d4>)
  403534:	47a0      	blx	r4
				break;
  403536:	e02c      	b.n	403592 <main+0x28e>
			case(open):
				if(but1_flag) {
  403538:	4b30      	ldr	r3, [pc, #192]	; (4035fc <main+0x2f8>)
  40353a:	781b      	ldrb	r3, [r3, #0]
  40353c:	b2db      	uxtb	r3, r3
  40353e:	2b00      	cmp	r3, #0
  403540:	d029      	beq.n	403596 <main+0x292>
					erase_oled();
  403542:	4b1f      	ldr	r3, [pc, #124]	; (4035c0 <main+0x2bc>)
  403544:	4798      	blx	r3
					draw_oled("lock");
  403546:	4826      	ldr	r0, [pc, #152]	; (4035e0 <main+0x2dc>)
  403548:	4b1c      	ldr	r3, [pc, #112]	; (4035bc <main+0x2b8>)
  40354a:	4798      	blx	r3
					cur_state = lock;
  40354c:	2302      	movs	r3, #2
  40354e:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
					tc_stop(TC0, 0);
  403552:	2100      	movs	r1, #0
  403554:	4816      	ldr	r0, [pc, #88]	; (4035b0 <main+0x2ac>)
  403556:	4b2a      	ldr	r3, [pc, #168]	; (403600 <main+0x2fc>)
  403558:	4798      	blx	r3
					all_flags_zero();
  40355a:	4b2a      	ldr	r3, [pc, #168]	; (403604 <main+0x300>)
  40355c:	4798      	blx	r3
				}
				break;
  40355e:	e01a      	b.n	403596 <main+0x292>
			case(block):
				if(alarm_rtt) {
  403560:	4b1e      	ldr	r3, [pc, #120]	; (4035dc <main+0x2d8>)
  403562:	781b      	ldrb	r3, [r3, #0]
  403564:	b2db      	uxtb	r3, r3
  403566:	2b00      	cmp	r3, #0
  403568:	d017      	beq.n	40359a <main+0x296>
					erase_oled();
  40356a:	4b15      	ldr	r3, [pc, #84]	; (4035c0 <main+0x2bc>)
  40356c:	4798      	blx	r3
					draw_oled("lock");
  40356e:	481c      	ldr	r0, [pc, #112]	; (4035e0 <main+0x2dc>)
  403570:	4b12      	ldr	r3, [pc, #72]	; (4035bc <main+0x2b8>)
  403572:	4798      	blx	r3
					cur_state = lock;
  403574:	2302      	movs	r3, #2
  403576:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
					alarm_rtt = 0;
  40357a:	4b18      	ldr	r3, [pc, #96]	; (4035dc <main+0x2d8>)
  40357c:	2200      	movs	r2, #0
  40357e:	701a      	strb	r2, [r3, #0]
					tc_stop(TC0, 1);
  403580:	2101      	movs	r1, #1
  403582:	480b      	ldr	r0, [pc, #44]	; (4035b0 <main+0x2ac>)
  403584:	4b1e      	ldr	r3, [pc, #120]	; (403600 <main+0x2fc>)
  403586:	4798      	blx	r3
					all_flags_zero();
  403588:	4b1e      	ldr	r3, [pc, #120]	; (403604 <main+0x300>)
  40358a:	4798      	blx	r3
				}
				break;
  40358c:	e005      	b.n	40359a <main+0x296>
				break;
  40358e:	bf00      	nop
  403590:	e722      	b.n	4033d8 <main+0xd4>
				break;
  403592:	bf00      	nop
  403594:	e720      	b.n	4033d8 <main+0xd4>
				break;
  403596:	bf00      	nop
  403598:	e71e      	b.n	4033d8 <main+0xd4>
				break;
  40359a:	bf00      	nop
    switch(cur_state) {
  40359c:	e71c      	b.n	4033d8 <main+0xd4>
  40359e:	bf00      	nop
  4035a0:	00402115 	.word	0x00402115
  4035a4:	00401c51 	.word	0x00401c51
  4035a8:	004031ad 	.word	0x004031ad
  4035ac:	00400f9d 	.word	0x00400f9d
  4035b0:	4000c000 	.word	0x4000c000
  4035b4:	004009dd 	.word	0x004009dd
  4035b8:	004044e0 	.word	0x004044e0
  4035bc:	00402f05 	.word	0x00402f05
  4035c0:	00402ed9 	.word	0x00402ed9
  4035c4:	00402f9d 	.word	0x00402f9d
  4035c8:	004044ec 	.word	0x004044ec
  4035cc:	00403019 	.word	0x00403019
  4035d0:	2040000c 	.word	0x2040000c
  4035d4:	004044f4 	.word	0x004044f4
  4035d8:	00400e99 	.word	0x00400e99
  4035dc:	204006e4 	.word	0x204006e4
  4035e0:	004044f8 	.word	0x004044f8
  4035e4:	004030bd 	.word	0x004030bd
  4035e8:	00404500 	.word	0x00404500
  4035ec:	00402f69 	.word	0x00402f69
  4035f0:	004006e9 	.word	0x004006e9
  4035f4:	00400a81 	.word	0x00400a81
  4035f8:	00404508 	.word	0x00404508
  4035fc:	204006e5 	.word	0x204006e5
  403600:	0040070b 	.word	0x0040070b
  403604:	00402ead 	.word	0x00402ead

00403608 <__aeabi_uldivmod>:
  403608:	b953      	cbnz	r3, 403620 <__aeabi_uldivmod+0x18>
  40360a:	b94a      	cbnz	r2, 403620 <__aeabi_uldivmod+0x18>
  40360c:	2900      	cmp	r1, #0
  40360e:	bf08      	it	eq
  403610:	2800      	cmpeq	r0, #0
  403612:	bf1c      	itt	ne
  403614:	f04f 31ff 	movne.w	r1, #4294967295
  403618:	f04f 30ff 	movne.w	r0, #4294967295
  40361c:	f000 b97a 	b.w	403914 <__aeabi_idiv0>
  403620:	f1ad 0c08 	sub.w	ip, sp, #8
  403624:	e96d ce04 	strd	ip, lr, [sp, #-16]!
  403628:	f000 f806 	bl	403638 <__udivmoddi4>
  40362c:	f8dd e004 	ldr.w	lr, [sp, #4]
  403630:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
  403634:	b004      	add	sp, #16
  403636:	4770      	bx	lr

00403638 <__udivmoddi4>:
  403638:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
  40363c:	468c      	mov	ip, r1
  40363e:	460d      	mov	r5, r1
  403640:	4604      	mov	r4, r0
  403642:	9e08      	ldr	r6, [sp, #32]
  403644:	2b00      	cmp	r3, #0
  403646:	d151      	bne.n	4036ec <__udivmoddi4+0xb4>
  403648:	428a      	cmp	r2, r1
  40364a:	4617      	mov	r7, r2
  40364c:	d96d      	bls.n	40372a <__udivmoddi4+0xf2>
  40364e:	fab2 fe82 	clz	lr, r2
  403652:	f1be 0f00 	cmp.w	lr, #0
  403656:	d00b      	beq.n	403670 <__udivmoddi4+0x38>
  403658:	f1ce 0c20 	rsb	ip, lr, #32
  40365c:	fa01 f50e 	lsl.w	r5, r1, lr
  403660:	fa20 fc0c 	lsr.w	ip, r0, ip
  403664:	fa02 f70e 	lsl.w	r7, r2, lr
  403668:	ea4c 0c05 	orr.w	ip, ip, r5
  40366c:	fa00 f40e 	lsl.w	r4, r0, lr
  403670:	ea4f 4a17 	mov.w	sl, r7, lsr #16
  403674:	0c25      	lsrs	r5, r4, #16
  403676:	fbbc f8fa 	udiv	r8, ip, sl
  40367a:	fa1f f987 	uxth.w	r9, r7
  40367e:	fb0a cc18 	mls	ip, sl, r8, ip
  403682:	ea45 450c 	orr.w	r5, r5, ip, lsl #16
  403686:	fb08 f309 	mul.w	r3, r8, r9
  40368a:	42ab      	cmp	r3, r5
  40368c:	d90a      	bls.n	4036a4 <__udivmoddi4+0x6c>
  40368e:	19ed      	adds	r5, r5, r7
  403690:	f108 32ff 	add.w	r2, r8, #4294967295
  403694:	f080 8123 	bcs.w	4038de <__udivmoddi4+0x2a6>
  403698:	42ab      	cmp	r3, r5
  40369a:	f240 8120 	bls.w	4038de <__udivmoddi4+0x2a6>
  40369e:	f1a8 0802 	sub.w	r8, r8, #2
  4036a2:	443d      	add	r5, r7
  4036a4:	1aed      	subs	r5, r5, r3
  4036a6:	b2a4      	uxth	r4, r4
  4036a8:	fbb5 f0fa 	udiv	r0, r5, sl
  4036ac:	fb0a 5510 	mls	r5, sl, r0, r5
  4036b0:	ea44 4405 	orr.w	r4, r4, r5, lsl #16
  4036b4:	fb00 f909 	mul.w	r9, r0, r9
  4036b8:	45a1      	cmp	r9, r4
  4036ba:	d909      	bls.n	4036d0 <__udivmoddi4+0x98>
  4036bc:	19e4      	adds	r4, r4, r7
  4036be:	f100 33ff 	add.w	r3, r0, #4294967295
  4036c2:	f080 810a 	bcs.w	4038da <__udivmoddi4+0x2a2>
  4036c6:	45a1      	cmp	r9, r4
  4036c8:	f240 8107 	bls.w	4038da <__udivmoddi4+0x2a2>
  4036cc:	3802      	subs	r0, #2
  4036ce:	443c      	add	r4, r7
  4036d0:	eba4 0409 	sub.w	r4, r4, r9
  4036d4:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
  4036d8:	2100      	movs	r1, #0
  4036da:	2e00      	cmp	r6, #0
  4036dc:	d061      	beq.n	4037a2 <__udivmoddi4+0x16a>
  4036de:	fa24 f40e 	lsr.w	r4, r4, lr
  4036e2:	2300      	movs	r3, #0
  4036e4:	6034      	str	r4, [r6, #0]
  4036e6:	6073      	str	r3, [r6, #4]
  4036e8:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
  4036ec:	428b      	cmp	r3, r1
  4036ee:	d907      	bls.n	403700 <__udivmoddi4+0xc8>
  4036f0:	2e00      	cmp	r6, #0
  4036f2:	d054      	beq.n	40379e <__udivmoddi4+0x166>
  4036f4:	2100      	movs	r1, #0
  4036f6:	e886 0021 	stmia.w	r6, {r0, r5}
  4036fa:	4608      	mov	r0, r1
  4036fc:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
  403700:	fab3 f183 	clz	r1, r3
  403704:	2900      	cmp	r1, #0
  403706:	f040 808e 	bne.w	403826 <__udivmoddi4+0x1ee>
  40370a:	42ab      	cmp	r3, r5
  40370c:	d302      	bcc.n	403714 <__udivmoddi4+0xdc>
  40370e:	4282      	cmp	r2, r0
  403710:	f200 80fa 	bhi.w	403908 <__udivmoddi4+0x2d0>
  403714:	1a84      	subs	r4, r0, r2
  403716:	eb65 0503 	sbc.w	r5, r5, r3
  40371a:	2001      	movs	r0, #1
  40371c:	46ac      	mov	ip, r5
  40371e:	2e00      	cmp	r6, #0
  403720:	d03f      	beq.n	4037a2 <__udivmoddi4+0x16a>
  403722:	e886 1010 	stmia.w	r6, {r4, ip}
  403726:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
  40372a:	b912      	cbnz	r2, 403732 <__udivmoddi4+0xfa>
  40372c:	2701      	movs	r7, #1
  40372e:	fbb7 f7f2 	udiv	r7, r7, r2
  403732:	fab7 fe87 	clz	lr, r7
  403736:	f1be 0f00 	cmp.w	lr, #0
  40373a:	d134      	bne.n	4037a6 <__udivmoddi4+0x16e>
  40373c:	1beb      	subs	r3, r5, r7
  40373e:	0c3a      	lsrs	r2, r7, #16
  403740:	fa1f fc87 	uxth.w	ip, r7
  403744:	2101      	movs	r1, #1
  403746:	fbb3 f8f2 	udiv	r8, r3, r2
  40374a:	0c25      	lsrs	r5, r4, #16
  40374c:	fb02 3318 	mls	r3, r2, r8, r3
  403750:	ea45 4503 	orr.w	r5, r5, r3, lsl #16
  403754:	fb0c f308 	mul.w	r3, ip, r8
  403758:	42ab      	cmp	r3, r5
  40375a:	d907      	bls.n	40376c <__udivmoddi4+0x134>
  40375c:	19ed      	adds	r5, r5, r7
  40375e:	f108 30ff 	add.w	r0, r8, #4294967295
  403762:	d202      	bcs.n	40376a <__udivmoddi4+0x132>
  403764:	42ab      	cmp	r3, r5
  403766:	f200 80d1 	bhi.w	40390c <__udivmoddi4+0x2d4>
  40376a:	4680      	mov	r8, r0
  40376c:	1aed      	subs	r5, r5, r3
  40376e:	b2a3      	uxth	r3, r4
  403770:	fbb5 f0f2 	udiv	r0, r5, r2
  403774:	fb02 5510 	mls	r5, r2, r0, r5
  403778:	ea43 4405 	orr.w	r4, r3, r5, lsl #16
  40377c:	fb0c fc00 	mul.w	ip, ip, r0
  403780:	45a4      	cmp	ip, r4
  403782:	d907      	bls.n	403794 <__udivmoddi4+0x15c>
  403784:	19e4      	adds	r4, r4, r7
  403786:	f100 33ff 	add.w	r3, r0, #4294967295
  40378a:	d202      	bcs.n	403792 <__udivmoddi4+0x15a>
  40378c:	45a4      	cmp	ip, r4
  40378e:	f200 80b8 	bhi.w	403902 <__udivmoddi4+0x2ca>
  403792:	4618      	mov	r0, r3
  403794:	eba4 040c 	sub.w	r4, r4, ip
  403798:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
  40379c:	e79d      	b.n	4036da <__udivmoddi4+0xa2>
  40379e:	4631      	mov	r1, r6
  4037a0:	4630      	mov	r0, r6
  4037a2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
  4037a6:	f1ce 0420 	rsb	r4, lr, #32
  4037aa:	fa05 f30e 	lsl.w	r3, r5, lr
  4037ae:	fa07 f70e 	lsl.w	r7, r7, lr
  4037b2:	fa20 f804 	lsr.w	r8, r0, r4
  4037b6:	0c3a      	lsrs	r2, r7, #16
  4037b8:	fa25 f404 	lsr.w	r4, r5, r4
  4037bc:	ea48 0803 	orr.w	r8, r8, r3
  4037c0:	fbb4 f1f2 	udiv	r1, r4, r2
  4037c4:	ea4f 4518 	mov.w	r5, r8, lsr #16
  4037c8:	fb02 4411 	mls	r4, r2, r1, r4
  4037cc:	fa1f fc87 	uxth.w	ip, r7
  4037d0:	ea45 4504 	orr.w	r5, r5, r4, lsl #16
  4037d4:	fb01 f30c 	mul.w	r3, r1, ip
  4037d8:	42ab      	cmp	r3, r5
  4037da:	fa00 f40e 	lsl.w	r4, r0, lr
  4037de:	d909      	bls.n	4037f4 <__udivmoddi4+0x1bc>
  4037e0:	19ed      	adds	r5, r5, r7
  4037e2:	f101 30ff 	add.w	r0, r1, #4294967295
  4037e6:	f080 808a 	bcs.w	4038fe <__udivmoddi4+0x2c6>
  4037ea:	42ab      	cmp	r3, r5
  4037ec:	f240 8087 	bls.w	4038fe <__udivmoddi4+0x2c6>
  4037f0:	3902      	subs	r1, #2
  4037f2:	443d      	add	r5, r7
  4037f4:	1aeb      	subs	r3, r5, r3
  4037f6:	fa1f f588 	uxth.w	r5, r8
  4037fa:	fbb3 f0f2 	udiv	r0, r3, r2
  4037fe:	fb02 3310 	mls	r3, r2, r0, r3
  403802:	ea45 4503 	orr.w	r5, r5, r3, lsl #16
  403806:	fb00 f30c 	mul.w	r3, r0, ip
  40380a:	42ab      	cmp	r3, r5
  40380c:	d907      	bls.n	40381e <__udivmoddi4+0x1e6>
  40380e:	19ed      	adds	r5, r5, r7
  403810:	f100 38ff 	add.w	r8, r0, #4294967295
  403814:	d26f      	bcs.n	4038f6 <__udivmoddi4+0x2be>
  403816:	42ab      	cmp	r3, r5
  403818:	d96d      	bls.n	4038f6 <__udivmoddi4+0x2be>
  40381a:	3802      	subs	r0, #2
  40381c:	443d      	add	r5, r7
  40381e:	1aeb      	subs	r3, r5, r3
  403820:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
  403824:	e78f      	b.n	403746 <__udivmoddi4+0x10e>
  403826:	f1c1 0720 	rsb	r7, r1, #32
  40382a:	fa22 f807 	lsr.w	r8, r2, r7
  40382e:	408b      	lsls	r3, r1
  403830:	fa05 f401 	lsl.w	r4, r5, r1
  403834:	ea48 0303 	orr.w	r3, r8, r3
  403838:	fa20 fe07 	lsr.w	lr, r0, r7
  40383c:	ea4f 4c13 	mov.w	ip, r3, lsr #16
  403840:	40fd      	lsrs	r5, r7
  403842:	ea4e 0e04 	orr.w	lr, lr, r4
  403846:	fbb5 f9fc 	udiv	r9, r5, ip
  40384a:	ea4f 441e 	mov.w	r4, lr, lsr #16
  40384e:	fb0c 5519 	mls	r5, ip, r9, r5
  403852:	fa1f f883 	uxth.w	r8, r3
  403856:	ea44 4505 	orr.w	r5, r4, r5, lsl #16
  40385a:	fb09 f408 	mul.w	r4, r9, r8
  40385e:	42ac      	cmp	r4, r5
  403860:	fa02 f201 	lsl.w	r2, r2, r1
  403864:	fa00 fa01 	lsl.w	sl, r0, r1
  403868:	d908      	bls.n	40387c <__udivmoddi4+0x244>
  40386a:	18ed      	adds	r5, r5, r3
  40386c:	f109 30ff 	add.w	r0, r9, #4294967295
  403870:	d243      	bcs.n	4038fa <__udivmoddi4+0x2c2>
  403872:	42ac      	cmp	r4, r5
  403874:	d941      	bls.n	4038fa <__udivmoddi4+0x2c2>
  403876:	f1a9 0902 	sub.w	r9, r9, #2
  40387a:	441d      	add	r5, r3
  40387c:	1b2d      	subs	r5, r5, r4
  40387e:	fa1f fe8e 	uxth.w	lr, lr
  403882:	fbb5 f0fc 	udiv	r0, r5, ip
  403886:	fb0c 5510 	mls	r5, ip, r0, r5
  40388a:	ea4e 4405 	orr.w	r4, lr, r5, lsl #16
  40388e:	fb00 f808 	mul.w	r8, r0, r8
  403892:	45a0      	cmp	r8, r4
  403894:	d907      	bls.n	4038a6 <__udivmoddi4+0x26e>
  403896:	18e4      	adds	r4, r4, r3
  403898:	f100 35ff 	add.w	r5, r0, #4294967295
  40389c:	d229      	bcs.n	4038f2 <__udivmoddi4+0x2ba>
  40389e:	45a0      	cmp	r8, r4
  4038a0:	d927      	bls.n	4038f2 <__udivmoddi4+0x2ba>
  4038a2:	3802      	subs	r0, #2
  4038a4:	441c      	add	r4, r3
  4038a6:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
  4038aa:	eba4 0408 	sub.w	r4, r4, r8
  4038ae:	fba0 8902 	umull	r8, r9, r0, r2
  4038b2:	454c      	cmp	r4, r9
  4038b4:	46c6      	mov	lr, r8
  4038b6:	464d      	mov	r5, r9
  4038b8:	d315      	bcc.n	4038e6 <__udivmoddi4+0x2ae>
  4038ba:	d012      	beq.n	4038e2 <__udivmoddi4+0x2aa>
  4038bc:	b156      	cbz	r6, 4038d4 <__udivmoddi4+0x29c>
  4038be:	ebba 030e 	subs.w	r3, sl, lr
  4038c2:	eb64 0405 	sbc.w	r4, r4, r5
  4038c6:	fa04 f707 	lsl.w	r7, r4, r7
  4038ca:	40cb      	lsrs	r3, r1
  4038cc:	431f      	orrs	r7, r3
  4038ce:	40cc      	lsrs	r4, r1
  4038d0:	6037      	str	r7, [r6, #0]
  4038d2:	6074      	str	r4, [r6, #4]
  4038d4:	2100      	movs	r1, #0
  4038d6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
  4038da:	4618      	mov	r0, r3
  4038dc:	e6f8      	b.n	4036d0 <__udivmoddi4+0x98>
  4038de:	4690      	mov	r8, r2
  4038e0:	e6e0      	b.n	4036a4 <__udivmoddi4+0x6c>
  4038e2:	45c2      	cmp	sl, r8
  4038e4:	d2ea      	bcs.n	4038bc <__udivmoddi4+0x284>
  4038e6:	ebb8 0e02 	subs.w	lr, r8, r2
  4038ea:	eb69 0503 	sbc.w	r5, r9, r3
  4038ee:	3801      	subs	r0, #1
  4038f0:	e7e4      	b.n	4038bc <__udivmoddi4+0x284>
  4038f2:	4628      	mov	r0, r5
  4038f4:	e7d7      	b.n	4038a6 <__udivmoddi4+0x26e>
  4038f6:	4640      	mov	r0, r8
  4038f8:	e791      	b.n	40381e <__udivmoddi4+0x1e6>
  4038fa:	4681      	mov	r9, r0
  4038fc:	e7be      	b.n	40387c <__udivmoddi4+0x244>
  4038fe:	4601      	mov	r1, r0
  403900:	e778      	b.n	4037f4 <__udivmoddi4+0x1bc>
  403902:	3802      	subs	r0, #2
  403904:	443c      	add	r4, r7
  403906:	e745      	b.n	403794 <__udivmoddi4+0x15c>
  403908:	4608      	mov	r0, r1
  40390a:	e708      	b.n	40371e <__udivmoddi4+0xe6>
  40390c:	f1a8 0802 	sub.w	r8, r8, #2
  403910:	443d      	add	r5, r7
  403912:	e72b      	b.n	40376c <__udivmoddi4+0x134>

00403914 <__aeabi_idiv0>:
  403914:	4770      	bx	lr
  403916:	bf00      	nop

00403918 <__libc_init_array>:
  403918:	b570      	push	{r4, r5, r6, lr}
  40391a:	4e0f      	ldr	r6, [pc, #60]	; (403958 <__libc_init_array+0x40>)
  40391c:	4d0f      	ldr	r5, [pc, #60]	; (40395c <__libc_init_array+0x44>)
  40391e:	1b76      	subs	r6, r6, r5
  403920:	10b6      	asrs	r6, r6, #2
  403922:	bf18      	it	ne
  403924:	2400      	movne	r4, #0
  403926:	d005      	beq.n	403934 <__libc_init_array+0x1c>
  403928:	3401      	adds	r4, #1
  40392a:	f855 3b04 	ldr.w	r3, [r5], #4
  40392e:	4798      	blx	r3
  403930:	42a6      	cmp	r6, r4
  403932:	d1f9      	bne.n	403928 <__libc_init_array+0x10>
  403934:	4e0a      	ldr	r6, [pc, #40]	; (403960 <__libc_init_array+0x48>)
  403936:	4d0b      	ldr	r5, [pc, #44]	; (403964 <__libc_init_array+0x4c>)
  403938:	1b76      	subs	r6, r6, r5
  40393a:	f000 fdeb 	bl	404514 <_init>
  40393e:	10b6      	asrs	r6, r6, #2
  403940:	bf18      	it	ne
  403942:	2400      	movne	r4, #0
  403944:	d006      	beq.n	403954 <__libc_init_array+0x3c>
  403946:	3401      	adds	r4, #1
  403948:	f855 3b04 	ldr.w	r3, [r5], #4
  40394c:	4798      	blx	r3
  40394e:	42a6      	cmp	r6, r4
  403950:	d1f9      	bne.n	403946 <__libc_init_array+0x2e>
  403952:	bd70      	pop	{r4, r5, r6, pc}
  403954:	bd70      	pop	{r4, r5, r6, pc}
  403956:	bf00      	nop
  403958:	00404520 	.word	0x00404520
  40395c:	00404520 	.word	0x00404520
  403960:	00404528 	.word	0x00404528
  403964:	00404520 	.word	0x00404520

00403968 <register_fini>:
  403968:	4b02      	ldr	r3, [pc, #8]	; (403974 <register_fini+0xc>)
  40396a:	b113      	cbz	r3, 403972 <register_fini+0xa>
  40396c:	4802      	ldr	r0, [pc, #8]	; (403978 <register_fini+0x10>)
  40396e:	f000 b805 	b.w	40397c <atexit>
  403972:	4770      	bx	lr
  403974:	00000000 	.word	0x00000000
  403978:	00403989 	.word	0x00403989

0040397c <atexit>:
  40397c:	2300      	movs	r3, #0
  40397e:	4601      	mov	r1, r0
  403980:	461a      	mov	r2, r3
  403982:	4618      	mov	r0, r3
  403984:	f000 b81e 	b.w	4039c4 <__register_exitproc>

00403988 <__libc_fini_array>:
  403988:	b538      	push	{r3, r4, r5, lr}
  40398a:	4c0a      	ldr	r4, [pc, #40]	; (4039b4 <__libc_fini_array+0x2c>)
  40398c:	4d0a      	ldr	r5, [pc, #40]	; (4039b8 <__libc_fini_array+0x30>)
  40398e:	1b64      	subs	r4, r4, r5
  403990:	10a4      	asrs	r4, r4, #2
  403992:	d00a      	beq.n	4039aa <__libc_fini_array+0x22>
  403994:	f104 4380 	add.w	r3, r4, #1073741824	; 0x40000000
  403998:	3b01      	subs	r3, #1
  40399a:	eb05 0583 	add.w	r5, r5, r3, lsl #2
  40399e:	3c01      	subs	r4, #1
  4039a0:	f855 3904 	ldr.w	r3, [r5], #-4
  4039a4:	4798      	blx	r3
  4039a6:	2c00      	cmp	r4, #0
  4039a8:	d1f9      	bne.n	40399e <__libc_fini_array+0x16>
  4039aa:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
  4039ae:	f000 bdbb 	b.w	404528 <_fini>
  4039b2:	bf00      	nop
  4039b4:	00404538 	.word	0x00404538
  4039b8:	00404534 	.word	0x00404534

004039bc <__retarget_lock_acquire_recursive>:
  4039bc:	4770      	bx	lr
  4039be:	bf00      	nop

004039c0 <__retarget_lock_release_recursive>:
  4039c0:	4770      	bx	lr
  4039c2:	bf00      	nop

004039c4 <__register_exitproc>:
  4039c4:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
  4039c8:	4d2c      	ldr	r5, [pc, #176]	; (403a7c <__register_exitproc+0xb8>)
  4039ca:	4606      	mov	r6, r0
  4039cc:	6828      	ldr	r0, [r5, #0]
  4039ce:	4698      	mov	r8, r3
  4039d0:	460f      	mov	r7, r1
  4039d2:	4691      	mov	r9, r2
  4039d4:	f7ff fff2 	bl	4039bc <__retarget_lock_acquire_recursive>
  4039d8:	4b29      	ldr	r3, [pc, #164]	; (403a80 <__register_exitproc+0xbc>)
  4039da:	681c      	ldr	r4, [r3, #0]
  4039dc:	f8d4 3148 	ldr.w	r3, [r4, #328]	; 0x148
  4039e0:	2b00      	cmp	r3, #0
  4039e2:	d03e      	beq.n	403a62 <__register_exitproc+0x9e>
  4039e4:	685a      	ldr	r2, [r3, #4]
  4039e6:	2a1f      	cmp	r2, #31
  4039e8:	dc1c      	bgt.n	403a24 <__register_exitproc+0x60>
  4039ea:	f102 0e01 	add.w	lr, r2, #1
  4039ee:	b176      	cbz	r6, 403a0e <__register_exitproc+0x4a>
  4039f0:	eb03 0182 	add.w	r1, r3, r2, lsl #2
  4039f4:	2401      	movs	r4, #1
  4039f6:	f8c1 9088 	str.w	r9, [r1, #136]	; 0x88
  4039fa:	f8d3 0188 	ldr.w	r0, [r3, #392]	; 0x188
  4039fe:	4094      	lsls	r4, r2
  403a00:	4320      	orrs	r0, r4
  403a02:	2e02      	cmp	r6, #2
  403a04:	f8c3 0188 	str.w	r0, [r3, #392]	; 0x188
  403a08:	f8c1 8108 	str.w	r8, [r1, #264]	; 0x108
  403a0c:	d023      	beq.n	403a56 <__register_exitproc+0x92>
  403a0e:	3202      	adds	r2, #2
  403a10:	f8c3 e004 	str.w	lr, [r3, #4]
  403a14:	6828      	ldr	r0, [r5, #0]
  403a16:	f843 7022 	str.w	r7, [r3, r2, lsl #2]
  403a1a:	f7ff ffd1 	bl	4039c0 <__retarget_lock_release_recursive>
  403a1e:	2000      	movs	r0, #0
  403a20:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
  403a24:	4b17      	ldr	r3, [pc, #92]	; (403a84 <__register_exitproc+0xc0>)
  403a26:	b30b      	cbz	r3, 403a6c <__register_exitproc+0xa8>
  403a28:	f44f 70c8 	mov.w	r0, #400	; 0x190
  403a2c:	f3af 8000 	nop.w
  403a30:	4603      	mov	r3, r0
  403a32:	b1d8      	cbz	r0, 403a6c <__register_exitproc+0xa8>
  403a34:	f8d4 2148 	ldr.w	r2, [r4, #328]	; 0x148
  403a38:	6002      	str	r2, [r0, #0]
  403a3a:	2100      	movs	r1, #0
  403a3c:	6041      	str	r1, [r0, #4]
  403a3e:	460a      	mov	r2, r1
  403a40:	f8c4 0148 	str.w	r0, [r4, #328]	; 0x148
  403a44:	f04f 0e01 	mov.w	lr, #1
  403a48:	f8c0 1188 	str.w	r1, [r0, #392]	; 0x188
  403a4c:	f8c0 118c 	str.w	r1, [r0, #396]	; 0x18c
  403a50:	2e00      	cmp	r6, #0
  403a52:	d0dc      	beq.n	403a0e <__register_exitproc+0x4a>
  403a54:	e7cc      	b.n	4039f0 <__register_exitproc+0x2c>
  403a56:	f8d3 118c 	ldr.w	r1, [r3, #396]	; 0x18c
  403a5a:	430c      	orrs	r4, r1
  403a5c:	f8c3 418c 	str.w	r4, [r3, #396]	; 0x18c
  403a60:	e7d5      	b.n	403a0e <__register_exitproc+0x4a>
  403a62:	f504 73a6 	add.w	r3, r4, #332	; 0x14c
  403a66:	f8c4 3148 	str.w	r3, [r4, #328]	; 0x148
  403a6a:	e7bb      	b.n	4039e4 <__register_exitproc+0x20>
  403a6c:	6828      	ldr	r0, [r5, #0]
  403a6e:	f7ff ffa7 	bl	4039c0 <__retarget_lock_release_recursive>
  403a72:	f04f 30ff 	mov.w	r0, #4294967295
  403a76:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
  403a7a:	bf00      	nop
  403a7c:	20400448 	.word	0x20400448
  403a80:	00404510 	.word	0x00404510
  403a84:	00000000 	.word	0x00000000

00403a88 <sysfont_glyphs>:
	...
  403aa8:	00300030 00300030 00300030 00300000     0.0.0.0.0.0...0.
  403ab8:	00000030 00000000 00000000 006c006c     0...........l.l.
  403ac8:	006c006c 00000000 00000000 00000000     l.l.............
	...
  403ae0:	00280000 007c0028 00280028 0028007c     ..(.(.|.(.(.|.(.
  403af0:	00000028 00000000 00000000 003c0010     (.............<.
  403b00:	00200040 00080010 00780004 00000010     @. .......x.....
	...
  403b18:	007c0000 00a800a4 00280050 00940054     ..|.....P.(.T...
  403b28:	00000088 00000000 00000000 00900060     ............`...
  403b38:	00900090 00940060 00880088 00000070     ....`.......p...
	...
  403b50:	00100010 00000010 00000000 00000000     ................
	...
  403b6c:	00100008 00200020 00200020 00200020     .... . . . . . .
  403b7c:	00080010 00000000 00000000 00100020     ............ ...
  403b8c:	00080008 00080008 00080008 00200010     .............. .
  403b9c:	00000000 00280000 007c0010 00280010     ......(...|...(.
	...
  403bc4:	00100010 00fe0010 00100010 00000010     ................
	...
  403bec:	00300010 00000020 00000000 00000000     ..0. ...........
  403bfc:	00000000 007c0000 00000000 00000000     ......|.........
	...
  403c20:	00300000 00000030 00000000 00000000     ..0.0...........
  403c30:	00080000 00100008 00200010 00400020     .......... . .@.
  403c40:	00000040 00000000 00000000 00780000     @.............x.
  403c50:	008c0084 00a40094 008400c4 00000078     ............x...
	...
  403c68:	00100000 00500030 00100010 00100010     ....0.P.........
  403c78:	0000007c 00000000 00000000 00700000     |.............p.
  403c88:	00080088 00200010 00800040 000000f8     ...... .@.......
	...
  403ca0:	00700000 00080088 00080030 00880008     ..p.....0.......
  403cb0:	00000070 00000000 00000000 00080000     p...............
  403cc0:	00280018 00880048 000800fc 00000008     ..(.H...........
	...
  403cd8:	00780000 00800080 000800f0 00080008     ..x.............
  403ce8:	000000f0 00000000 00000000 00300000     ..............0.
  403cf8:	00800040 008800f0 00880088 00000070     @...........p...
	...
  403d10:	00f80000 00100008 00200010 00400020     .......... . .@.
  403d20:	00000040 00000000 00000000 00700000     @.............p.
  403d30:	00880088 00880070 00880088 00000070     ....p.......p...
	...
  403d48:	00700000 00880088 00780088 00100008     ..p.......x.....
  403d58:	00000060 00000000 00000000 00000000     `...............
  403d68:	00300000 00000030 00300000 00000030     ..0.0.....0.0...
	...
  403d84:	00300000 00000030 00300000 00600030     ..0.0.....0.0.`.
  403d94:	00000040 00000000 00000000 00100008     @...............
  403da4:	00400020 00100020 00000008 00000000      .@. ...........
	...
  403dc0:	0000007c 0000007c 00000000 00000000     |...|...........
	...
  403dd8:	00200040 00080010 00200010 00000040     @. ....... .@...
	...
  403df0:	00300000 00080048 00200010 00000000     ..0.H..... .....
  403e00:	00000020 00000000 00000000 00000000      ...............
  403e10:	0042003c 00aa009a 00be00aa 00780080     <.B...........x.
	...
  403e28:	00100000 00280028 007c0044 00440044     ....(.(.D.|.D.D.
  403e38:	00000044 00000000 00000000 00f80000     D...............
  403e48:	00840084 008400f8 00840084 000000f8     ................
	...
  403e60:	003c0000 00800040 00800080 00400080     ..<.@.........@.
  403e70:	0000003c 00000000 00000000 00f00000     <...............
  403e80:	00840088 00840084 00880084 000000f0     ................
	...
  403e98:	00f80000 00800080 008000f0 00800080     ................
  403ea8:	000000f8 00000000 00000000 00f80000     ................
  403eb8:	00800080 008000f8 00800080 00000080     ................
	...
  403ed0:	003c0000 00800040 009c0080 00440084     ..<.@.........D.
  403ee0:	00000038 00000000 00000000 00880000     8...............
  403ef0:	00880088 008800f8 00880088 00000088     ................
	...
  403f08:	00f80000 00200020 00200020 00200020     .... . . . . . .
  403f18:	000000f8 00000000 00000000 00f80000     ................
  403f28:	00080008 00080008 00080008 000000f0     ................
	...
  403f40:	00840000 00900088 00d000a0 00840088     ................
  403f50:	00000084 00000000 00000000 00800000     ................
  403f60:	00800080 00800080 00800080 000000fc     ................
	...
  403f78:	00840000 00cc00cc 00b400b4 00840084     ................
  403f88:	00000084 00000000 00000000 00840000     ................
  403f98:	00c400c4 00a400a4 00940094 0000008c     ................
	...
  403fb0:	00780000 00840084 00840084 00840084     ..x.............
  403fc0:	00000078 00000000 00000000 00f80000     x...............
  403fd0:	00840084 00f80084 00800080 00000080     ................
	...
  403fe8:	00780000 00840084 00840084 00840084     ..x.............
  403ff8:	00200078 00000018 00000000 00f80000     x. .............
  404008:	00840084 00f80084 00840088 00000084     ................
	...
  404020:	007c0000 00800080 00180060 00040004     ..|.....`.......
  404030:	000000f8 00000000 00000000 00f80000     ................
  404040:	00200020 00200020 00200020 00000020      . . . . . . ...
	...
  404058:	00840000 00840084 00840084 00840084     ................
  404068:	00000078 00000000 00000000 00840000     x...............
  404078:	00840084 00480048 00300048 00000030     ....H.H.H.0.0...
	...
  404090:	00880000 00a800a8 00a800a8 005000a8     ..............P.
  4040a0:	00000050 00000000 00000000 00880000     P...............
  4040b0:	00500088 00200020 00880050 00000088     ..P. . .P.......
	...
  4040c8:	00880000 00880088 00500050 00200020     ........P.P. . .
  4040d8:	00000020 00000000 00000000 00fc0000      ...............
  4040e8:	00080004 00200010 00800040 000000fc     ...... .@.......
	...
  404100:	00400070 00400040 00400040 00400040     p.@.@.@.@.@.@.@.
  404110:	00400040 00000070 00000000 00400040     @.@.p.......@.@.
  404120:	00200020 00100020 00100010 00080008      . . ...........
	...
  404138:	00080038 00080008 00080008 00080008     8...............
  404148:	00080008 00000038 00000000 00280010     ....8.........(.
  404158:	00000044 00000000 00000000 00000000     D...............
	...
  404180:	00000038 00000000 00000000 00200000     8............. .
  404190:	00000010 00000000 00000000 00000000     ................
	...
  4041ac:	00700000 00080008 00880078 0000007c     ..p.....x...|...
	...
  4041c4:	00800080 00f80080 00840084 00840084     ................
  4041d4:	000000f8 00000000 00000000 00000000     ................
  4041e4:	00780000 00800080 00800080 00000078     ..x.........x...
	...
  4041fc:	00040004 007c0004 00840084 008c0084     ......|.........
  40420c:	00000074 00000000 00000000 00000000     t...............
  40421c:	00780000 00fc0084 00800080 0000007c     ..x.........|...
	...
  404234:	0020001c 00fc0020 00200020 00200020     .. . ... . . . .
  404244:	000000fc 00000000 00000000 00000000     ................
  404254:	007c0000 00840084 00840084 0004007c     ..|.........|...
  404264:	00000078 00000000 00800080 00b80080     x...............
  404274:	008400c4 00840084 00000084 00000000     ................
  404284:	00000000 00100000 00700000 00100010     ..........p.....
  404294:	00100010 0000007c 00000000 00000000     ....|...........
  4042a4:	00080000 00780000 00080008 00080008     ......x.........
  4042b4:	00080008 00700008 00000000 00800080     ......p.........
  4042c4:	00880080 00a00090 008800d0 00000088     ................
	...
  4042dc:	002000e0 00200020 00200020 00200020     .. . . . . . . .
  4042ec:	000000f8 00000000 00000000 00000000     ................
  4042fc:	00a40000 00a400fc 00a400a4 000000a4     ................
	...
  404318:	00b80000 008400c4 00840084 00000084     ................
	...
  404334:	00780000 00840084 00840084 00000078     ..x.........x...
	...
  404350:	00b80000 008400c4 00840084 008000f8     ................
  404360:	00000080 00000000 00000000 007c0000     ..............|.
  404370:	00840084 00840084 0004007c 00000004     ........|.......
	...
  404388:	00d80000 00400060 00400040 000000f0     ....`.@.@.@.....
	...
  4043a4:	00780000 00400080 00080030 000000f0     ..x...@.0.......
	...
  4043c0:	00fc0020 00200020 00200020 0000001c      ... . . . .....
	...
  4043dc:	00880000 00880088 00880088 0000007c     ............|...
	...
  4043f8:	00840000 00840084 00480048 00000030     ........H.H.0...
	...
  404414:	00880000 00a800a8 00a800a8 00000050     ............P...
	...
  404430:	00880000 00200050 00500020 00000088     ....P. . .P.....
	...
  40444c:	00840000 00480084 00300048 00200010     ......H.H.0... .
  40445c:	00000040 00000000 00000000 00f80000     @...............
  40446c:	00100008 00400020 000000f8 00000000     .... .@.........
  40447c:	00000000 00200010 00100020 00200020     ...... . ... . .
  40448c:	00200010 00100020 00000000 00000000     .. . ...........
  40449c:	00100010 00100010 00000000 00100010     ................
  4044ac:	00100010 00000000 00000000 00100020     ............ ...
  4044bc:	00200010 00100010 00100020 00200010     .. ..... ..... .
  4044cc:	00000000 20202020 20202020 20202020     ....            
  4044dc:	00000020 20746573 73736170 00006477      ...set passwd..
  4044ec:	6b636f6c 00006465 0000002a 6b636f6c     locked..*...lock
  4044fc:	00000000 6e65706f 00000000 636f6c62     ....open....bloc
  40450c:	0000006b                                k...

00404510 <_global_impure_ptr>:
  404510:	20400020                                 .@ 

00404514 <_init>:
  404514:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
  404516:	bf00      	nop
  404518:	bcf8      	pop	{r3, r4, r5, r6, r7}
  40451a:	bc08      	pop	{r3}
  40451c:	469e      	mov	lr, r3
  40451e:	4770      	bx	lr

00404520 <__init_array_start>:
  404520:	00403969 	.word	0x00403969

00404524 <__frame_dummy_init_array_entry>:
  404524:	00400165                                e.@.

00404528 <_fini>:
  404528:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
  40452a:	bf00      	nop
  40452c:	bcf8      	pop	{r3, r4, r5, r6, r7}
  40452e:	bc08      	pop	{r3}
  404530:	469e      	mov	lr, r3
  404532:	4770      	bx	lr

00404534 <__fini_array_start>:
  404534:	00400141 	.word	0x00400141

Disassembly of section .relocate:

20400000 <portable_delay_cycles>:
RAMFUNC
void portable_delay_cycles(unsigned long n)
{
	UNUSED(n);

	__asm (
20400000:	f3bf 8f5f 	dmb	sy
20400004:	3801      	subs	r0, #1
20400006:	d1fb      	bne.n	20400000 <portable_delay_cycles>
20400008:	4770      	bx	lr
	...

2040000c <sysfont>:
2040000c:	0000 0000 3a88 0040 0e0a 7d20               .....:@... }

20400018 <g_interrupt_enabled>:
20400018:	0001 0000                                   ....

2040001c <SystemCoreClock>:
2040001c:	0900 003d                                   ..=.

20400020 <impure_data>:
20400020:	0000 0000 030c 2040 0374 2040 03dc 2040     ......@ t.@ ..@ 
	...
204000c8:	0001 0000 0000 0000 330e abcd 1234 e66d     .........3..4.m.
204000d8:	deec 0005 000b 0000 0000 0000 0000 0000     ................
	...

20400448 <__atexit_recursive_mutex>:
20400448:	06e8 2040                                   ..@ 
